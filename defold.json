{
  [1] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Static (immovable) body,
        ["name"] = b2d.body.B2_STATIC_BODY,
        ["error"] = ,
        ["brief"] = Static (immovable) body,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Kinematic body,
        ["name"] = b2d.body.B2_KINEMATIC_BODY,
        ["error"] = ,
        ["brief"] = Kinematic body,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dynamic body,
        ["name"] = b2d.body.B2_DYNAMIC_BODY,
        ["error"] = ,
        ["brief"] = Dynamic body,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = position,
            ["doc"] = the world position of the body's local origin.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = the world position of the body's local origin.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the position of the body's origin and rotation.
This breaks any contacts and wakes the other bodies.
Manipulating a body's transform may cause non-physical behavior.,
        ["name"] = b2d.body.set_transform,
        ["error"] = ,
        ["brief"] = Set the position of the body's origin and rotation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the world body origin position.,
        ["name"] = b2d.body.get_position,
        ["error"] = ,
        ["brief"] = Get the world body origin position.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = position,
            ["doc"] = the world position of the body's origin.,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the angle in radians.,
        ["name"] = b2d.body.get_world_center,
        ["error"] = ,
        ["brief"] = Get the angle in radians.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = the current world rotation angle in radians.,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the world position of the center of mass.,
        ["name"] = b2d.body.get_world_center,
        ["error"] = ,
        ["brief"] = Get the world position of the center of mass.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = center,
            ["doc"] = Get the world position of the center of mass.,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the local position of the center of mass.,
        ["name"] = b2d.body.get_local_center,
        ["error"] = ,
        ["brief"] = Get the local position of the center of mass.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = center,
            ["doc"] = Get the local position of the center of mass.,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = velocity,
            ["doc"] = the new linear velocity of the center of mass.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the linear velocity of the center of mass.,
        ["name"] = b2d.body.set_linear_velocity,
        ["error"] = ,
        ["brief"] = Set the linear velocity of the center of mass.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the linear velocity of the center of mass.,
        ["name"] = b2d.body.get_linear_velocity,
        ["error"] = ,
        ["brief"] = Get the linear velocity of the center of mass.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = velocity,
            ["doc"] = the linear velocity of the center of mass.,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = omega,
            ["doc"] = the new angular velocity in radians/second.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the angular velocity.,
        ["name"] = b2d.body.set_angular_velocity,
        ["error"] = ,
        ["brief"] = Set the angular velocity.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the angular velocity.,
        ["name"] = b2d.body.get_angular_velocity,
        ["error"] = ,
        ["brief"] = Get the angular velocity.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = velocity,
            ["doc"] = the angular velocity in radians/second.,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = force,
            ["doc"] = the world force vector, usually in Newtons (N).,
          },
          [3] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = point,
            ["doc"] = the world position of the point of application.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Apply a force at a world point. If the force is not
applied at the center of mass, it will generate a torque and
affect the angular velocity. This wakes up the body.,
        ["name"] = b2d.body.apply_force,
        ["error"] = ,
        ["brief"] = Apply a force at a world point. If the force is no...,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = force,
            ["doc"] = the world force vector, usually in Newtons (N).,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Apply a force to the center of mass. This wakes up the body.,
        ["name"] = b2d.body.apply_force_to_center,
        ["error"] = ,
        ["brief"] = Apply a force to the center of mass. This wakes up the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = torque,
            ["doc"] = torque about the z-axis (out of the screen), usually in N-m.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Apply a torque. This affects the angular velocity
without affecting the linear velocity of the center of mass.
This wakes up the body.,
        ["name"] = b2d.body.apply_torque,
        ["error"] = ,
        ["brief"] = Apply a torque. This affects the angular velocity
...,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = impulse,
            ["doc"] = the world impulse vector, usually in N-seconds or kg-m/s.,
          },
          [3] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = point,
            ["doc"] = the world position of the point of application.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Apply an impulse at a point. This immediately modifies the velocity.
It also modifies the angular velocity if the point of application
is not at the center of mass. This wakes up the body.,
        ["name"] = b2d.body.apply_linear_impulse,
        ["error"] = ,
        ["brief"] = Apply an impulse at a point. This immediately modi...,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = impulse,
            ["doc"] = impulse the angular impulse in units of kg<em>m</em>m/s,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Apply an angular impulse.,
        ["name"] = b2d.body.apply_angular_impulse,
        ["error"] = ,
        ["brief"] = Apply an angular impulse.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the total mass of the body.,
        ["name"] = b2d.body.get_mass,
        ["error"] = ,
        ["brief"] = Get the total mass of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = mass,
            ["doc"] = the mass, usually in kilograms (kg).,
          },
        },
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the rotational inertia of the body about the local origin.,
        ["name"] = b2d.body.get_inertia,
        ["error"] = ,
        ["brief"] = Get the rotational inertia of the body about the local origin.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = inertia,
            ["doc"] = the rotational inertia, usually in kg-m^2.,
          },
        },
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This resets the mass properties to the sum of the mass properties of the fixtures.
This normally does not need to be called unless you called SetMassData to override,
        ["name"] = b2d.body.reset_mass_data,
        ["error"] = ,
        ["brief"] = This resets the mass properties to the sum of the ...,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = local_vector,
            ["doc"] = localPoint a point on the body measured relative the the body's origin.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the world coordinates of a point given the local coordinates.,
        ["name"] = b2d.body.get_world_point,
        ["error"] = ,
        ["brief"] = Get the world coordinates of a point given the local coordinates.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = vector,
            ["doc"] = the same point expressed in world coordinates.,
          },
        },
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = local_vector,
            ["doc"] = a vector fixed in the body.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the world coordinates of a vector given the local coordinates.,
        ["name"] = b2d.body.get_world_vector,
        ["error"] = ,
        ["brief"] = Get the world coordinates of a vector given the local coordinates.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = vector,
            ["doc"] = the same vector expressed in world coordinates.,
          },
        },
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = world_point,
            ["doc"] = a point in world coordinates.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets a local point relative to the body's origin given a world point.,
        ["name"] = b2d.body.get_local_point,
        ["error"] = ,
        ["brief"] = Gets a local point relative to the body's origin given a world point.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = vector,
            ["doc"] = the corresponding local point relative to the body's origin.,
          },
        },
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = world_vector,
            ["doc"] = a vector in world coordinates.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets a local vector given a world vector.,
        ["name"] = b2d.body.get_local_vector,
        ["error"] = ,
        ["brief"] = Gets a local vector given a world vector.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = vector,
            ["doc"] = the corresponding local vector.,
          },
        },
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = world_point,
            ["doc"] = a point in world coordinates.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the world linear velocity of a world point attached to this body.,
        ["name"] = b2d.body.get_linear_velocity_from_world_point,
        ["error"] = ,
        ["brief"] = Get the world linear velocity of a world point attached to this body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = velocity,
            ["doc"] = the world velocity of a point.,
          },
        },
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = local_point,
            ["doc"] = a point in local coordinates.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the world velocity of a local point.,
        ["name"] = b2d.body.get_linear_velocity_from_local_point,
        ["error"] = ,
        ["brief"] = Get the world velocity of a local point.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.vector3,
            },
            ["name"] = velocity,
            ["doc"] = the world velocity of a point.,
          },
        },
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = the damping,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the linear damping of the body.,
        ["name"] = b2d.body.set_linear_damping,
        ["error"] = ,
        ["brief"] = Set the linear damping of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the linear damping of the body.,
        ["name"] = b2d.body.get_linear_damping,
        ["error"] = ,
        ["brief"] = Get the linear damping of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = the damping,
          },
        },
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = the damping,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the angular damping of the body.,
        ["name"] = b2d.body.set_angular_damping,
        ["error"] = ,
        ["brief"] = Set the angular damping of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the angular damping of the body.,
        ["name"] = b2d.body.get_angular_damping,
        ["error"] = ,
        ["brief"] = Get the angular damping of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = the damping,
          },
        },
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = scale,
            ["doc"] = the scale,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the gravity scale of the body.,
        ["name"] = b2d.body.set_gravity_scale,
        ["error"] = ,
        ["brief"] = Set the gravity scale of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the gravity scale of the body.,
        ["name"] = b2d.body.get_gravity_scale,
        ["error"] = ,
        ["brief"] = Get the gravity scale of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = scale,
            ["doc"] = the scale,
          },
        },
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = b2BodyType,
            },
            ["name"] = type,
            ["doc"] = the body type,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the type of this body. This may alter the mass and velocity.,
        ["name"] = b2d.body.set_type,
        ["error"] = ,
        ["brief"] = Set the type of this body. This may alter the mass and velocity.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the type of this body.,
        ["name"] = b2d.body.get_type,
        ["error"] = ,
        ["brief"] = Get the type of this body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = b2BodyType,
            },
            ["name"] = type,
            ["doc"] = the body type,
          },
        },
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enable,
            ["doc"] = if true, the body will be in bullet mode,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Should this body be treated like a bullet for continuous collision detection?,
        ["name"] = b2d.body.set_bullet,
        ["error"] = ,
        ["brief"] = Should this body be treated like a bullet for continuous collision detection?,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Is this body in bullet mode,
        ["name"] = b2d.body.is_bullet,
        ["error"] = ,
        ["brief"] = Is this body in bullet mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enabled,
            ["doc"] = true if the body is in bullet mode,
          },
        },
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enable,
            ["doc"] = if false, the body will never sleep, and consume more CPU,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = You can disable sleeping on this body. If you disable sleeping, the body will be woken.,
        ["name"] = b2d.body.set_sleeping_allowed,
        ["error"] = ,
        ["brief"] = You can disable sleeping on this body. If you disable sleeping, the body will be woken.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Is this body allowed to sleep,
        ["name"] = b2d.body.is_sleeping_allowed,
        ["error"] = ,
        ["brief"] = Is this body allowed to sleep,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enabled,
            ["doc"] = true if the body is allowed to sleep,
          },
        },
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enable,
            ["doc"] = flag set to false to put body to sleep, true to wake it.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the sleep state of the body. A sleeping body has very low CPU cost.,
        ["name"] = b2d.body.set_awake,
        ["error"] = ,
        ["brief"] = Set the sleep state of the body. A sleeping body has very low CPU cost.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the sleeping state of this body.,
        ["name"] = b2d.body.is_awake,
        ["error"] = ,
        ["brief"] = Get the sleeping state of this body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enabled,
            ["doc"] = true if the body is awake, false if it's sleeping.,
          },
        },
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enable,
            ["doc"] = true if the body should be active,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the active state of the body. An inactive body is not
simulated and cannot be collided with or woken up.
If you pass a flag of true, all fixtures will be added to the
broad-phase.
If you pass a flag of false, all fixtures will be removed from
the broad-phase and all contacts will be destroyed.
Fixtures and joints are otherwise unaffected. You may continue
to create/destroy fixtures and joints on inactive bodies.
Fixtures on an inactive body are implicitly inactive and will
not participate in collisions, ray-casts, or queries.
Joints connected to an inactive body are implicitly inactive.
An inactive body is still owned by a b2World object and remains
in the body list.,
        ["name"] = b2d.body.set_active,
        ["error"] = ,
        ["brief"] = Set the active state of the body,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the active state of the body.,
        ["name"] = b2d.body.is_active,
        ["error"] = ,
        ["brief"] = Get the active state of the body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enabled,
            ["doc"] = is the body active,
          },
        },
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
          [2] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enable,
            ["doc"] = true if the rotation should be fixed,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set this body to have fixed rotation. This causes the mass to be reset.,
        ["name"] = b2d.body.set_fixed_rotation,
        ["error"] = ,
        ["brief"] = Set this body to have fixed rotation. This causes the mass to be reset.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Does this body have fixed rotation?,
        ["name"] = b2d.body.is_fixed_rotation,
        ["error"] = ,
        ["brief"] = Does this body have fixed rotation?,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = enabled,
            ["doc"] = is the rotation fixed,
          },
        },
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the next body in the world's body list.,
        ["name"] = b2d.body.get_next,
        ["error"] = ,
        ["brief"] = Get the next body in the world's body list.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = the next body,
          },
        },
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the parent world of this body.,
        ["name"] = b2d.body.get_world,
        ["error"] = ,
        ["brief"] = Get the parent world of this body.,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = b2World,
            },
            ["name"] = world,
            ["doc"] = ,
          },
        },
      },
      [47] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = body,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Print the body representation to the log output,
        ["name"] = b2d.body.dump,
        ["error"] = ,
        ["brief"] = Print the body representation to the log output,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions for interacting with Box2D bodies.,
      ["name"] = b2d.body,
      ["notes"] = {},
      ["namespace"] = b2d.body,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Box2D b2Body documentation,
    },
  },
  [2] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the Box2D world from the current collection,
        ["name"] = b2d.get_world,
        ["error"] = ,
        ["brief"] = Get the Box2D world from the current collection,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = b2World,
            },
            ["name"] = world,
            ["doc"] = the world if successful. Otherwise <code>nil</code>.,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the url to the game object collision component,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the Box2D body from a collision object,
        ["name"] = b2d.get_body,
        ["error"] = ,
        ["brief"] = Get the Box2D body from a collision object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = b2Body,
            },
            ["name"] = body,
            ["doc"] = the body if successful. Otherwise <code>nil</code>.,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions for interacting with Box2D.,
      ["name"] = b2d,
      ["notes"] = {},
      ["namespace"] = b2d,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Box2D documentation,
    },
  },
  [3] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number to normalize,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Normalizes a number to the numeric range for bit operations and returns it. This function is usually not needed since all bit operations already normalize all of their input arguments.,
        ["name"] = bit.tobit,
        ["error"] = ,
        ["brief"] = normalize number to the numeric range for bit operations,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>                <span class="c1">--&gt; 4294967295 (*)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tobit</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">))</span>     <span class="c1">--&gt; -1</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tobit</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">))</span>    <span class="c1">--&gt; 0xffffffff</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tobit</span><span class="p">(</span><span class="mh">0xffffffff</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="c1">--&gt; 0</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tobit</span><span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">40</span> <span class="o">+</span> <span class="mi">1234</span><span class="p">))</span>    <span class="c1">--&gt; 1234</span>
</code></pre></div>

(*) See the treatment of hex literals for an explanation why the printed numbers in the first two lines differ (if your Lua installation uses a double number type).,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = normalized number,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number to convert,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = number of hex digits to return,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Converts its first argument to a hex string. The number of hex digits is given by the absolute value of the optional second argument. Positive numbers between 1 and 8 generate lowercase hex digits. Negative numbers generate uppercase hex digits. Only the least-significant 4*|n| bits are used. The default is to generate 8 lowercase hex digits.,
        ["name"] = bit.tohex,
        ["error"] = ,
        ["brief"] = convert number to a hex string,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>              <span class="c1">--&gt; 00000001</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>             <span class="c1">--&gt; ffffffff</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">))</span>     <span class="c1">--&gt; ffffffff</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">))</span>         <span class="c1">--&gt; FFFFFFFF</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="mh">0x21</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>        <span class="c1">--&gt; 0021</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="mh">0x87654321</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>  <span class="c1">--&gt; 4321</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = s,
            ["doc"] = hexadecimal string,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise not of its argument.,
        ["name"] = bit.bnot,
        ["error"] = ,
        ["brief"] = bitwise not,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bnot</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>            <span class="c1">--&gt; -1</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bnot</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>           <span class="c1">--&gt; 0xffffffff</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bnot</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>           <span class="c1">--&gt; 0</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bnot</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">))</span>   <span class="c1">--&gt; 0</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bnot</span><span class="p">(</span><span class="mh">0x12345678</span><span class="p">))</span>  <span class="c1">--&gt; 0xedcba987</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise not of number x,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x1,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [x2...],
            ["doc"] = number(s),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise or of all of its arguments. Note that more than two arguments are allowed.,
        ["name"] = bit.bor,
        ["error"] = ,
        ["brief"] = bitwise or,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>                <span class="c1">--&gt; 15</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise or of the provided arguments,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x1,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [x2...],
            ["doc"] = number(s),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise and of all of its arguments. Note that more than two arguments are allowed.,
        ["name"] = bit.band,
        ["error"] = ,
        ["brief"] = bitwise and,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">band</span><span class="p">(</span><span class="mh">0x12345678</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">))</span>        <span class="c1">--&gt; 0x00000078</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise and of the provided arguments,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x1,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [x2...],
            ["doc"] = number(s),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise xor of all of its arguments. Note that more than two arguments are allowed.,
        ["name"] = bit.bxor,
        ["error"] = ,
        ["brief"] = bitwise xor,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bxor</span><span class="p">(</span><span class="mh">0xa5a5f0f0</span><span class="p">,</span> <span class="mh">0xaa55ff00</span><span class="p">))</span>  <span class="c1">--&gt; 0x0ff00ff0</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise xor of the provided arguments,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = number of bits,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise logical left-shift of its first argument by the number of bits given by the second argument.
Logical shifts treat the first argument as an unsigned number and shift in 0-bits.
Only the lower 5 bits of the shift count are used (reduces to the range [0..31]).,
        ["name"] = bit.lshift,
        ["error"] = ,
        ["brief"] = bitwise logical left-shift,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">lshift</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>              <span class="c1">--&gt; 1</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">lshift</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>              <span class="c1">--&gt; 256</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">lshift</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">))</span>             <span class="c1">--&gt; 256</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">lshift</span><span class="p">(</span><span class="mh">0x87654321</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>   <span class="c1">--&gt; 0x54321000</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise logical left-shifted number,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = number of bits,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise logical right-shift of its first argument by the number of bits given by the second argument.
Logical shifts treat the first argument as an unsigned number and shift in 0-bits.
Only the lower 5 bits of the shift count are used (reduces to the range [0..31]).,
        ["name"] = bit.rshift,
        ["error"] = ,
        ["brief"] = bitwise logical right-shift,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">rshift</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>            <span class="c1">--&gt; 1</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">rshift</span><span class="p">(</span><span class="o">-</span><span class="mi">256</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>           <span class="c1">--&gt; 16777215</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">rshift</span><span class="p">(</span><span class="mh">0x87654321</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>   <span class="c1">--&gt; 0x00087654</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise logical right-shifted number,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = number of bits,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise arithmetic right-shift of its first argument by the number of bits given by the second argument.
Arithmetic right-shift treats the most-significant bit as a sign bit and replicates it.
Only the lower 5 bits of the shift count are used (reduces to the range [0..31]).,
        ["name"] = bit.arshift,
        ["error"] = ,
        ["brief"] = bitwise arithmetic right-shift,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">arshift</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>           <span class="c1">--&gt; 1</span>
<span class="nb">print</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">arshift</span><span class="p">(</span><span class="o">-</span><span class="mi">256</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>          <span class="c1">--&gt; -1</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">arshift</span><span class="p">(</span><span class="mh">0x87654321</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>  <span class="c1">--&gt; 0xfff87654</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise arithmetic right-shifted number,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = number of bits,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise left rotation of its first argument by the number of bits given by the second argument. Bits shifted out on one side are shifted back in on the other side.
Only the lower 5 bits of the rotate count are used (reduces to the range [0..31]).,
        ["name"] = bit.rol,
        ["error"] = ,
        ["brief"] = bitwise left rotation,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">rol</span><span class="p">(</span><span class="mh">0x12345678</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>   <span class="c1">--&gt; 0x45678123</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise left-rotated number,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = number of bits,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the bitwise right rotation of its first argument by the number of bits given by the second argument. Bits shifted out on one side are shifted back in on the other side.
Only the lower 5 bits of the rotate count are used (reduces to the range [0..31]).,
        ["name"] = bit.ror,
        ["error"] = ,
        ["brief"] = bitwise right rotation,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">ror</span><span class="p">(</span><span class="mh">0x12345678</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>   <span class="c1">--&gt; 0x67812345</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise right-rotated number,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = number,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Swaps the bytes of its argument and returns it. This can be used to convert little-endian 32 bit numbers to big-endian 32 bit numbers or vice versa.,
        ["name"] = bit.bswap,
        ["error"] = ,
        ["brief"] = bitwise swap,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bswap</span><span class="p">(</span><span class="mh">0x12345678</span><span class="p">))</span> <span class="c1">--&gt; 0x78563412</span>
<span class="n">printx</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">bswap</span><span class="p">(</span><span class="mh">0x78563412</span><span class="p">))</span> <span class="c1">--&gt; 0x12345678</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bitwise swapped number,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = LUA STANDARD LIBS,
      ["description"] = <a href="http://bitop.luajit.org/api.html">Lua BitOp</a> is a C extension module for Lua 5.1/5.2 which adds bitwise operations on numbers.
Lua BitOp is Copyright &copy; 2008-2012 Mike Pall.
Lua BitOp is free software, released under the MIT license (same license as the Lua core).
Lua BitOp is compatible with the built-in bitwise operations in LuaJIT 2.0 and is used
on platforms where Defold runs without LuaJIT.
For clarity the examples assume the definition of a helper function <code>printx()</code>.
This prints its argument as an unsigned 32 bit hexadecimal number on all platforms:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">printx</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;0x&quot;</span><span class="o">..</span><span class="n">bit</span><span class="p">.</span><span class="n">tohex</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="kr">end</span>
</code></pre></div>,
      ["name"] = BitOp,
      ["notes"] = {},
      ["namespace"] = bit,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Bitwise operations API documentation,
    },
  },
  [4] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Unsigned integer, 1 byte,
        ["name"] = buffer.VALUE_TYPE_UINT8,
        ["error"] = ,
        ["brief"] = uint8,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Unsigned integer, 2 bytes,
        ["name"] = buffer.VALUE_TYPE_UINT16,
        ["error"] = ,
        ["brief"] = uint16,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Unsigned integer, 4 bytes,
        ["name"] = buffer.VALUE_TYPE_UINT32,
        ["error"] = ,
        ["brief"] = uint32,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Unsigned integer, 8 bytes,
        ["name"] = buffer.VALUE_TYPE_UINT64,
        ["error"] = ,
        ["brief"] = uint64,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Signed integer, 1 byte,
        ["name"] = buffer.VALUE_TYPE_INT8,
        ["error"] = ,
        ["brief"] = int8,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Signed integer, 2 bytes,
        ["name"] = buffer.VALUE_TYPE_INT16,
        ["error"] = ,
        ["brief"] = int16,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Signed integer, 4 bytes,
        ["name"] = buffer.VALUE_TYPE_INT32,
        ["error"] = ,
        ["brief"] = int32,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Signed integer, 8 bytes,
        ["name"] = buffer.VALUE_TYPE_INT64,
        ["error"] = ,
        ["brief"] = int64,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Float, single precision, 4 bytes,
        ["name"] = buffer.VALUE_TYPE_FLOAT32,
        ["error"] = ,
        ["brief"] = float32,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = element_count,
            ["doc"] = The number of elements the buffer should hold,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = declaration,
            ["doc"] = A table where each entry (table) describes a stream
<ul>
<li><span class="type">hash | string</span> <code>name</code>: The name of the stream</li>
<li><span class="type">constant</span> <code>type</code>: The data type of the stream</li>
<li><span class="type">number</span> <code>count</code>: The number of values each element should hold</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Create a new data buffer containing a specified set of streams. A data buffer
can contain one or more streams with typed data. This is useful for managing
compound data, for instance a vertex buffer could contain separate streams for
vertex position, color, normal etc.,
        ["name"] = buffer.create,
        ["error"] = ,
        ["brief"] = creates a new buffer,
        ["type"] = FUNCTION,
        ["examples"] = How to create and initialize a buffer
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">128</span>
  <span class="n">self</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">create</span><span class="p">(</span> <span class="n">size</span> <span class="o">*</span> <span class="n">size</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;rgb&quot;</span><span class="p">),</span> <span class="nb">type</span><span class="o">=</span><span class="n">buffer</span><span class="p">.</span><span class="n">VALUE_TYPE_UINT8</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">3</span> <span class="p">}</span> <span class="p">})</span>
  <span class="n">self</span><span class="p">.</span><span class="n">imagestream</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">image</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;rgb&quot;</span><span class="p">))</span>

  <span class="kr">for</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span> <span class="kr">do</span>
     <span class="kr">for</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">width</span><span class="o">-</span><span class="mi">1</span> <span class="kr">do</span>
         <span class="kd">local</span> <span class="n">index</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span>
         <span class="n">self</span><span class="p">.</span><span class="n">imagestream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">r</span>
         <span class="n">self</span><span class="p">.</span><span class="n">imagestream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">g</span>
         <span class="n">self</span><span class="p">.</span><span class="n">imagestream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">b</span>
     <span class="kr">end</span>
  <span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = the new buffer,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = the buffer to get the stream from,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = stream_name,
            ["doc"] = the stream name,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a specified stream from a buffer.,
        ["name"] = buffer.get_stream,
        ["error"] = ,
        ["brief"] = gets a stream from a buffer,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bufferstream,
            },
            ["name"] = stream,
            ["doc"] = the data stream,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = bufferstream,
            },
            ["name"] = dst,
            ["doc"] = the destination stream,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = dstoffset,
            ["doc"] = the offset to start copying data to (measured in value type),
          },
          [3] = {
            ["types"] = {
              [1] = bufferstream,
            },
            ["name"] = src,
            ["doc"] = the source data stream,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = srcoffset,
            ["doc"] = the offset to start copying data from (measured in value type),
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = count,
            ["doc"] = the number of values to copy (measured in value type),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Copy a specified amount of data from one stream to another.
<span class="icon-attention"></span> The value type and size must match between source and destination streams.
The source and destination streams can be the same.,
        ["name"] = buffer.copy_stream,
        ["error"] = ,
        ["brief"] = copies data from one stream to another,
        ["type"] = FUNCTION,
        ["examples"] = How to update a texture of a sprite:
<div class="codehilite"><pre><span></span><code><span class="c1">-- copy entire stream</span>
<span class="kd">local</span> <span class="n">srcstream</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">srcbuffer</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;xyz&quot;</span><span class="p">))</span>
<span class="kd">local</span> <span class="n">dststream</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">dstbuffer</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;xyz&quot;</span><span class="p">))</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">copy_stream</span><span class="p">(</span><span class="n">dststream</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">srcstream</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">#</span><span class="n">srcstream</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = dst,
            ["doc"] = the destination buffer,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = dstoffset,
            ["doc"] = the offset to start copying data to,
          },
          [3] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = src,
            ["doc"] = the source data buffer,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = srcoffset,
            ["doc"] = the offset to start copying data from,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = count,
            ["doc"] = the number of elements to copy,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Copy all data streams from one buffer to another, element wise.
<span class="icon-attention"></span> Each of the source streams must have a matching stream in the
destination buffer. The streams must match in both type and size.
The source and destination buffer can be the same.,
        ["name"] = buffer.copy_buffer,
        ["error"] = ,
        ["brief"] = copies one buffer to another,
        ["type"] = FUNCTION,
        ["examples"] = How to copy elements (e.g. vertices) from one buffer to another
<div class="codehilite"><pre><span></span><code><span class="c1">-- copy entire buffer</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">copy_buffer</span><span class="p">(</span><span class="n">dstbuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">srcbuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">#</span><span class="n">srcbuffer</span><span class="p">)</span>

<span class="c1">-- copy last 10 elements to the front of another buffer</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">copy_buffer</span><span class="p">(</span><span class="n">dstbuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">srcbuffer</span><span class="p">,</span> <span class="o">#</span><span class="n">srcbuffer</span> <span class="o">-</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = the source buffer,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = stream_name,
            ["doc"] = the name of the stream,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a copy of all the bytes from a specified stream as a Lua string.,
        ["name"] = buffer.get_bytes,
        ["error"] = ,
        ["brief"] = gets data from a stream,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = data,
            ["doc"] = the buffer data as a Lua string,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buf,
            ["doc"] = the buffer to set the metadata on,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = metadata_name,
            ["doc"] = name of the metadata entry,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = values,
            ["doc"] = actual metadata, an array of numeric values,
          },
          [4] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = value_type,
            ["doc"] = type of values when stored,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates or updates a metadata array entry on a buffer.
<span class="icon-attention"></span> The value type and count given when updating the entry should match those used when first creating it.,
        ["name"] = buffer.set_metadata,
        ["error"] = ,
        ["brief"] = set a metadata entry on a buffer,
        ["type"] = FUNCTION,
        ["examples"] = How to set a metadata entry on a buffer
<div class="codehilite"><pre><span></span><code><span class="c1">-- create a new metadata entry with three floats</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">set_metadata</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;somefloats&quot;</span><span class="p">),</span> <span class="p">{</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">3.2</span><span class="p">,</span> <span class="mf">7.9</span><span class="p">},</span> <span class="n">buffer</span><span class="p">.</span><span class="n">VALUE_TYPE_FLOAT32</span><span class="p">)</span>
<span class="c1">-- ...</span>
<span class="c1">-- update to a new set of values</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">set_metadata</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;somefloats&quot;</span><span class="p">),</span> <span class="p">{</span><span class="o">-</span><span class="mf">2.5</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">,</span> <span class="mf">32.2</span><span class="p">},</span> <span class="n">buffer</span><span class="p">.</span><span class="n">VALUE_TYPE_FLOAT32</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buf,
            ["doc"] = the buffer to get the metadata from,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = metadata_name,
            ["doc"] = name of the metadata entry,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a named metadata entry from a buffer along with its type.,
        ["name"] = buffer.get_metadata,
        ["error"] = ,
        ["brief"] = retrieve a metadata entry from a buffer,
        ["type"] = FUNCTION,
        ["examples"] = How to get a metadata entry from a buffer
<div class="codehilite"><pre><span></span><code><span class="c1">-- retrieve a metadata entry named &quot;somefloats&quot; and its nomeric type</span>
<span class="kd">local</span> <span class="n">values</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_metadata</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;somefloats&quot;</span><span class="p">))</span>
<span class="kr">if</span> <span class="n">metadata</span> <span class="kr">then</span> <span class="nb">print</span><span class="p">(</span><span class="o">#</span><span class="n">metadata</span><span class="o">..</span><span class="s2">&quot; values in &#39;somefloats&#39;&quot;</span><span class="p">)</span> <span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = values,
            ["doc"] = table of metadata values or <code>nil</code> if the entry does not exist,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
              [2] = nil,
            },
            ["name"] = value_type,
            ["doc"] = numeric type of values or <code>nil</code>,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Functions for manipulating buffers and streams,
      ["name"] = Buffer,
      ["notes"] = {},
      ["namespace"] = buffer,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Buffer API documentation,
    },
  },
  [5] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = v,
            ["doc"] = value to print,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Pretty printing of Lua values. This function prints Lua values
in a manner similar to +print()+, but will also recurse into tables
and pretty print them. There is a limit to how deep the function
will recurse.,
        ["name"] = pprint,
        ["error"] = ,
        ["brief"] = pretty printing,
        ["type"] = FUNCTION,
        ["examples"] = Pretty printing a Lua table with a nested table:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">t2</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="p">}</span>
<span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="p">{</span> <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="mi">1234</span><span class="p">,</span> <span class="n">key3</span> <span class="o">=</span> <span class="n">t2</span> <span class="p">}</span>
<span class="n">pprint</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</code></pre></div>

Resulting in the following output (note that the key order in non array
Lua tables is undefined):
<div class="codehilite"><pre><span></span><code>{
  key3 = {
    1 = 1,
    2 = 2,
    3 = 3,
    4 = 4,
  }
  key2 = 1234,
  key = value,
}
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = s,
            ["doc"] = string to hash,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = All ids in the engine are represented as hashes, so a string needs to be hashed
before it can be compared with an id.,
        ["name"] = hash,
        ["error"] = ,
        ["brief"] = hashes a string,
        ["type"] = FUNCTION,
        ["examples"] = To compare a message_id in an on-message callback function:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_message&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- Act on the message here</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = hash,
            ["doc"] = a hashed string,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = h,
            ["doc"] = hash value to get hex string for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns a hexadecimal representation of a hash value.
The returned string is always padded with leading zeros.,
        ["name"] = hash_to_hex,
        ["error"] = ,
        ["brief"] = get hex representation of a hash value as a string,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_hash&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">hexstr</span> <span class="o">=</span> <span class="n">hash_to_hex</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">hexstr</span><span class="p">)</span> <span class="c1">--&gt; a2bc06d97f580aab</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = hex,
            ["doc"] = hex representation of the hash,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Built-in scripting functions.,
      ["name"] = Built-ins,
      ["notes"] = {},
      ["namespace"] = builtins,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Built-ins API documentation,
    },
  },
  [6] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = aspect_ratio,
            ["doc"] = aspect ratio of the screen (width divided by height),
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = fov,
            ["doc"] = field of view of the lens, measured as the angle in radians between the right and left edge,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = near_z,
            ["doc"] = position of the near clipping plane (distance from camera along relative z),
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = far_z,
            ["doc"] = position of the far clipping plane (distance from camera along relative z),
          },
          [5] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = orthographic_projection,
            ["doc"] = set to use an orthographic projection,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = orthographic_zoom,
            ["doc"] = zoom level when the camera is using an orthographic projection,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = 
Post this message to a camera-component to set its properties at run-time.
,
        ["name"] = set_camera,
        ["error"] = ,
        ["brief"] = sets camera properties,
        ["type"] = MESSAGE,
        ["examples"] = In the examples, it is assumed that the instance of the script has a camera-component with id "camera".
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;set_camera&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">aspect_ratio</span> <span class="o">=</span> <span class="mi">16</span><span class="o">/</span><span class="mi">9</span><span class="p">,</span> <span class="n">fov</span> <span class="o">=</span> <span class="nb">math.pi</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">near_z</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">far_z</span> <span class="o">=</span> <span class="mi">500</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Vertical field of view of the camera.
The type of the property is float.,
        ["name"] = fov,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera fov,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">fov</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;fov&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;fov&quot;</span><span class="p">,</span> <span class="n">fov</span> <span class="o">+</span> <span class="mf">0.1</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;fov&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_ONCE_PINGPONG</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_LINEAR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Camera frustum near plane.
The type of the property is float.,
        ["name"] = near_z,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera near_z,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">near_z</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;near_z&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;near_z&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Camera frustum far plane.
The type of the property is float.,
        ["name"] = far_z,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera far_z,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">far_z</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;far_z&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;far_z&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Zoom level when using an orthographic projection.
The type of the property is float.,
        ["name"] = orthographic_zoom,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera orthographic_zoom,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">orthographic_zoom</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;orthographic_zoom&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;orthographic_zoom&quot;</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;orthographic_zoom&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_ONCE_PINGPONG</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INOUTQUAD</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="mark">READ ONLY</span> The calculated projection matrix of the camera.
The type of the property is matrix4.,
        ["name"] = projection,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera projection,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">projection</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;projection&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="mark">READ ONLY</span> The calculated view matrix of the camera.
The type of the property is matrix4.,
        ["name"] = view,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera view,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">view</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;view&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The ratio between the frustum width and height. Used when calculating the
projection of a perspective camera.
The type of the property is number.,
        ["name"] = aspect_ratio,
        ["error"] = ,
        ["brief"] = <span class="type">float</span> camera aspect ratio,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">aspect_ratio</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;aspect_ratio&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#camera&quot;</span><span class="p">,</span> <span class="s2">&quot;aspect_ratio&quot;</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function returns a table with all the camera URLs that have been
registered in the render context.,
        ["name"] = camera.get_cameras,
        ["error"] = ,
        ["brief"] = get all camera URLs,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="kr">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">camera</span><span class="p">.</span><span class="n">get_cameras</span><span class="p">())</span> <span class="kr">do</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_camera</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(...)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_camera</span><span class="p">()</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = cameras,
            ["doc"] = a table with all camera URLs,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get projection matrix,
        ["name"] = camera.get_projection,
        ["error"] = ,
        ["brief"] = get projection matrix,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.matrix4,
            },
            ["name"] = projection,
            ["doc"] = the projection matrix.,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get view matrix,
        ["name"] = camera.get_view,
        ["error"] = ,
        ["brief"] = get view matrix,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vmath.matrix4,
            },
            ["name"] = view,
            ["doc"] = the view matrix.,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get aspect ratio,
        ["name"] = camera.get_aspect_ratio,
        ["error"] = ,
        ["brief"] = get aspect ratio,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = aspect_ratio,
            ["doc"] = the aspect ratio.,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get far z,
        ["name"] = camera.get_far_z,
        ["error"] = ,
        ["brief"] = get far z,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = far_z,
            ["doc"] = the far z.,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get field of view,
        ["name"] = camera.get_fov,
        ["error"] = ,
        ["brief"] = get field of view,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = fov,
            ["doc"] = the field of view.,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get near z,
        ["name"] = camera.get_near_z,
        ["error"] = ,
        ["brief"] = get near z,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = near_z,
            ["doc"] = the near z.,
          },
        },
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = get orthographic zoom,
        ["name"] = camera.get_orthographic_zoom,
        ["error"] = ,
        ["brief"] = get orthographic zoom,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = orthographic_zoom,
            ["doc"] = true if the camera is using an orthographic projection.,
          },
        },
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = aspect_ratio,
            ["doc"] = the aspect ratio.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = set aspect ratio,
        ["name"] = camera.set_aspect_ratio,
        ["error"] = ,
        ["brief"] = set aspect ratio,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = far_z,
            ["doc"] = the far z.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = set far z,
        ["name"] = camera.set_far_z,
        ["error"] = ,
        ["brief"] = set far z,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = fov,
            ["doc"] = the field of view.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = set field of view,
        ["name"] = camera.set_fov,
        ["error"] = ,
        ["brief"] = set field of view,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = near_z,
            ["doc"] = the near z.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = set near z,
        ["name"] = camera.set_near_z,
        ["error"] = ,
        ["brief"] = set near z,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = orthographic_zoom,
            ["doc"] = true if the camera is using an orthographic projection.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = set orthographic zoom,
        ["name"] = camera.set_orthographic_zoom,
        ["error"] = ,
        ["brief"] = set orthographic zoom,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Camera functions, messages and constants.,
      ["name"] = Camera,
      ["notes"] = {},
      ["namespace"] = camera,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Camera API documentation,
    },
  },
  [7] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the collection factory component to get status from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This returns status of the collection factory.
Calling this function when the factory is not marked as dynamic loading always returns COMP_COLLECTION_FACTORY_STATUS_LOADED.,
        ["name"] = collectionfactory.get_status,
        ["error"] = ,
        ["brief"] = Get collection factory status,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = status,
            ["doc"] = status of the collection factory component
<ul>
<li><code>collectionfactory.STATUS_UNLOADED</code></li>
<li><code>collectionfactory.STATUS_LOADING</code></li>
<li><code>collectionfactory.STATUS_LOADED</code></li>
</ul>,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = unloaded,
        ["name"] = collectionfactory.STATUS_UNLOADED,
        ["error"] = ,
        ["brief"] = unloaded,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loading,
        ["name"] = collectionfactory.STATUS_LOADING,
        ["error"] = ,
        ["brief"] = loading,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loaded,
        ["name"] = collectionfactory.STATUS_LOADED,
        ["error"] = ,
        ["brief"] = loaded,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the collection factory component to unload,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This decreases the reference count for each resource loaded with collectionfactory.load. If reference is zero, the resource is destroyed.
Calling this function when the factory is not marked as dynamic loading does nothing.,
        ["name"] = collectionfactory.unload,
        ["error"] = ,
        ["brief"] = Unload resources previously loaded using collectionfactory.load,
        ["type"] = FUNCTION,
        ["examples"] = How to unload resources of a collection factory prototype loaded with collectionfactory.load
<div class="codehilite"><pre><span></span><code><span class="n">collectionfactory</span><span class="p">.</span><span class="n">unload</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the collection factory component to load,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, url, result),
            },
            ["name"] = [complete_function],
            ["doc"] = function to call when resources are loaded.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>url</code></dt>
<dd><span class="type">url</span> url of the collection factory component</dd>
<dt><code>result</code></dt>
<dd><span class="type">boolean</span> True if resource were loaded successfully</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resources loaded are referenced by the collection factory component until the existing (parent) collection is destroyed or collectionfactory.unload is called.
Calling this function when the factory is not marked as dynamic loading does nothing.,
        ["name"] = collectionfactory.load,
        ["error"] = ,
        ["brief"] = Load resources of a collection factory prototype.,
        ["type"] = FUNCTION,
        ["examples"] = How to load resources of a collection factory prototype.
<div class="codehilite"><pre><span></span><code><span class="n">collectionfactory</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collection factory component to be used,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = [position],
            ["doc"] = position to assign to the newly spawned collection,
          },
          [3] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = [rotation],
            ["doc"] = rotation to assign to the newly spawned collection,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [properties],
            ["doc"] = table of script properties to propagate to any new game object instances,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [scale],
            ["doc"] = uniform scaling to apply to the newly spawned collection (must be greater than 0).,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The URL identifies the collectionfactory component that should do the spawning.
Spawning is instant, but spawned game objects get their first update calls the following frame. The supplied parameters for position, rotation and scale
will be applied to the whole collection when spawned.
Script properties in the created game objects can be overridden through
a properties-parameter table. The table should contain game object ids
(hash) as keys and property tables as values to be used when initiating each
spawned game object.
See go.property for more information on script properties.
The function returns a table that contains a key for each game object
id (hash), as addressed if the collection file was top level, and the
corresponding spawned instance id (hash) as value with a unique path
prefix added to each instance.
<span class="icon-attention"></span> Calling <a href="/ref/collectionfactory#collectionfactory.create">collectionfactory.create</a> create on a collection factory that is marked as dynamic without having loaded resources
using <a href="/ref/collectionfactory#collectionfactory.load">collectionfactory.load</a> will synchronously load and create resources which may affect application performance.,
        ["name"] = collectionfactory.create,
        ["error"] = ,
        ["brief"] = Spawn a new instance of a collection into the existing collection.,
        ["type"] = FUNCTION,
        ["examples"] = How to spawn a collection of game objects:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Spawn a small group of enemies.</span>
  <span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mf">12.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">scale</span> <span class="o">=</span> <span class="mf">0.5</span>
  <span class="kd">local</span> <span class="n">props</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="n">props</span><span class="p">[</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/enemy_leader&quot;</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">health</span> <span class="o">=</span> <span class="mf">1000.0</span> <span class="p">}</span>
  <span class="n">props</span><span class="p">[</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/enemy_1&quot;</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">health</span> <span class="o">=</span> <span class="mf">200.0</span> <span class="p">}</span>
  <span class="n">props</span><span class="p">[</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/enemy_2&quot;</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">health</span> <span class="o">=</span> <span class="mf">400.0</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;green&quot;</span><span class="p">)</span> <span class="p">}</span>

  <span class="kd">local</span> <span class="n">self</span><span class="p">.</span><span class="n">enemy_ids</span> <span class="o">=</span> <span class="n">collectionfactory</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="s2">&quot;#enemyfactory&quot;</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">rot</span><span class="p">,</span> <span class="n">props</span><span class="p">,</span> <span class="n">scale</span><span class="p">)</span>
  <span class="c1">-- enemy_ids now map to the spawned instance ids:</span>
  <span class="c1">--</span>
  <span class="c1">-- pprint(self.enemy_ids)</span>
  <span class="c1">--</span>
  <span class="c1">-- DEBUG:SCRIPT:</span>
  <span class="c1">-- {</span>
  <span class="c1">--   hash: [/enemy_leader] = hash: [/collection0/enemy_leader],</span>
  <span class="c1">--   hash: [/enemy_1] = hash: [/collection0/enemy_1],</span>
  <span class="c1">--   hash: [/enemy_2] = hash: [/collection0/enemy_2]</span>
  <span class="c1">-- }</span>

  <span class="c1">-- Send &quot;attack&quot; message to the leader. First look up its instance id.</span>
  <span class="kd">local</span> <span class="n">leader_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">enemy_ids</span><span class="p">[</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/enemy_leader&quot;</span><span class="p">)]</span>
  <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">leader_id</span><span class="p">,</span> <span class="s2">&quot;attack&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

How to delete a spawned collection:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">enemy_ids</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = ids,
            ["doc"] = a table mapping the id:s from the collection to the new instance id:s,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the collection factory component,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = [prototype],
            ["doc"] = the path to the new prototype, or <code>nil</code>,
          },
        },
        ["notes"] = {
          [1] = - Requires the factory to have the "Dynamic Prototype" set
  - Cannot be set when the state is COMP_FACTORY_STATUS_LOADING
  - Setting the prototype to "nil" will revert back to the original prototype.,
        },
        ["tparams"] = {},
        ["description"] = Changes the prototype for the collection factory.
Setting the prototype to "nil" will revert back to the original prototype.,
        ["name"] = collectionfactory.set_prototype,
        ["error"] = ,
        ["brief"] = changes the prototype for the collection factory,
        ["type"] = FUNCTION,
        ["examples"] = How to unload the previous prototypes resources, and then spawn a new collection
<div class="codehilite"><pre><span></span><code><span class="n">collectionfactory</span><span class="p">.</span><span class="n">unload</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">)</span> <span class="c1">-- unload the previous resources</span>
<span class="n">collectionfactory</span><span class="p">.</span><span class="n">set_prototype</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="s2">&quot;/main/levels/level1.collectionc&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">collectionfactory</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">(),</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">())</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Functions for controlling collection factory components which are
used to dynamically spawn collections into the runtime.,
      ["name"] = Collection factory,
      ["notes"] = {},
      ["namespace"] = collectionfactory,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Collection factory API documentation,
    },
  },
  [8] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = factor,
            ["doc"] = time-step scaling factor,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = mode,
            ["doc"] = time-step mode: 0 for continuous and 1 for discrete,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to modify the time-step used when updating the collection controlled by the proxy.
The time-step is modified by a scaling <code>factor</code> and can be incremented either continuously or in discrete steps.
The continuous mode can be used for slow-motion or fast-forward effects.
The discrete mode is only useful when scaling the time-step to pass slower than real time (<code>factor</code> is below 1).
The time-step will then be set to 0 for as many frames as the scaling demands and then take on the full real-time-step for one frame,
to simulate pulses. E.g. if <code>factor</code> is set to <code>0.1</code> the time-step would be 0 for 9 frames, then be 1/60 for one
frame, 0 for 9 frames, and so on. The result in practice is that the game looks like it's updated at a much lower frequency than 60 Hz,
which can be useful for debugging when each frame needs to be inspected.,
        ["name"] = set_time_step,
        ["error"] = ,
        ["brief"] = sets the time-step for update,
        ["type"] = MESSAGE,
        ["examples"] = The examples assumes the script belongs to an instance with a collection-proxy-component with id "proxy".
Update the collection twice as fast:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;set_time_step&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">factor</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">})</span>
</code></pre></div>

Update the collection twice as slow:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;set_time_step&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">factor</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">})</span>
</code></pre></div>

Simulate 1 FPS for the collection:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;set_time_step&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">60</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">1</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to start the loading of the referenced collection.
When the loading has completed, the message <a href="#proxy_loaded">proxy_loaded</a> will be sent back to the script.
A loaded collection must be initialized (message <a href="#init">init</a>) and enabled (message <a href="#enable">enable</a>) in order to be simulated and drawn.,
        ["name"] = load,
        ["error"] = ,
        ["brief"] = tells a collection proxy to start loading the referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assume the script belongs to an instance with collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;start_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- some script tells us to start loading the level</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;load&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">loader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_loaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- enable the collection and let the loader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="s2">&quot;enable&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">loader</span><span class="p">,</span> <span class="n">message_id</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to start background loading of the referenced collection.
When the loading has completed, the message <a href="#proxy_loaded">proxy_loaded</a> will be sent back to the script.
A loaded collection must be initialized (message <a href="#init">init</a>) and enabled (message <a href="#enable">enable</a>) in order to be simulated and drawn.,
        ["name"] = async_load,
        ["error"] = ,
        ["brief"] = tells a collection proxy to start asynchronous loading of the referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assume the script belongs to an instance with collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;start_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- some script tells us to start loading the level</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;async_load&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">loader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_loaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- enable the collection and let the loader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="s2">&quot;enable&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">loader</span><span class="p">,</span> <span class="n">message_id</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent back to the script that initiated a collection proxy load when the referenced
collection is loaded. See documentation for <a href="#load">load</a> for examples how to use.,
        ["name"] = proxy_loaded,
        ["error"] = ,
        ["brief"] = reports that a collection proxy has loaded its referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to initialize the game objects and components in the referenced collection.
Sending <a href="#enable">enable</a> to an uninitialized collection proxy automatically initializes it.
The <a href="#init">init</a> message simply provides a higher level of control.,
        ["name"] = init,
        ["error"] = ,
        ["brief"] = tells a collection proxy to initialize the loaded collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assume the script belongs to an instance with collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;load_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- some script tells us to start loading the level</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;load&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">loader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_loaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- only initialize the proxy at this point since we want to enable it at a later time for some reason</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="s2">&quot;init&quot;</span><span class="p">)</span>
        <span class="c1">-- let loader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">loader</span><span class="p">,</span> <span class="n">message_id</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to enable the referenced collection, which in turn enables the contained game objects and components.
If the referenced collection was not initialized prior to this call, it will automatically be initialized.,
        ["name"] = enable,
        ["error"] = ,
        ["brief"] = tells a collection proxy to enable the referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assume the script belongs to an instance with collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;start_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- some script tells us to start loading the level</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">,</span> <span class="s2">&quot;load&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">loader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_loaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- enable the collection and let the loader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="s2">&quot;enable&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">loader</span><span class="p">,</span> <span class="s2">&quot;level_started&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to disable the referenced collection, which in turn disables the contained game objects and components.,
        ["name"] = disable,
        ["error"] = ,
        ["brief"] = tells a collection proxy to disable the referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assumes the script belongs to an instance with a collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;end_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;disable&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;final&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;unload&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">unloader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_unloaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- let unloader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">unloader</span><span class="p">,</span> <span class="s2">&quot;level_ended&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to finalize the referenced collection, which in turn finalizes the contained game objects and components.,
        ["name"] = final,
        ["error"] = ,
        ["brief"] = tells a collection proxy to finalize the referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assumes the script belongs to an instance with a collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;end_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;disable&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;final&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;unload&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">unloader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_unloaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- let unloader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">unloader</span><span class="p">,</span> <span class="s2">&quot;level_ended&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collection-proxy-component to start the unloading of the referenced collection.
When the unloading has completed, the message <a href="#proxy_unloaded">proxy_unloaded</a> will be sent back to the script.,
        ["name"] = unload,
        ["error"] = ,
        ["brief"] = tells a collection proxy to start unloading the referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = In this example we use a collection proxy to load/unload a level (collection).
The example assumes the script belongs to an instance with a collection-proxy-component with id "proxy".
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;end_level&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;#proxy&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;disable&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;final&quot;</span><span class="p">)</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;unload&quot;</span><span class="p">)</span>
        <span class="c1">-- store sender for later notification</span>
        <span class="n">self</span><span class="p">.</span><span class="n">unloader</span> <span class="o">=</span> <span class="n">sender</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;proxy_unloaded&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- let unloader know</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">unloader</span><span class="p">,</span> <span class="s2">&quot;level_ended&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent back to the script that initiated an unload with a collection proxy when
the referenced collection is unloaded. See documentation for <a href="#unload">unload</a> for examples how to use.,
        ["name"] = proxy_unloaded,
        ["error"] = ,
        ["brief"] = reports that a collection proxy has unloaded its referenced collection,
        ["type"] = MESSAGE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
            },
            ["name"] = collectionproxy,
            ["doc"] = the collectionproxy to check for resources.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = return an indexed table of resources for a collection proxy where the
referenced collection has been excluded using LiveUpdate. Each entry is a
hexadecimal string that represents the data of the specific resource.
This representation corresponds with the filename for each individual
resource that is exported when you bundle an application with LiveUpdate
functionality.,
        ["name"] = collectionproxy.get_resources,
        ["error"] = ,
        ["brief"] = return an indexed table of all the resources of a collection proxy,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">print_resources</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cproxy</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">resources</span> <span class="o">=</span> <span class="n">collectionproxy</span><span class="p">.</span><span class="n">get_resources</span><span class="p">(</span><span class="n">cproxy</span><span class="p">)</span>
    <span class="kr">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span> <span class="kr">do</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Resource: &quot;</span> <span class="o">..</span> <span class="n">v</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = resources,
            ["doc"] = the resources, or an empty list if the
collection was not excluded.,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
            },
            ["name"] = collectionproxy,
            ["doc"] = the collectionproxy to check for missing
resources.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = return an array of missing resources for a collection proxy. Each
entry is a hexadecimal string that represents the data of the specific
resource. This representation corresponds with the filename for each
individual resource that is exported when you bundle an application with
LiveUpdate functionality. It should be considered good practise to always
check whether or not there are any missing resources in a collection proxy
before attempting to load the collection proxy.,
        ["name"] = collectionproxy.missing_resources,
        ["error"] = ,
        ["brief"] = return an array of missing resources for a collection proxy,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">expected</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">resources</span><span class="p">[</span><span class="n">id</span><span class="p">]</span>
    <span class="kr">if</span> <span class="n">response</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="ow">and</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Successfully downloaded resource: &quot;</span> <span class="o">..</span> <span class="n">expected</span><span class="p">)</span>
        <span class="n">resource</span><span class="p">.</span><span class="n">store_resource</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>
    <span class="kr">else</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Failed to download resource: &quot;</span> <span class="o">..</span> <span class="n">expected</span><span class="p">)</span>
        <span class="c1">-- error handling</span>
    <span class="kr">end</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">download_resources</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cproxy</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">resources</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kd">local</span> <span class="n">resources</span> <span class="o">=</span> <span class="n">collectionproxy</span><span class="p">.</span><span class="n">missing_resources</span><span class="p">(</span><span class="n">cproxy</span><span class="p">)</span>
    <span class="kr">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span> <span class="kr">do</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Downloading resource: &quot;</span> <span class="o">..</span> <span class="n">v</span><span class="p">)</span>

        <span class="kd">local</span> <span class="n">uri</span> <span class="o">=</span> <span class="s2">&quot;http://example.defold.com/&quot;</span> <span class="o">..</span> <span class="n">v</span>
        <span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">resources</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = resources,
            ["doc"] = the missing resources,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Messages for controlling and interacting with collection proxies
which are used to dynamically load collections into the runtime.,
      ["name"] = Collection proxy,
      ["notes"] = {},
      ["namespace"] = collectionproxy,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Collection proxy API documentation,
    },
  },
  [9] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Performs the same steps as if a crash had just occured but
allows the program to continue.
The generated dump can be read by crash.load_previous,
        ["name"] = crash.write_dump,
        ["error"] = ,
        ["brief"] = writes crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = file path to use,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Crashes occuring before the path is set will be stored to a default engine location.,
        ["name"] = crash.set_file_path,
        ["error"] = ,
        ["brief"] = sets the file location for crash dumps,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The crash dump will be removed from disk upon a successful
load, so loading is one-shot.,
        ["name"] = crash.load_previous,
        ["error"] = ,
        ["brief"] = loads a previously written crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = handle,
            ["doc"] = handle to the loaded dump, or <code>nil</code> if no dump was found,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = handle to loaded crash dump,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = releases a previously loaded crash dump,
        ["name"] = crash.release,
        ["error"] = ,
        ["brief"] = releases a previously loaded crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = index,
            ["doc"] = slot index. 0-indexed,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = value,
            ["doc"] = string value to store,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Store a user value that will get written to a crash dump when
a crash occurs. This can be user id:s, breadcrumb data etc.
There are 32 slots indexed from 0. Each slot stores at most 255 characters.,
        ["name"] = crash.set_user_field,
        ["error"] = ,
        ["brief"] = stores user-defined string value,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = crash dump handle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function returns a table containing entries with sub-tables that
have fields 'name' and 'address' set for all loaded modules.,
        ["name"] = crash.get_modules,
        ["error"] = ,
        ["brief"] = get all loaded modules from when the crash occured,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = modules,
            ["doc"] = module table,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = crash dump handle,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = index,
            ["doc"] = user data slot index,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = reads user field from a loaded crash dump,
        ["name"] = crash.get_user_field,
        ["error"] = ,
        ["brief"] = reads user field from a loaded crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = value,
            ["doc"] = user data value recorded in the crash dump,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = crash dump handle,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = index,
            ["doc"] = system field enum. Must be less than <a href="/ref/crash#crash.SYSFIELD_MAX">crash.SYSFIELD_MAX</a>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = reads a system field from a loaded crash dump,
        ["name"] = crash.get_sys_field,
        ["error"] = ,
        ["brief"] = reads a system field from a loaded crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = value,
            ["doc"] = value recorded in the crash dump, or <code>nil</code> if it didn't exist,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = crash dump handle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = read signal number from a crash report,
        ["name"] = crash.get_signum,
        ["error"] = ,
        ["brief"] = read signal number from a crash report,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = signal,
            ["doc"] = signal number,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = crash dump handle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = A table is returned containing the addresses of the call stack.,
        ["name"] = crash.get_backtrace,
        ["error"] = ,
        ["brief"] = read backtrace recorded in a loaded crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = backtrace,
            ["doc"] = table containing the backtrace,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = crash dump handle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The format of read text blob is platform specific
and not guaranteed
but can be useful for manual inspection.,
        ["name"] = crash.get_extra_data,
        ["error"] = ,
        ["brief"] = read text blob recorded in a crash dump,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = blob,
            ["doc"] = string with the platform specific data,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = engine version as release number,
        ["name"] = crash.SYSFIELD_ENGINE_VERSION,
        ["error"] = ,
        ["brief"] = engine version as release number,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = engine version as hash,
        ["name"] = crash.SYSFIELD_ENGINE_HASH,
        ["error"] = ,
        ["brief"] = engine version as hash,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = device model as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_DEVICE_MODEL,
        ["error"] = ,
        ["brief"] = device model as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = device manufacturer as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_MANUFACTURER,
        ["error"] = ,
        ["brief"] = device manufacturer as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = system name as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_SYSTEM_NAME,
        ["error"] = ,
        ["brief"] = system name as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = system version as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_SYSTEM_VERSION,
        ["error"] = ,
        ["brief"] = system version as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = system language as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_LANGUAGE,
        ["error"] = ,
        ["brief"] = system language as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = system device language as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_DEVICE_LANGUAGE,
        ["error"] = ,
        ["brief"] = system device language as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = system territory as reported by sys.get_sys_info,
        ["name"] = crash.SYSFIELD_TERRITORY,
        ["error"] = ,
        ["brief"] = system territory as reported by sys.get_sys_info,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = android build fingerprint,
        ["name"] = crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT,
        ["error"] = ,
        ["brief"] = android build fingerprint,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The max number of sysfields.,
        ["name"] = crash.SYSFIELD_MAX,
        ["error"] = ,
        ["brief"] = The max number of sysfields.,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The max number of user fields.,
        ["name"] = crash.USERFIELD_MAX,
        ["error"] = ,
        ["brief"] = The max number of user fields.,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The max size of a single user field.,
        ["name"] = crash.USERFIELD_SIZE,
        ["error"] = ,
        ["brief"] = The max size of a single user field.,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Native crash logging functions and constants.,
      ["name"] = Crash,
      ["notes"] = {},
      ["namespace"] = crash,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Crash API documentation,
    },
  },
  [10] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the factory component to get status from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This returns status of the factory.
Calling this function when the factory is not marked as dynamic loading always returns
factory.STATUS_LOADED.,
        ["name"] = factory.get_status,
        ["error"] = ,
        ["brief"] = Get factory status,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = status,
            ["doc"] = status of the factory component
<ul>
<li><code>factory.STATUS_UNLOADED</code></li>
<li><code>factory.STATUS_LOADING</code></li>
<li><code>factory.STATUS_LOADED</code></li>
</ul>,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = unloaded,
        ["name"] = factory.STATUS_UNLOADED,
        ["error"] = ,
        ["brief"] = unloaded,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loading,
        ["name"] = factory.STATUS_LOADING,
        ["error"] = ,
        ["brief"] = loading,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loaded,
        ["name"] = factory.STATUS_LOADED,
        ["error"] = ,
        ["brief"] = loaded,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the factory component to unload,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This decreases the reference count for each resource loaded with factory.load. If reference is zero, the resource is destroyed.
Calling this function when the factory is not marked as dynamic loading does nothing.,
        ["name"] = factory.unload,
        ["error"] = ,
        ["brief"] = Unload resources previously loaded using factory.load,
        ["type"] = FUNCTION,
        ["examples"] = How to unload resources of a factory prototype loaded with factory.load
<div class="codehilite"><pre><span></span><code><span class="n">factory</span><span class="p">.</span><span class="n">unload</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the factory component to load,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, url, result),
            },
            ["name"] = [complete_function],
            ["doc"] = function to call when resources are loaded.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>url</code></dt>
<dd><span class="type">url</span> url of the factory component</dd>
<dt><code>result</code></dt>
<dd><span class="type">boolean</span> True if resources were loaded successfully</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resources are referenced by the factory component until the existing (parent) collection is destroyed or factory.unload is called.
Calling this function when the factory is not marked as dynamic loading does nothing.,
        ["name"] = factory.load,
        ["error"] = ,
        ["brief"] = Load resources of a factory prototype.,
        ["type"] = FUNCTION,
        ["examples"] = How to load resources of a factory prototype.
<div class="codehilite"><pre><span></span><code><span class="n">factory</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the factory that should create a game object.,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = [position],
            ["doc"] = the position of the new game object, the position of the game object calling <code>factory.create()</code> is used by default, or if the value is <code>nil</code>.,
          },
          [3] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = [rotation],
            ["doc"] = the rotation of the new game object, the rotation of the game object calling <code>factory.create()</code> is used by default, or if the value is <code>nil</code>.,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [properties],
            ["doc"] = the properties defined in a script attached to the new game object.,
          },
          [5] = {
            ["types"] = {
              [1] = number,
              [2] = vector3,
            },
            ["name"] = [scale],
            ["doc"] = the scale of the new game object (must be greater than 0), the scale of the game object containing the factory is used by default, or if the value is <code>nil</code>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The URL identifies which factory should create the game object.
If the game object is created inside of the frame (e.g. from an update callback), the game object will be created instantly, but none of its component will be updated in the same frame.
Properties defined in scripts in the created game object can be overridden through the properties-parameter below.
See go.property for more information on script properties.
<span class="icon-attention"></span> Calling <a href="/ref/factory#factory.create">factory.create</a> on a factory that is marked as dynamic without having loaded resources
using <a href="/ref/factory#factory.load">factory.load</a> will synchronously load and create resources which may affect application performance.,
        ["name"] = factory.create,
        ["error"] = ,
        ["brief"] = make a factory create a new game object,
        ["type"] = FUNCTION,
        ["examples"] = How to create a new game object:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- create a new game object and provide property values</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_created_object</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="p">{</span><span class="n">my_value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">})</span>
    <span class="c1">-- communicate with the object</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_created_object</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

And then let the new game object have a script attached:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_value&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- do something with self.my_value which is now one</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = the global id of the spawned game object,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [url],
            ["doc"] = the factory component,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = [prototype],
            ["doc"] = the path to the new prototype, or <code>nil</code>,
          },
        },
        ["notes"] = {
          [1] = - Requires the factory to have the "Dynamic Prototype" set
  - Cannot be set when the state is COMP_FACTORY_STATUS_LOADING
  - Setting the prototype to `nil` will revert back to the original prototype.,
        },
        ["tparams"] = {},
        ["description"] = Changes the prototype for the factory.,
        ["name"] = factory.set_prototype,
        ["error"] = ,
        ["brief"] = changes the prototype for the factory,
        ["type"] = FUNCTION,
        ["examples"] = How to unload the previous prototypes resources, and then spawn a new game object
<div class="codehilite"><pre><span></span><code><span class="n">factory</span><span class="p">.</span><span class="n">unload</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">)</span> <span class="c1">-- unload the previous resources</span>
<span class="n">factory</span><span class="p">.</span><span class="n">set_prototype</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="s2">&quot;/main/levels/enemyA.goc&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="s2">&quot;#factory&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">(),</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">())</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Functions for controlling factory components which are used to
dynamically spawn game objects into the runtime.,
      ["name"] = Factory,
      ["notes"] = {},
      ["namespace"] = factory,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Factory API documentation,
    },
  },
  [11] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a game object instance to make that instance acquire the user input focus.
User input is distributed by the engine to every instance that has
requested it. The last instance to request focus will receive it first.
This means that the scripts in the instance will have first-hand-chance
at reacting on user input, possibly consuming it (by returning
<code>true</code> from <code>on_input</code>) so that no other instances
can react on it. The most common case is for a script to send this message
to itself when it needs to respond to user input.
A script belonging to an instance which has the user input focus will
receive the input actions in its <code>on_input</code> callback function.
See <a href="#on_input">on_input</a> for more information on how user input can be
handled.,
        ["name"] = acquire_input_focus,
        ["error"] = ,
        ["brief"] = acquires the user input focus,
        ["type"] = MESSAGE,
        ["examples"] = This example demonstrates how to acquire and act on user input.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- acquire input focus as soon as the instance has been initialized</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;acquire_input_focus&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_input</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action_id</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="c1">-- check which input we received</span>
    <span class="kr">if</span> <span class="n">action_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_action&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- act on the input</span>
        <span class="n">self</span><span class="p">.</span><span class="n">my_action_amount</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">value</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to an instance to make that instance release the user input focus.
See <a href="#acquire_input_focus">acquire_input_focus</a> for more information on how the user input handling
works.,
        ["name"] = release_input_focus,
        ["error"] = ,
        ["brief"] = releases the user input focus,
        ["type"] = MESSAGE,
        ["examples"] = How to make a game object stop receiving input:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;release_input_focus&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = parent_id,
            ["doc"] = the id of the new parent,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = keep_world_transform,
            ["doc"] = if the world transform of the instance should be preserved when changing spaces, 0 for false and 1 for true. The default value is 1.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = When this message is sent to an instance, it sets the parent of that instance. This means that the instance will exist
in the geometrical space of its parent, like a basic transformation hierarchy or scene graph. If no parent is specified,
the instance will be detached from any parent and exist in world space. A script can send this message to itself to set
the parent of its instance.,
        ["name"] = set_parent,
        ["error"] = ,
        ["brief"] = sets the parent of the receiving instance,
        ["type"] = MESSAGE,
        ["examples"] = Attach myself to another instance "my_parent":
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;set_parent&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">parent_id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_parent&quot;</span><span class="p">)})</span>
</code></pre></div>

Attach an instance "my_instance" to another instance "my_parent":
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;my_instance&quot;</span><span class="p">,</span> <span class="s2">&quot;set_parent&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">parent_id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_parent&quot;</span><span class="p">)})</span>
</code></pre></div>

Detach an instance "my_instance" from its parent (if any):
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;my_instance&quot;</span><span class="p">,</span> <span class="s2">&quot;set_parent&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message enables the receiving component. All components are enabled by default, which means they will receive input, updates
and be a part of the simulation. A component is disabled when it receives the <code>disable</code> message.
<span class="icon-alert"></span> Components that currently supports this message are:
<ul>
<li>Camera</li>
<li>Collection Proxy</li>
<li>Collision Object</li>
<li>Gui</li>
<li>Label</li>
<li>Spine Model</li>
<li>Sprite</li>
<li>Tile Grid</li>
<li>Model</li>
<li>Mesh</li>
</ul>,
        ["name"] = enable,
        ["error"] = ,
        ["brief"] = enables the receiving component,
        ["type"] = MESSAGE,
        ["examples"] = Enable the component "my_component":
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#my_component&quot;</span><span class="p">,</span> <span class="s2">&quot;enable&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message disables the receiving component. All components are enabled by default, which means they will receive input, updates
and be a part of the simulation. A component is disabled when it receives the <code>disable</code> message.
<span class="icon-alert"></span> Components that currently supports this message are:
<ul>
<li>Camera</li>
<li>Collection Proxy</li>
<li>Collision Object</li>
<li>Gui</li>
<li>Label</li>
<li>Spine Model</li>
<li>Sprite</li>
<li>Tile Grid</li>
<li>Model</li>
<li>Mesh</li>
</ul>,
        ["name"] = disable,
        ["error"] = ,
        ["brief"] = disables the receiving component,
        ["type"] = MESSAGE,
        ["examples"] = Disable the component "my_component":
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#my_component&quot;</span><span class="p">,</span> <span class="s2">&quot;disable&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The position of the game object.
The type of the property is vector3.,
        ["name"] = position,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> game object position,
        ["type"] = PROPERTY,
        ["examples"] = How to query a game object's position, either as a vector3 or selecting a specific dimension:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- get position from &quot;player&quot;</span>
  <span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">posx</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;position.x&quot;</span><span class="p">)</span>
  <span class="c1">-- do something useful</span>
  <span class="nb">assert</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">posx</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The rotation of the game object.
The type of the property is quaternion.,
        ["name"] = rotation,
        ["error"] = ,
        ["brief"] = <span class="type">quaternion</span> game object rotation,
        ["type"] = PROPERTY,
        ["examples"] = How to set a game object's rotation:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- set &quot;player&quot; rotation to 45 degrees around z.</span>
  <span class="kd">local</span> <span class="n">rotz</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mf">3.141592</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;rotation&quot;</span><span class="p">,</span> <span class="n">rotz</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The rotation of the game object expressed in Euler angles.
Euler angles are specified in degrees in the interval (-360, 360).
The type of the property is vector3.,
        ["name"] = euler,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> game object euler rotation,
        ["type"] = PROPERTY,
        ["examples"] = How to set a game object's rotation with euler angles, either as a vector3 or selecting a specific dimension:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- set &quot;player&quot; euler z rotation component to 45 degrees around z.</span>
  <span class="kd">local</span> <span class="n">rotz</span> <span class="o">=</span> <span class="mi">45</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;euler.z&quot;</span><span class="p">,</span> <span class="n">rotz</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;euler&quot;</span><span class="p">)</span>
  <span class="c1">-- do something useful</span>
  <span class="nb">assert</span><span class="p">(</span><span class="n">rot</span><span class="p">.</span><span class="n">z</span> <span class="o">==</span> <span class="n">rotz</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The uniform scale of the game object. The type of the property is number.,
        ["name"] = scale,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> game object scale,
        ["type"] = PROPERTY,
        ["examples"] = How to scale a game object:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Double the scaling on &quot;player&quot;</span>
  <span class="kd">local</span> <span class="n">scale</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;scale&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;player&quot;</span><span class="p">,</span> <span class="s2">&quot;scale&quot;</span><span class="p">,</span> <span class="n">scale</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object or component having the property,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = property,
            ["doc"] = id of the property to retrieve,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional options table
- index <span class="type">integer</span> index into array property (1 based)
- key <span class="type">hash</span> name of internal property,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = gets a named property of the specified game object or component,
        ["name"] = go.get,
        ["error"] = ,
        ["brief"] = gets a named property of the specified game object or component,
        ["type"] = FUNCTION,
        ["examples"] = Get a named property
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- get the resource of a certain gui font</span>
    <span class="kd">local</span> <span class="n">font_hash</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;fonts&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;system_font_BIG&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = value,
            ["doc"] = the value of the specified property,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object or component having the property,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = property,
            ["doc"] = id of the property to set,
          },
          [3] = {
            ["types"] = {
              [1] = any,
              [2] = table,
            },
            ["name"] = value,
            ["doc"] = the value to set,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional options table
- index <span class="type">integer</span> index into array property (1 based)
- key <span class="type">hash</span> name of internal property,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = sets a named property of the specified game object or component, or a material constant,
        ["name"] = go.set,
        ["error"] = ,
        ["brief"] = sets a named property of the specified game object or component, or a material constant,
        ["type"] = FUNCTION,
        ["examples"] = Set a named property
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;big_font&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">font</span><span class="p">())</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;fonts&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">big_font</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;system_font_BIG&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = request_transform transform_response,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the position for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The position is relative the parent (if any). Use <a href="/ref/go#go.get_world_position">go.get_world_position</a> to retrieve the global world position.,
        ["name"] = go.get_position,
        ["error"] = ,
        ["brief"] = gets the position of a game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Get the position of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">p</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_position</span><span class="p">()</span>
</code></pre></div>

Get the position of another game object instance "my_gameobject":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_position</span><span class="p">(</span><span class="s2">&quot;my_gameobject&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = instance position,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the rotation for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The rotation is relative to the parent (if any). Use <a href="/ref/go#go.get_world_rotation">go.get_world_rotation</a> to retrieve the global world rotation.,
        ["name"] = go.get_rotation,
        ["error"] = ,
        ["brief"] = gets the rotation of the game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Get the rotation of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_rotation</span><span class="p">()</span>
</code></pre></div>

Get the rotation of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_rotation</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = rotation,
            ["doc"] = instance rotation,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the scale for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The scale is relative the parent (if any). Use <a href="/ref/go#go.get_world_scale">go.get_world_scale</a> to retrieve the global world 3D scale factor.,
        ["name"] = go.get_scale,
        ["error"] = ,
        ["brief"] = gets the 3D scale factor of the game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Get the scale of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_scale</span><span class="p">()</span>
</code></pre></div>

Get the scale of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_scale</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = scale,
            ["doc"] = instance scale factor,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the uniform scale for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The uniform scale is relative the parent (if any). If the underlying scale vector is non-uniform the min element of the vector is returned as the uniform scale factor.,
        ["name"] = go.get_scale_uniform,
        ["error"] = ,
        ["brief"] = gets the uniform scale factor of the game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Get the scale of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_scale_uniform</span><span class="p">()</span>
</code></pre></div>

Get the uniform scale of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_scale_uniform</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = scale,
            ["doc"] = uniform instance scale factor,
          },
        },
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = position to set,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to set the position for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The position is relative to the parent (if any). The global world position cannot be manually set.,
        ["name"] = go.set_position,
        ["error"] = ,
        ["brief"] = sets the position of the game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Set the position of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">p</span> <span class="o">=</span> <span class="p">...</span>
<span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div>

Set the position of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">p</span> <span class="o">=</span> <span class="p">...</span>
<span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = rotation,
            ["doc"] = rotation to set,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the rotation for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The rotation is relative to the parent (if any). The global world rotation cannot be manually set.,
        ["name"] = go.set_rotation,
        ["error"] = ,
        ["brief"] = sets the rotation of the game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Set the rotation of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="p">...</span>
<span class="n">go</span><span class="p">.</span><span class="n">set_rotation</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</code></pre></div>

Set the rotation of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="p">...</span>
<span class="n">go</span><span class="p">.</span><span class="n">set_rotation</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = vector3,
            },
            ["name"] = scale,
            ["doc"] = vector or uniform scale factor, must be greater than 0,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the scale for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The scale factor is relative to the parent (if any). The global world scale factor cannot be manually set.
<span class="icon-attention"></span> Physics are currently not affected when setting scale from this function.,
        ["name"] = go.set_scale,
        ["error"] = ,
        ["brief"] = sets the scale factor of the game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Set the scale of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
<span class="n">go</span><span class="p">.</span><span class="n">set_scale</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div>

Set the scale of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="mf">1.2</span>
<span class="n">go</span><span class="p">.</span><span class="n">set_scale</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to set parent for, defaults to the instance containing the calling script,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [parent_id],
            ["doc"] = optional id of the new parent game object, defaults to detaching game object from its parent,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = [keep_world_transform],
            ["doc"] = optional boolean, set to true to maintain the world transform when changing spaces. Defaults to false.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the parent for a game object instance. This means that the instance will exist in the geometrical space of its parent,
like a basic transformation hierarchy or scene graph. If no parent is specified, the instance will be detached from any parent and exist in world
space.
This function will generate a <code>set_parent</code> message. It is not until the message has been processed that the change actually takes effect. This
typically happens later in the same frame or the beginning of the next frame. Refer to the manual to learn how messages are processed by the
engine.,
        ["name"] = go.set_parent,
        ["error"] = ,
        ["brief"] = sets the parent for a specific game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Attach myself to another instance "my_parent":
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">set_parent</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(),</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_parent&quot;</span><span class="p">))</span>
</code></pre></div>

Attach an instance "my_instance" to another instance "my_parent":
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">set_parent</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_instance&quot;</span><span class="p">),</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_parent&quot;</span><span class="p">))</span>
</code></pre></div>

Detach an instance "my_instance" from its parent (if any):
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">set_parent</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_instance&quot;</span><span class="p">))</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get parent for, defaults to the instance containing the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the parent for a game object instance.,
        ["name"] = go.get_parent,
        ["error"] = ,
        ["brief"] = get the parent for a specific game object instance,
        ["type"] = FUNCTION,
        ["examples"] = Get parent of the instance containing the calling script:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">parent_id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_parent</span><span class="p">()</span>
</code></pre></div>

Get parent of the instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">parent_id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_parent</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = nil,
            },
            ["name"] = parent_id,
            ["doc"] = parent instance or <code>nil</code>,
          },
        },
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the world position for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function will return the world position calculated at the end of the previous frame.
Use <a href="/ref/go#go.get_position">go.get_position</a> to retrieve the position relative to the parent.,
        ["name"] = go.get_world_position,
        ["error"] = ,
        ["brief"] = gets the game object instance world position,
        ["type"] = FUNCTION,
        ["examples"] = Get the world position of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">p</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">()</span>
</code></pre></div>

Get the world position of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">p</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = instance world position,
          },
        },
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the world rotation for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function will return the world rotation calculated at the end of the previous frame.
Use <a href="/ref/go#go.get_rotation">go.get_rotation</a> to retrieve the rotation relative to the parent.,
        ["name"] = go.get_world_rotation,
        ["error"] = ,
        ["brief"] = gets the game object instance world rotation,
        ["type"] = FUNCTION,
        ["examples"] = Get the world rotation of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_rotation</span><span class="p">()</span>
</code></pre></div>

Get the world rotation of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_rotation</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = rotation,
            ["doc"] = instance world rotation,
          },
        },
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the world scale for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function will return the world 3D scale factor calculated at the end of the previous frame.
Use <a href="/ref/go#go.get_scale">go.get_scale</a> to retrieve the 3D scale factor relative to the parent.
This vector is derived by decomposing the transformation matrix and should be used with care.
For most cases it should be fine to use <a href="/ref/go#go.get_world_scale_uniform">go.get_world_scale_uniform</a> instead.,
        ["name"] = go.get_world_scale,
        ["error"] = ,
        ["brief"] = gets the game object instance world 3D scale factor,
        ["type"] = FUNCTION,
        ["examples"] = Get the world 3D scale of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_scale</span><span class="p">()</span>
</code></pre></div>

Get the world scale of another game object instance "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_scale</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = scale,
            ["doc"] = instance world 3D scale factor,
          },
        },
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the world scale for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function will return the world scale factor calculated at the end of the previous frame.
Use <a href="/ref/go#go.get_scale_uniform">go.get_scale_uniform</a> to retrieve the scale factor relative to the parent.,
        ["name"] = go.get_world_scale_uniform,
        ["error"] = ,
        ["brief"] = gets the uniform game object instance world scale factor,
        ["type"] = FUNCTION,
        ["examples"] = Get the world scale of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_scale_uniform</span><span class="p">()</span>
</code></pre></div>

Get the world scale of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_scale_uniform</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = scale,
            ["doc"] = instance world scale factor,
          },
        },
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = [id],
            ["doc"] = optional id of the game object instance to get the world transform for, by default the instance of the calling script,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function will return the world transform matrix calculated at the end of the previous frame.,
        ["name"] = go.get_world_transform,
        ["error"] = ,
        ["brief"] = gets the game object instance world transform matrix,
        ["type"] = FUNCTION,
        ["examples"] = Get the world transform of the game object instance the script is attached to:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_transform</span><span class="p">()</span>
</code></pre></div>

Get the world transform of another game object instance with id "x":
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_transform</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = transform,
            ["doc"] = instance world transform,
          },
        },
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = path of the instance for which to return the id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns or constructs an instance identifier. The instance id is a hash
of the absolute path to the instance.
<ul>
<li>If <code>path</code> is specified, it can either be absolute or relative to the instance of the calling script.</li>
<li>If <code>path</code> is not specified, the id of the game object instance the script is attached to will be returned.</li>
</ul>,
        ["name"] = go.get_id,
        ["error"] = ,
        ["brief"] = gets the id of an instance,
        ["type"] = FUNCTION,
        ["examples"] = For the instance with path <code>/my_sub_collection/my_instance</code>, the following calls are equivalent:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">()</span> <span class="c1">-- no path, defaults to the instance containing the calling script</span>
<span class="nb">print</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="c1">--&gt; hash: [/my_sub_collection/my_instance]</span>

<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;/my_sub_collection/my_instance&quot;</span><span class="p">)</span> <span class="c1">-- absolute path</span>
<span class="nb">print</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="c1">--&gt; hash: [/my_sub_collection/my_instance]</span>

<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_instance&quot;</span><span class="p">)</span> <span class="c1">-- relative path</span>
<span class="nb">print</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="c1">--&gt; hash: [/my_sub_collection/my_instance]</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = instance id,
          },
        },
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object or component having the property,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = property,
            ["doc"] = id of the property to animate,
          },
          [3] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = playback,
            ["doc"] = playback mode of the animation
<ul>
<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>
<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>
<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>
<li><code>go.PLAYBACK_LOOP_FORWARD</code></li>
<li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>
<li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>
</ul>,
          },
          [4] = {
            ["types"] = {
              [1] = number,
              [2] = vector3,
              [3] = vector4,
              [4] = quaternion,
            },
            ["name"] = to,
            ["doc"] = target property value,
          },
          [5] = {
            ["types"] = {
              [1] = constant,
              [2] = vector,
            },
            ["name"] = easing,
            ["doc"] = easing to use during animation. Either specify a constant, see the <a href="/manuals/animation#_easing">animation guide</a> for a complete list, or a vmath.vector with a curve,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = duration,
            ["doc"] = duration of the animation in seconds,
          },
          [7] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [delay],
            ["doc"] = delay before the animation starts in seconds,
          },
          [8] = {
            ["types"] = {
              [1] = function(self, url, property),
            },
            ["name"] = [complete_function],
            ["doc"] = optional function to call when the animation has completed
<dl>
<dt><code>self</code></dt>
<dd>
<span class="type">object</span> The current object.
</dd>
<dt><code>url</code></dt>
<dd>
<span class="type">url</span> The game object or component instance for which the property is animated.
</dd>
<dt><code>property</code></dt>
<dd>
<span class="type">hash</span> The id of the animated property.
</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only supported for numerical properties. If the node property is already being
animated, that animation will be canceled and replaced by the new one.
If a <code>complete_function</code> (lua function) is specified, that function will be called when the animation has completed.
By starting a new animation in that function, several animations can be sequenced together. See the examples for more information.
<span class="icon-attention"></span> If you call <code>go.animate()</code> from a game object's <code>final()</code> function,
any passed <code>complete_function</code> will be ignored and never called upon animation completion.
See the <a href="/manuals/properties">properties guide</a> for which properties can be animated and the <a href="/manuals/animation">animation guide</a> for how
them.,
        ["name"] = go.animate,
        ["error"] = ,
        ["brief"] = animates a named property of the specified game object or component,
        ["type"] = FUNCTION,
        ["examples"] = Animate the position of a game object to x = 10 during 1 second, then y = 20 during 1 second:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">x_done</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">property</span><span class="p">)</span>
    <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(),</span> <span class="s2">&quot;position.y&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_ONCE_FORWARD</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_LINEAR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(),</span> <span class="s2">&quot;position.x&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_ONCE_FORWARD</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_LINEAR</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x_done</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Animate the y position of a game object using a crazy custom easing curve:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">values</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                 <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                 <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                 <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                 <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                 <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                 <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                 <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">}</span>
<span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
<span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;go&quot;</span><span class="p">,</span> <span class="s2">&quot;position.y&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">vec</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object or component,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = [property],
            ["doc"] = optional id of the property to cancel,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = By calling this function, all or specified stored property animations of the game object or component will be canceled.
See the <a href="/manuals/properties">properties guide</a> for which properties can be animated and the <a href="/manuals/animation">animation guide</a> for how to animate them.,
        ["name"] = go.cancel_animations,
        ["error"] = ,
        ["brief"] = cancels all or specified property animations of the game object or component,
        ["type"] = FUNCTION,
        ["examples"] = Cancel the animation of the position of a game object:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">cancel_animations</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(),</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>
</code></pre></div>

Cancel all property animations of the current game object:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">cancel_animations</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>
</code></pre></div>

Cancel all property animations of the sprite component of the current game object:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">cancel_animations</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
              [4] = table,
            },
            ["name"] = [id],
            ["doc"] = optional id or table of id's of the instance(s) to delete, the instance of the calling script is deleted by default,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = [recursive],
            ["doc"] = optional boolean, set to true to recursively delete child hiearchy in child to parent order,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Delete one or more game objects identified by id. Deletion is asynchronous meaning that
the game object(s) are scheduled for deletion which will happen at the end of the current
frame. Note that game objects scheduled for deletion will be counted against
<code>max_instances</code> in "game.project" until they are actually removed.
<span class="icon-attention"></span> Deleting a game object containing a particle FX component emitting particles will not immediately stop the particle FX from emitting particles. You need to manually stop the particle FX using <code>particlefx.stop()</code>.
<span class="icon-attention"></span> Deleting a game object containing a sound component that is playing will not immediately stop the sound from playing. You need to manually stop the sound using <code>sound.stop()</code>.,
        ["name"] = go.delete,
        ["error"] = ,
        ["brief"] = delete one or more game object instances,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how to delete game objects
<div class="codehilite"><pre><span></span><code><span class="c1">-- Delete the script game object</span>
<span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">()</span>
<span class="c1">-- Delete a game object with the id &quot;my_game_object&quot;.</span>
<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_game_object&quot;</span><span class="p">)</span> <span class="c1">-- retrieve the id of the game object to be deleted</span>
<span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
<span class="c1">-- Delete a list of game objects.</span>
<span class="kd">local</span> <span class="n">ids</span> <span class="o">=</span> <span class="p">{</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_object_1&quot;</span><span class="p">),</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_object_2&quot;</span><span class="p">),</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_object_3&quot;</span><span class="p">)</span> <span class="p">}</span>
<span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span>
</code></pre></div>

This example demonstrates how to delete a game objects and their children (child to parent order)
<div class="codehilite"><pre><span></span><code><span class="c1">-- Delete the script game object and it&#39;s children</span>
<span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
<span class="c1">-- Delete a game object with the id &quot;my_game_object&quot; and it&#39;s children.</span>
<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;my_game_object&quot;</span><span class="p">)</span> <span class="c1">-- retrieve the id of the game object to be deleted</span>
<span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="c1">-- Delete a list of game objects and their children.</span>
<span class="kd">local</span> <span class="n">ids</span> <span class="o">=</span> <span class="p">{</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_object_1&quot;</span><span class="p">),</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_object_2&quot;</span><span class="p">),</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_object_3&quot;</span><span class="p">)</span> <span class="p">}</span>
<span class="n">go</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">ids</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = name,
            ["doc"] = the id of the property,
          },
          [2] = {
            ["types"] = {
              [1] = number,
              [2] = hash,
              [3] = url,
              [4] = vector3,
              [5] = vector4,
              [6] = quaternion,
              [7] = resource,
              [8] = boolean,
            },
            ["name"] = value,
            ["doc"] = default value of the property. In the case of a url, only the empty constructor msg.url() is allowed. In the case of a resource one of the resource constructors (eg resource.atlas(), resource.font() etc) is expected.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function defines a property which can then be used in the script through the self-reference.
The properties defined this way are automatically exposed in the editor in game objects and collections which use the script.
Note that you can only use this function outside any callback-functions like init and update.,
        ["name"] = go.property,
        ["error"] = ,
        ["brief"] = define a property for the script,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how to define a property called "health" in a script.
The health is decreased whenever someone sends a message called "take_damage" to the script.
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;health&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- prints 100 to the output</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">health</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;take_damage&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="n">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">health</span> <span class="o">-</span> <span class="n">message</span><span class="p">.</span><span class="n">damage</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Ouch! My health is now: &quot;</span> <span class="o">..</span> <span class="n">self</span><span class="p">.</span><span class="n">health</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object to check,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = check if the specified game object exists,
        ["name"] = go.exists,
        ["error"] = ,
        ["brief"] = check if the specified game object exists,
        ["type"] = FUNCTION,
        ["examples"] = Check if game object "my_game_object" exists
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s2">&quot;/my_game_object&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = exists,
            ["doc"] = true if the game object exists,
          },
        },
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = position which need to be converted,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object which coordinate system convert to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-attention"></span> The function uses world transformation calculated at the end of previous frame.,
        ["name"] = go.world_to_local_position,
        ["error"] = ,
        ["brief"] = convert position to game object's coordinate space,
        ["type"] = FUNCTION,
        ["examples"] = Convert position of "test" game object into coordinate space of "child" object.
<div class="codehilite"><pre><span></span><code>  <span class="kd">local</span> <span class="n">test_pos</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">(</span><span class="s2">&quot;/test&quot;</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">child_pos</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">(</span><span class="s2">&quot;/child&quot;</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">new_position</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">world_to_local_position</span><span class="p">(</span><span class="n">test_pos</span><span class="p">,</span> <span class="s2">&quot;/child&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = converted_postion,
            ["doc"] = converted position,
          },
        },
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = transformation,
            ["doc"] = transformation which need to be converted,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = url of the game object which coordinate system convert to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-attention"></span> The function uses world transformation calculated at the end of previous frame.,
        ["name"] = go.world_to_local_transform,
        ["error"] = ,
        ["brief"] = convert transformation matrix to game object's coordinate space,
        ["type"] = FUNCTION,
        ["examples"] = Convert transformation of "test" game object into coordinate space of "child" object.
<div class="codehilite"><pre><span></span><code>   <span class="kd">local</span> <span class="n">test_transform</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_transform</span><span class="p">(</span><span class="s2">&quot;/test&quot;</span><span class="p">)</span>
   <span class="kd">local</span> <span class="n">child_transform</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_transform</span><span class="p">(</span><span class="s2">&quot;/child&quot;</span><span class="p">)</span>
   <span class="kd">local</span> <span class="n">result_transform</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">world_to_local_transform</span><span class="p">(</span><span class="n">test_transform</span><span class="p">,</span> <span class="s2">&quot;/child&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = converted_transform,
            ["doc"] = converted transformation,
          },
        },
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when a script component is initialized. It can be used
to set the initial state of the script.,
        ["name"] = init,
        ["error"] = ,
        ["brief"] = called when a script component is initialized,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- set up useful data</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_value</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when a script component is finalized (destroyed). It can
be used to e.g. take some last action, report the finalization to other game object instances, delete spawned objects
or release user input focus (see <a href="#release_input_focus">release_input_focus</a>).,
        ["name"] = final,
        ["error"] = ,
        ["brief"] = called when a script component is finalized,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">final</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- report finalization</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;my_friend_instance&quot;</span><span class="p">,</span> <span class="s2">&quot;im_dead&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">my_stats</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">some_value</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = dt,
            ["doc"] = the time-step of the frame update,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine every frame to update the state of a script component.
It can be used to perform any kind of game related tasks, e.g. moving the game object instance.,
        ["name"] = update,
        ["error"] = ,
        ["brief"] = called every frame to update the script component,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how to move a game object instance through the script component:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- set initial velocity to be 1 along world x-axis</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- move the game object instance</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_position</span><span class="p">()</span> <span class="o">+</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">my_velocity</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = dt,
            ["doc"] = the time-step of the frame update,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine at fixed intervals to update the state of a script
component. The function will be called if 'Fixed Update Frequency' is enabled in the Engine section of game.project.
It can for instance be used to update game logic with the physics simulation if using a fixed timestep for the
physics (enabled by ticking 'Use Fixed Timestep' in the Physics section of game.project).,
        ["name"] = fixed_update,
        ["error"] = ,
        ["brief"] = called at fixed intervals to update the script component,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = message_id,
            ["doc"] = id of the received message,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = message,
            ["doc"] = a table containing the message data,
          },
          [4] = {
            ["types"] = {
              [1] = url,
            },
            ["name"] = sender,
            ["doc"] = address of the sender,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine whenever a message has been sent to the script component.
It can be used to take action on the message, e.g. send a response back to the sender of the message.
The <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the
documentation of the message specifies which data is supplied.,
        ["name"] = on_message,
        ["error"] = ,
        ["brief"] = called when a message has been sent to the script component,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how a game object instance, called "a", can communicate with another instance, called "b". It
is assumed that both script components of the instances has id "script".
Script of instance "a":
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- let b know about some important data</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;b#script&quot;</span><span class="p">,</span> <span class="s2">&quot;my_data&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">important_value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>

Script of instance "b":
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- store the url of instance &quot;a&quot; for later use, by specifying nil as socket we</span>
    <span class="c1">-- automatically use our own socket</span>
    <span class="n">self</span><span class="p">.</span><span class="n">a_url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">),</span> <span class="s2">&quot;script&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="c1">-- check message and sender</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_data&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">sender</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">a_url</span> <span class="kr">then</span>
        <span class="c1">-- use the data in some way</span>
        <span class="n">self</span><span class="p">.</span><span class="n">important_value</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">important_value</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = action_id,
            ["doc"] = id of the received input action, as mapped in the input_binding-file,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = action,
            ["doc"] = a table containing the input data, see above for a description,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when user input is sent to the game object instance of the script.
It can be used to take action on the input, e.g. move the instance according to the input.
For an instance to obtain user input, it must first acquire input focus
through the message <code>acquire_input_focus</code>.
Any instance that has obtained input will be put on top of an
input stack. Input is sent to all listeners on the stack until the
end of stack is reached, or a listener returns <code>true</code>
to signal that it wants input to be consumed.
See the documentation of <a href="#acquire_input_focus">acquire_input_focus</a> for more
information.
The <code>action</code> parameter is a table containing data about the input mapped to the
<code>action_id</code>.
For mapped actions it specifies the value of the input and if it was just pressed or released.
Actions are mapped to input in an input_binding-file.
Mouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.
The <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.
Here is a brief description of the available table fields:
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>value</code></td>
<td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>pressed</code></td>
<td>If the input was pressed this frame. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>released</code></td>
<td>If the input was released this frame. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>repeated</code></td>
<td>If the input was repeated this frame. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>x</code></td>
<td>The x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>y</code></td>
<td>The y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_x</code></td>
<td>The screen space x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_y</code></td>
<td>The screen space y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>dx</code></td>
<td>The change in x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>dy</code></td>
<td>The change in y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_dx</code></td>
<td>The change in screen space x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_dy</code></td>
<td>The change in screen space y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>gamepad</code></td>
<td>The index of the gamepad device that provided the input.</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>List of touch input, one element per finger, if present. See table below about touch input</td>
</tr>
</tbody>
</table>
Touch input table:
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>id</code></td>
<td>A number identifying the touch input during its duration.</td>
</tr>
<tr>
<td><code>pressed</code></td>
<td>True if the finger was pressed this frame.</td>
</tr>
<tr>
<td><code>released</code></td>
<td>True if the finger was released this frame.</td>
</tr>
<tr>
<td><code>tap_count</code></td>
<td>Number of taps, one for single, two for double-tap, etc</td>
</tr>
<tr>
<td><code>x</code></td>
<td>The x touch location.</td>
</tr>
<tr>
<td><code>y</code></td>
<td>The y touch location.</td>
</tr>
<tr>
<td><code>dx</code></td>
<td>The change in x value.</td>
</tr>
<tr>
<td><code>dy</code></td>
<td>The change in y value.</td>
</tr>
<tr>
<td><code>acc_x</code></td>
<td>Accelerometer x value (if present).</td>
</tr>
<tr>
<td><code>acc_y</code></td>
<td>Accelerometer y value (if present).</td>
</tr>
<tr>
<td><code>acc_z</code></td>
<td>Accelerometer z value (if present).</td>
</tr>
</tbody>
</table>,
        ["name"] = on_input,
        ["error"] = ,
        ["brief"] = called when user input is received,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how a game object instance can be moved as a response to user input.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- acquire input focus</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;acquire_input_focus&quot;</span><span class="p">)</span>
    <span class="c1">-- maximum speed the instance can be moved</span>
    <span class="n">self</span><span class="p">.</span><span class="n">max_speed</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="c1">-- velocity of the instance, initially zero</span>
    <span class="n">self</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">()</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- move the instance</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_position</span><span class="p">()</span> <span class="o">+</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_input</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action_id</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="c1">-- check for movement input</span>
    <span class="kr">if</span> <span class="n">action_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;right&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kr">if</span> <span class="n">action</span><span class="p">.</span><span class="n">released</span> <span class="kr">then</span> <span class="c1">-- reset velocity if input was released</span>
            <span class="n">self</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">()</span>
        <span class="kr">else</span> <span class="c1">-- update velocity</span>
            <span class="n">self</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">value</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">max_speed</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
              [2] = nil,
            },
            ["name"] = consume,
            ["doc"] = optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false,
          },
        },
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when the script component is reloaded, e.g. from the editor.
It can be used for live development, e.g. to tweak constants or set up the state properly for the instance.,
        ["name"] = on_reload,
        ["error"] = ,
        ["brief"] = called when the script component is reloaded,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how to tweak the speed of a game object instance that is moved on user input.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- acquire input focus</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;acquire_input_focus&quot;</span><span class="p">)</span>
    <span class="c1">-- maximum speed the instance can be moved, this value is tweaked in the on_reload function below</span>
    <span class="n">self</span><span class="p">.</span><span class="n">max_speed</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="c1">-- velocity of the instance, initially zero</span>
    <span class="n">self</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">()</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- move the instance</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get_position</span><span class="p">()</span> <span class="o">+</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_input</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action_id</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="c1">-- check for movement input</span>
    <span class="kr">if</span> <span class="n">action_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;right&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kr">if</span> <span class="n">action</span><span class="p">.</span><span class="n">released</span> <span class="kr">then</span> <span class="c1">-- reset velocity if input was released</span>
            <span class="n">self</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">()</span>
        <span class="kr">else</span> <span class="c1">-- update velocity</span>
            <span class="n">self</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">value</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">max_speed</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_reload</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- edit this value and reload the script component</span>
    <span class="n">self</span><span class="p">.</span><span class="n">max_speed</span> <span class="o">=</span> <span class="mi">100</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = no playback,
        ["name"] = go.PLAYBACK_NONE,
        ["error"] = ,
        ["brief"] = no playback,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = once forward,
        ["name"] = go.PLAYBACK_ONCE_FORWARD,
        ["error"] = ,
        ["brief"] = once forward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = once backward,
        ["name"] = go.PLAYBACK_ONCE_BACKWARD,
        ["error"] = ,
        ["brief"] = once backward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = once ping pong,
        ["name"] = go.PLAYBACK_ONCE_PINGPONG,
        ["error"] = ,
        ["brief"] = once ping pong,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loop forward,
        ["name"] = go.PLAYBACK_LOOP_FORWARD,
        ["error"] = ,
        ["brief"] = loop forward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loop backward,
        ["name"] = go.PLAYBACK_LOOP_BACKWARD,
        ["error"] = ,
        ["brief"] = loop backward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [47] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ping pong loop,
        ["name"] = go.PLAYBACK_LOOP_PINGPONG,
        ["error"] = ,
        ["brief"] = ping pong loop,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [48] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = linear interpolation,
        ["name"] = go.EASING_LINEAR,
        ["error"] = ,
        ["brief"] = linear interpolation,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [49] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-quadratic,
        ["name"] = go.EASING_INQUAD,
        ["error"] = ,
        ["brief"] = in-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [50] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-quadratic,
        ["name"] = go.EASING_OUTQUAD,
        ["error"] = ,
        ["brief"] = out-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [51] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-quadratic,
        ["name"] = go.EASING_INOUTQUAD,
        ["error"] = ,
        ["brief"] = in-out-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [52] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-quadratic,
        ["name"] = go.EASING_OUTINQUAD,
        ["error"] = ,
        ["brief"] = out-in-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [53] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-cubic,
        ["name"] = go.EASING_INCUBIC,
        ["error"] = ,
        ["brief"] = in-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [54] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-cubic,
        ["name"] = go.EASING_OUTCUBIC,
        ["error"] = ,
        ["brief"] = out-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [55] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-cubic,
        ["name"] = go.EASING_INOUTCUBIC,
        ["error"] = ,
        ["brief"] = in-out-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [56] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-cubic,
        ["name"] = go.EASING_OUTINCUBIC,
        ["error"] = ,
        ["brief"] = out-in-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [57] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-quartic,
        ["name"] = go.EASING_INQUART,
        ["error"] = ,
        ["brief"] = in-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [58] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-quartic,
        ["name"] = go.EASING_OUTQUART,
        ["error"] = ,
        ["brief"] = out-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [59] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-quartic,
        ["name"] = go.EASING_INOUTQUART,
        ["error"] = ,
        ["brief"] = in-out-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [60] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-quartic,
        ["name"] = go.EASING_OUTINQUART,
        ["error"] = ,
        ["brief"] = out-in-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [61] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-quintic,
        ["name"] = go.EASING_INQUINT,
        ["error"] = ,
        ["brief"] = in-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [62] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-quintic,
        ["name"] = go.EASING_OUTQUINT,
        ["error"] = ,
        ["brief"] = out-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [63] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-quintic,
        ["name"] = go.EASING_INOUTQUINT,
        ["error"] = ,
        ["brief"] = in-out-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [64] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-quintic,
        ["name"] = go.EASING_OUTINQUINT,
        ["error"] = ,
        ["brief"] = out-in-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [65] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-sine,
        ["name"] = go.EASING_INSINE,
        ["error"] = ,
        ["brief"] = in-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [66] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-sine,
        ["name"] = go.EASING_OUTSINE,
        ["error"] = ,
        ["brief"] = out-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [67] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-sine,
        ["name"] = go.EASING_INOUTSINE,
        ["error"] = ,
        ["brief"] = in-out-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [68] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-sine,
        ["name"] = go.EASING_OUTINSINE,
        ["error"] = ,
        ["brief"] = out-in-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [69] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-exponential,
        ["name"] = go.EASING_INEXPO,
        ["error"] = ,
        ["brief"] = in-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [70] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-exponential,
        ["name"] = go.EASING_OUTEXPO,
        ["error"] = ,
        ["brief"] = out-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [71] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-exponential,
        ["name"] = go.EASING_INOUTEXPO,
        ["error"] = ,
        ["brief"] = in-out-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [72] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-exponential,
        ["name"] = go.EASING_OUTINEXPO,
        ["error"] = ,
        ["brief"] = out-in-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [73] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-circlic,
        ["name"] = go.EASING_INCIRC,
        ["error"] = ,
        ["brief"] = in-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [74] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-circlic,
        ["name"] = go.EASING_OUTCIRC,
        ["error"] = ,
        ["brief"] = out-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [75] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-circlic,
        ["name"] = go.EASING_INOUTCIRC,
        ["error"] = ,
        ["brief"] = in-out-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [76] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-circlic,
        ["name"] = go.EASING_OUTINCIRC,
        ["error"] = ,
        ["brief"] = out-in-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [77] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-elastic,
        ["name"] = go.EASING_INELASTIC,
        ["error"] = ,
        ["brief"] = in-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [78] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-elastic,
        ["name"] = go.EASING_OUTELASTIC,
        ["error"] = ,
        ["brief"] = out-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [79] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-elastic,
        ["name"] = go.EASING_INOUTELASTIC,
        ["error"] = ,
        ["brief"] = in-out-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [80] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-elastic,
        ["name"] = go.EASING_OUTINELASTIC,
        ["error"] = ,
        ["brief"] = out-in-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [81] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-back,
        ["name"] = go.EASING_INBACK,
        ["error"] = ,
        ["brief"] = in-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [82] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-back,
        ["name"] = go.EASING_OUTBACK,
        ["error"] = ,
        ["brief"] = out-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [83] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-back,
        ["name"] = go.EASING_INOUTBACK,
        ["error"] = ,
        ["brief"] = in-out-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [84] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-back,
        ["name"] = go.EASING_OUTINBACK,
        ["error"] = ,
        ["brief"] = out-in-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [85] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-bounce,
        ["name"] = go.EASING_INBOUNCE,
        ["error"] = ,
        ["brief"] = in-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [86] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-bounce,
        ["name"] = go.EASING_OUTBOUNCE,
        ["error"] = ,
        ["brief"] = out-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [87] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-bounce,
        ["name"] = go.EASING_INOUTBOUNCE,
        ["error"] = ,
        ["brief"] = in-out-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [88] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-bounce,
        ["name"] = go.EASING_OUTINBOUNCE,
        ["error"] = ,
        ["brief"] = out-in-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions, core hooks, messages and constants for manipulation of
game objects. The "go" namespace is accessible from game object script
files.,
      ["name"] = Game object,
      ["notes"] = {},
      ["namespace"] = go,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Game object API documentation,
    },
  },
  [12] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = the id of the layout the engine is changing to,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = previous_id,
            ["doc"] = the id of the layout the engine is changing from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is broadcast to every GUI component when a layout change has been initiated
on device.,
        ["name"] = layout_changed,
        ["error"] = ,
        ["brief"] = reports a layout change,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
   <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;layout_changed&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">message</span><span class="p">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;Landscape&quot;</span><span class="p">)</span> <span class="kr">then</span>
       <span class="c1">-- switching layout to &quot;Landscape&quot;...</span>
       <span class="p">...</span>
   <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The main material (the default material assigned to a GUI) used when rendering the gui. The type of the property is hash.,
        ["name"] = material,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> gui material,
        ["type"] = PROPERTY,
        ["examples"] = How to set material using a script property (see <a href="/ref/resource#resource.material">resource.material</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;desaturate_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/desaturate.material&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;material&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">desaturate_material</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The materials used when rendering the gui. The type of the property is hash.
Key must be specified in options table.,
        ["name"] = materials,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> gui materials,
        ["type"] = PROPERTY,
        ["examples"] = How to change a named material resource using a script property from a script
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/my_material.material&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- this will update the &quot;my_gui_material&quot; entry in the GUI to use the material</span>
  <span class="c1">-- specified in the &quot;my_material&quot; script property.</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;materials&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">,</span> <span class="p">{</span> <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;my_gui_material&quot;</span> <span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The textures used in the gui. The type of the property is hash.
Key must be specified in options table.,
        ["name"] = textures,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> gui textures,
        ["type"] = PROPERTY,
        ["examples"] = How to set texture using a script property (see <a href="/ref/resource#resource.atlas">resource.atlas</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;cards_red&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">atlas</span><span class="p">(</span><span class="s2">&quot;/cards_red.atlas&quot;</span><span class="p">))</span>
<span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;cards_blue&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">atlas</span><span class="p">(</span><span class="s2">&quot;/cards_blue.atlas&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;textures&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cards_red</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;cards&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The fonts used in the gui. The type of the property is hash.
Key must be specified in options table.,
        ["name"] = fonts,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> gui fonts,
        ["type"] = PROPERTY,
        ["examples"] = How to set font using a script property (see <a href="/ref/resource#resource.font">resource.font</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;title_latin&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">font</span><span class="p">(</span><span class="s2">&quot;/open_sans.font&quot;</span><span class="p">))</span>
<span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;title_cyrillic&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">font</span><span class="p">(</span><span class="s2">&quot;/open_sans_cyrillic.font&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;fonts&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">title_cyrillic</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;title&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = id,
            ["doc"] = id of the node to retrieve,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Retrieves the node with the specified id.,
        ["name"] = gui.get_node,
        ["error"] = ,
        ["brief"] = gets the node with the specified id,
        ["type"] = FUNCTION,
        ["examples"] = Gets a node by id and change its color:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">red</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">red</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = instance,
            ["doc"] = a new node instance,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = the node to retrieve the id from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Retrieves the id of the specified node.,
        ["name"] = gui.get_id,
        ["error"] = ,
        ["brief"] = gets the id of the specified node,
        ["type"] = FUNCTION,
        ["examples"] = Gets the id of a node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>

<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_id</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="c1">--&gt; hash: [my_node]</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = the id of the node,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the id for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = id,
            ["doc"] = id to set,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the id of the specicied node to a new value.
Nodes created with the gui.new_*_node() functions get
an empty id. This function allows you to give dynamically
created nodes an id.
<span class="icon-attention"></span> No checking is done on the uniqueness of supplied ids.
It is up to you to make sure you use unique ids.,
        ["name"] = gui.set_id,
        ["error"] = ,
        ["brief"] = sets the id of the specified node,
        ["type"] = FUNCTION,
        ["examples"] = Create a new node and set its id:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">size</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_box_node</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_id</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;my_new_node&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the property for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = constant,
            },
            ["name"] = property,
            ["doc"] = the property to retrieve,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional options table (only applicable for material constants)
- <code>index</code> <span class="type">integer</span> index into array property (1 based),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Instead of using specific getters such as gui.get_position or gui.get_scale,
you can use gui.get instead and supply the property as a string or a hash.
While this function is similar to go.get, there are a few more restrictions
when operating in the gui namespace. Most notably, only these explicitly named properties are supported:
<ul>
<li><code>"position"</code></li>
<li><code>"rotation"</code></li>
<li><code>"euler"</code></li>
<li><code>"scale"</code></li>
<li><code>"color"</code></li>
<li><code>"outline"</code></li>
<li><code>"shadow"</code></li>
<li><code>"size"</code></li>
<li><code>"fill_angle"</code> (pie)</li>
<li><code>"inner_radius"</code> (pie)</li>
<li><code>"leading"</code> (text)</li>
<li><code>"tracking"</code> (text)</li>
<li><code>"slice9"</code> (slice9)</li>
</ul>
The value returned will either be a vmath.vector4 or a single number, i.e getting the "position"
property will return a vec4 while getting the "position.x" property will return a single value.
You can also use this function to get material constants.,
        ["name"] = gui.get,
        ["error"] = ,
        ["brief"] = gets the named property of a specified gui node,
        ["type"] = FUNCTION,
        ["examples"] = Get properties on existing nodes:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_box_node&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">node_position</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the property for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = constant,
            },
            ["name"] = property,
            ["doc"] = the property to set,
          },
          [3] = {
            ["types"] = {
              [1] = number,
              [2] = vector4,
              [3] = vector3,
              [4] = quat,
            },
            ["name"] = value,
            ["doc"] = the property to set,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional options table (only applicable for material constants)
- <code>index</code> <span class="type">integer</span> index into array property (1 based),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Instead of using specific setteres such as gui.set_position or gui.set_scale,
you can use gui.set instead and supply the property as a string or a hash.
While this function is similar to go.get and go.set, there are a few more restrictions
when operating in the gui namespace. Most notably, only these named properties identifiers are supported:
<ul>
<li><code>"position"</code></li>
<li><code>"rotation"</code></li>
<li><code>"euler"</code></li>
<li><code>"scale"</code></li>
<li><code>"color"</code></li>
<li><code>"outline"</code></li>
<li><code>"shadow"</code></li>
<li><code>"size"</code></li>
<li><code>"fill_angle"</code> (pie)</li>
<li><code>"inner_radius"</code> (pie)</li>
<li><code>"leading"</code> (text)</li>
<li><code>"tracking"</code> (text)</li>
<li><code>"slice9"</code> (slice9)</li>
</ul>
The value to set must either be a vmath.vector4, vmath.vector3, vmath.quat or a single number and depends on the property name you want to set.
I.e when setting the "position" property, you need to use a vmath.vector4 and when setting a single component of the property,
such as "position.x", you need to use a single value.
Note: When setting the rotation using the "rotation" property, you need to pass in a vmath.quat. This behaviour is different than from the gui.set_rotation function,
the intention is to move new functionality closer to go namespace so that migrating between gui and go is easier. To set the rotation using degrees instead,
use the "euler" property instead. The rotation and euler properties are linked, changing one of them will change the backing data of the other.
Similar to go.set, you can also use gui.set for setting material constant values on a node. E.g if a material has specified a constant called <code>tint</code> in
the .material file, you can use gui.set to set the value of that constant by calling <code>gui.set(node, "tint", vmath.vec4(1,0,0,1))</code>, or <code>gui.set(node, "matrix", vmath.matrix4())</code>
if the constant is a matrix. Arrays are also supported by gui.set - to set an array constant, you need to pass in an options table with the 'index' key set.
If the material has a constant array called 'tint_array' specified in the material, you can use <code>gui.set(node, "tint_array", vmath.vec4(1,0,0,1), { index = 4})</code> to set the fourth array element to a different value.,
        ["name"] = gui.set,
        ["error"] = ,
        ["brief"] = sets the named property of a specified gui node,
        ["type"] = FUNCTION,
        ["examples"] = Updates the position property on an existing node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_box_node&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">node_position</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;position.x&quot;</span><span class="p">,</span> <span class="n">node_position</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">128</span><span class="p">)</span>
</code></pre></div>

Updates the rotation property on an existing node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_box_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;rotation&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="nb">math.rad</span><span class="p">(</span><span class="mi">45</span><span class="p">)))</span>
<span class="c1">-- this is equivalent to:</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;euler.z&quot;</span><span class="p">,</span> <span class="mi">45</span><span class="p">)</span>
<span class="c1">-- or using the entire vector:</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;euler&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">45</span><span class="p">))</span>
<span class="c1">-- or using the set_rotation</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_rotation</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">45</span><span class="p">))</span>
</code></pre></div>

Sets various material constants for a node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_box_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;tint&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="c1">-- matrix4 is also supported</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;light_matrix&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4</span><span class="p">())</span>
<span class="c1">-- update a constant in an array at position 4. the array is specified in the shader as:</span>
<span class="c1">-- uniform vec4 tint_array[4]; // lua is 1 based, shader is 0 based</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;tint_array&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">{</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">})</span>
<span class="c1">-- update a matrix constant in an array at position 4. the array is specified in the shader as:</span>
<span class="c1">-- uniform mat4 light_matrix_array[4];</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;light_matrix_array&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4</span><span class="p">(),</span> <span class="p">{</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">})</span>
<span class="c1">-- update a sub-element in a constant</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;tint.x&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="c1">-- update a sub-element in an array constant at position 4</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;tint_array.x&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="n">index</span> <span class="o">=</span> <span class="mi">4</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = the node to retrieve the id from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Retrieve the index of the specified node among its siblings.
The index defines the order in which a node appear in a GUI scene.
Higher index means the node is drawn on top of lower indexed nodes.,
        ["name"] = gui.get_index,
        ["error"] = ,
        ["brief"] = gets the index of the specified node,
        ["type"] = FUNCTION,
        ["examples"] = Compare the index order of two sibling nodes:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node1</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node_1&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">node2</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node_2&quot;</span><span class="p">)</span>

<span class="kr">if</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_index</span><span class="p">(</span><span class="n">node1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_index</span><span class="p">(</span><span class="n">node2</span><span class="p">)</span> <span class="kr">then</span>
    <span class="c1">-- node1 is drawn below node2</span>
<span class="kr">else</span>
    <span class="c1">-- node2 is drawn below node1</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = index,
            ["doc"] = the index of the node,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to delete,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Deletes the specified node. Any child nodes of the specified node will be
recursively deleted.,
        ["name"] = gui.delete_node,
        ["error"] = ,
        ["brief"] = deletes a node,
        ["type"] = FUNCTION,
        ["examples"] = Delete a particular node and any child nodes it might have:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">delete_node</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = once forward,
        ["name"] = gui.PLAYBACK_ONCE_FORWARD,
        ["error"] = ,
        ["brief"] = once forward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = once backward,
        ["name"] = gui.PLAYBACK_ONCE_BACKWARD,
        ["error"] = ,
        ["brief"] = once backward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = once forward and then backward,
        ["name"] = gui.PLAYBACK_ONCE_PINGPONG,
        ["error"] = ,
        ["brief"] = once forward and then backward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loop forward,
        ["name"] = gui.PLAYBACK_LOOP_FORWARD,
        ["error"] = ,
        ["brief"] = loop forward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = loop backward,
        ["name"] = gui.PLAYBACK_LOOP_BACKWARD,
        ["error"] = ,
        ["brief"] = loop backward,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ping pong loop,
        ["name"] = gui.PLAYBACK_LOOP_PINGPONG,
        ["error"] = ,
        ["brief"] = ping pong loop,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = linear interpolation,
        ["name"] = gui.EASING_LINEAR,
        ["error"] = ,
        ["brief"] = linear interpolation,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-quadratic,
        ["name"] = gui.EASING_INQUAD,
        ["error"] = ,
        ["brief"] = in-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-quadratic,
        ["name"] = gui.EASING_OUTQUAD,
        ["error"] = ,
        ["brief"] = out-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-quadratic,
        ["name"] = gui.EASING_INOUTQUAD,
        ["error"] = ,
        ["brief"] = in-out-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-quadratic,
        ["name"] = gui.EASING_OUTINQUAD,
        ["error"] = ,
        ["brief"] = out-in-quadratic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-cubic,
        ["name"] = gui.EASING_INCUBIC,
        ["error"] = ,
        ["brief"] = in-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-cubic,
        ["name"] = gui.EASING_OUTCUBIC,
        ["error"] = ,
        ["brief"] = out-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-cubic,
        ["name"] = gui.EASING_INOUTCUBIC,
        ["error"] = ,
        ["brief"] = in-out-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-cubic,
        ["name"] = gui.EASING_OUTINCUBIC,
        ["error"] = ,
        ["brief"] = out-in-cubic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-quartic,
        ["name"] = gui.EASING_INQUART,
        ["error"] = ,
        ["brief"] = in-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-quartic,
        ["name"] = gui.EASING_OUTQUART,
        ["error"] = ,
        ["brief"] = out-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-quartic,
        ["name"] = gui.EASING_INOUTQUART,
        ["error"] = ,
        ["brief"] = in-out-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-quartic,
        ["name"] = gui.EASING_OUTINQUART,
        ["error"] = ,
        ["brief"] = out-in-quartic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-quintic,
        ["name"] = gui.EASING_INQUINT,
        ["error"] = ,
        ["brief"] = in-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-quintic,
        ["name"] = gui.EASING_OUTQUINT,
        ["error"] = ,
        ["brief"] = out-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-quintic,
        ["name"] = gui.EASING_INOUTQUINT,
        ["error"] = ,
        ["brief"] = in-out-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-quintic,
        ["name"] = gui.EASING_OUTINQUINT,
        ["error"] = ,
        ["brief"] = out-in-quintic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-sine,
        ["name"] = gui.EASING_INSINE,
        ["error"] = ,
        ["brief"] = in-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-sine,
        ["name"] = gui.EASING_OUTSINE,
        ["error"] = ,
        ["brief"] = out-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-sine,
        ["name"] = gui.EASING_INOUTSINE,
        ["error"] = ,
        ["brief"] = in-out-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-sine,
        ["name"] = gui.EASING_OUTINSINE,
        ["error"] = ,
        ["brief"] = out-in-sine,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-exponential,
        ["name"] = gui.EASING_INEXPO,
        ["error"] = ,
        ["brief"] = in-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-exponential,
        ["name"] = gui.EASING_OUTEXPO,
        ["error"] = ,
        ["brief"] = out-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-exponential,
        ["name"] = gui.EASING_INOUTEXPO,
        ["error"] = ,
        ["brief"] = in-out-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-exponential,
        ["name"] = gui.EASING_OUTINEXPO,
        ["error"] = ,
        ["brief"] = out-in-exponential,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-circlic,
        ["name"] = gui.EASING_INCIRC,
        ["error"] = ,
        ["brief"] = in-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-circlic,
        ["name"] = gui.EASING_OUTCIRC,
        ["error"] = ,
        ["brief"] = out-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-circlic,
        ["name"] = gui.EASING_INOUTCIRC,
        ["error"] = ,
        ["brief"] = in-out-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [47] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-circlic,
        ["name"] = gui.EASING_OUTINCIRC,
        ["error"] = ,
        ["brief"] = out-in-circlic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [48] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-elastic,
        ["name"] = gui.EASING_INELASTIC,
        ["error"] = ,
        ["brief"] = in-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [49] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-elastic,
        ["name"] = gui.EASING_OUTELASTIC,
        ["error"] = ,
        ["brief"] = out-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [50] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-elastic,
        ["name"] = gui.EASING_INOUTELASTIC,
        ["error"] = ,
        ["brief"] = in-out-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [51] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-elastic,
        ["name"] = gui.EASING_OUTINELASTIC,
        ["error"] = ,
        ["brief"] = out-in-elastic,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [52] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-back,
        ["name"] = gui.EASING_INBACK,
        ["error"] = ,
        ["brief"] = in-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [53] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-back,
        ["name"] = gui.EASING_OUTBACK,
        ["error"] = ,
        ["brief"] = out-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [54] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-back,
        ["name"] = gui.EASING_INOUTBACK,
        ["error"] = ,
        ["brief"] = in-out-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [55] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-back,
        ["name"] = gui.EASING_OUTINBACK,
        ["error"] = ,
        ["brief"] = out-in-back,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [56] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-bounce,
        ["name"] = gui.EASING_INBOUNCE,
        ["error"] = ,
        ["brief"] = in-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [57] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-bounce,
        ["name"] = gui.EASING_OUTBOUNCE,
        ["error"] = ,
        ["brief"] = out-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [58] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = in-out-bounce,
        ["name"] = gui.EASING_INOUTBOUNCE,
        ["error"] = ,
        ["brief"] = in-out-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [59] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = out-in-bounce,
        ["name"] = gui.EASING_OUTINBOUNCE,
        ["error"] = ,
        ["brief"] = out-in-bounce,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [60] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to animate,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = constant,
            },
            ["name"] = property,
            ["doc"] = property to animate
<ul>
<li><code>"position"</code></li>
<li><code>"rotation"</code></li>
<li><code>"euler"</code></li>
<li><code>"scale"</code></li>
<li><code>"color"</code></li>
<li><code>"outline"</code></li>
<li><code>"shadow"</code></li>
<li><code>"size"</code></li>
<li><code>"fill_angle"</code> (pie)</li>
<li><code>"inner_radius"</code> (pie)</li>
<li><code>"leading"</code> (text)</li>
<li><code>"tracking"</code> (text)</li>
<li><code>"slice9"</code> (slice9)</li>
</ul>
The following property constants are defined equaling the corresponding property string names.
<ul>
<li><code>gui.PROP_POSITION</code></li>
<li><code>gui.PROP_ROTATION</code></li>
<li><code>gui.PROP_EULER</code></li>
<li><code>gui.PROP_SCALE</code></li>
<li><code>gui.PROP_COLOR</code></li>
<li><code>gui.PROP_OUTLINE</code></li>
<li><code>gui.PROP_SHADOW</code></li>
<li><code>gui.PROP_SIZE</code></li>
<li><code>gui.PROP_FILL_ANGLE</code></li>
<li><code>gui.PROP_INNER_RADIUS</code></li>
<li><code>gui.PROP_LEADING</code></li>
<li><code>gui.PROP_TRACKING</code></li>
<li><code>gui.PROP_SLICE9</code></li>
</ul>,
          },
          [3] = {
            ["types"] = {
              [1] = number,
              [2] = vector3,
              [3] = vector4,
              [4] = quaternion,
            },
            ["name"] = to,
            ["doc"] = target property value,
          },
          [4] = {
            ["types"] = {
              [1] = constant,
              [2] = vector,
            },
            ["name"] = easing,
            ["doc"] = easing to use during animation.
     Either specify one of the <code>gui.EASING_*</code> constants or provide a
     <span class="type">vector</span> with a custom curve. See the <a href="/manuals/animation#_easing">animation guide</a> for more information.,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = duration,
            ["doc"] = duration of the animation in seconds.,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [delay],
            ["doc"] = delay before the animation starts in seconds.,
          },
          [7] = {
            ["types"] = {
              [1] = function(self, node),
            },
            ["name"] = [complete_function],
            ["doc"] = function to call when the
     animation has completed,
          },
          [8] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = [playback],
            ["doc"] = playback mode
<ul>
<li><code>gui.PLAYBACK_ONCE_FORWARD</code></li>
<li><code>gui.PLAYBACK_ONCE_BACKWARD</code></li>
<li><code>gui.PLAYBACK_ONCE_PINGPONG</code></li>
<li><code>gui.PLAYBACK_LOOP_FORWARD</code></li>
<li><code>gui.PLAYBACK_LOOP_BACKWARD</code></li>
<li><code>gui.PLAYBACK_LOOP_PINGPONG</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This starts an animation of a node property according to the specified parameters.
If the node property is already being animated, that animation will be canceled and
replaced by the new one. Note however that several different node properties
can be animated simultaneously. Use <code>gui.cancel_animation</code> to stop the animation
before it has completed.
Composite properties of type vector3, vector4 or quaternion
also expose their sub-components (x, y, z and w).
You can address the components individually by suffixing the name with a dot '.'
and the name of the component.
For instance, <code>"position.x"</code> (the position x coordinate) or <code>"color.w"</code>
(the color alpha value).
If a <code>complete_function</code> (Lua function) is specified, that function will be called
when the animation has completed.
By starting a new animation in that function, several animations can be sequenced
together. See the examples below for more information.,
        ["name"] = gui.animate,
        ["error"] = ,
        ["brief"] = animates a node property,
        ["type"] = FUNCTION,
        ["examples"] = How to start a simple color animation, where the node fades in to white during 0.5 seconds:
<div class="codehilite"><pre><span></span><code><span class="n">gui</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="c1">-- node is fully transparent</span>
<span class="n">gui</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">gui</span><span class="p">.</span><span class="n">PROP_COLOR</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">gui</span><span class="p">.</span><span class="n">EASING_INOUTQUAD</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span> <span class="c1">-- start animation</span>
</code></pre></div>

How to start a sequenced animation where the node fades in to white during 0.5 seconds, stays visible for 2 seconds and then fades out:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">on_animation_done</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
    <span class="c1">-- fade out node, but wait 2 seconds before the animation starts</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">gui</span><span class="p">.</span><span class="n">PROP_COLOR</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">gui</span><span class="p">.</span><span class="n">EASING_OUTQUAD</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- fetch the node we want to animate</span>
    <span class="kd">local</span> <span class="n">my_node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
    <span class="c1">-- node is initially set to fully transparent</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">my_node</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
    <span class="c1">-- animate the node immediately and call on_animation_done when the animation has completed</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">my_node</span><span class="p">,</span> <span class="n">gui</span><span class="p">.</span><span class="n">PROP_COLOR</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">gui</span><span class="p">.</span><span class="n">EASING_INOUTQUAD</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">on_animation_done</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

How to animate a node's y position using a crazy custom easing curve:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">values</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                     <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                     <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                     <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                     <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                     <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                     <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                     <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;box&quot;</span><span class="p">)</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;position.y&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">vec</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">gui</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [61] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node that should have its animation canceled,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = constant,
            },
            ["name"] = property,
            ["doc"] = property for which the animation should be canceled
<ul>
<li><code>"position"</code></li>
<li><code>"rotation"</code></li>
<li><code>"euler"</code></li>
<li><code>"scale"</code></li>
<li><code>"color"</code></li>
<li><code>"outline"</code></li>
<li><code>"shadow"</code></li>
<li><code>"size"</code></li>
<li><code>"fill_angle"</code> (pie)</li>
<li><code>"inner_radius"</code> (pie)</li>
<li><code>"leading"</code> (text)</li>
<li><code>"tracking"</code> (text)</li>
<li><code>"slice9"</code> (slice9)</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If an animation of the specified node is currently running (started by <code>gui.animate</code>), it will immediately be canceled.,
        ["name"] = gui.cancel_animation,
        ["error"] = ,
        ["brief"] = cancels an ongoing animation,
        ["type"] = FUNCTION,
        ["examples"] = Start an animation of the position property of a node, then cancel parts of
the animation:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
<span class="c1">-- animate to new position</span>
<span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;position&quot;</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_LINEAR</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">...</span>
<span class="c1">-- cancel animation of the x component.</span>
<span class="n">gui</span><span class="p">.</span><span class="n">cancel_animation</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;position.x&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [62] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = pos,
            ["doc"] = node position,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = size,
            ["doc"] = node size,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dynamically create a new box node.,
        ["name"] = gui.new_box_node,
        ["error"] = ,
        ["brief"] = creates a new box node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = new box node,
          },
        },
      },
      [63] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = pos,
            ["doc"] = node position,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = text,
            ["doc"] = node text,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dynamically create a new text node.,
        ["name"] = gui.new_text_node,
        ["error"] = ,
        ["brief"] = creates a new text node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = new text node,
          },
        },
      },
      [64] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = pos,
            ["doc"] = node position,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = size,
            ["doc"] = node size,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dynamically create a new pie node.,
        ["name"] = gui.new_pie_node,
        ["error"] = ,
        ["brief"] = creates a new pie node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = new pie node,
          },
        },
      },
      [65] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the text,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the text value of a text node. This is only useful for text nodes.,
        ["name"] = gui.get_text,
        ["error"] = ,
        ["brief"] = gets the node text,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = text,
            ["doc"] = text value,
          },
        },
      },
      [66] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set text for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = number,
            },
            ["name"] = text,
            ["doc"] = text to set,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the text value of a text node. This is only useful for text nodes.,
        ["name"] = gui.set_text,
        ["error"] = ,
        ["brief"] = sets the node text,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [67] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the line-break for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns whether a text node is in line-break mode or not.
This is only useful for text nodes.,
        ["name"] = gui.get_line_break,
        ["error"] = ,
        ["brief"] = get line-break mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = line_break,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
      },
      [68] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set line-break for,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = line_break,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the line-break mode on a text node.
This is only useful for text nodes.,
        ["name"] = gui.set_line_break,
        ["error"] = ,
        ["brief"] = set line-break mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [69] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the blend mode,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the blend mode of a node.
Blend mode defines how the node will be blended with the background.,
        ["name"] = gui.get_blend_mode,
        ["error"] = ,
        ["brief"] = gets the node blend mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = blend_mode,
            ["doc"] = blend mode
<ul>
<li><code>gui.BLEND_ALPHA</code></li>
<li><code>gui.BLEND_ADD</code></li>
<li><code>gui.BLEND_ADD_ALPHA</code></li>
<li><code>gui.BLEND_MULT</code></li>
<li><code>gui.BLEND_SCREEN</code></li>
</ul>,
          },
        },
      },
      [70] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set blend mode for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = blend_mode,
            ["doc"] = blend mode to set
<ul>
<li><code>gui.BLEND_ALPHA</code></li>
<li><code>gui.BLEND_ADD</code></li>
<li><code>gui.BLEND_ADD_ALPHA</code></li>
<li><code>gui.BLEND_MULT</code></li>
<li><code>gui.BLEND_SCREEN</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the blend mode of a node.
Blend mode defines how the node will be blended with the background.,
        ["name"] = gui.set_blend_mode,
        ["error"] = ,
        ["brief"] = sets node blend mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [71] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get texture from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the texture of a node.
This is currently only useful for box or pie nodes.
The texture must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.get_texture,
        ["error"] = ,
        ["brief"] = gets node texture,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = texture,
            ["doc"] = texture id,
          },
        },
      },
      [72] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set texture for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = texture,
            ["doc"] = texture id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the texture on a box or pie node. The texture must be mapped to
the gui scene in the gui editor. The function points out which texture
the node should render from. If the texture is an atlas, further
information is needed to select which image/animation in the atlas
to render. In such cases, use <code>gui.play_flipbook()</code> in
addition to this function.,
        ["name"] = gui.set_texture,
        ["error"] = ,
        ["brief"] = sets the node texture,
        ["type"] = FUNCTION,
        ["examples"] = To set a texture (or animation) from an atlas:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;box_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;my_atlas&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">play_flipbook</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;image&quot;</span><span class="p">)</span>
</code></pre></div>

Set a dynamically created texture to a node. Note that there is only
one texture image in this case so <code>gui.set_texture()</code> is
sufficient.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">200</span>
<span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">300</span>
<span class="c1">-- A nice orange. String with the RGB values.</span>
<span class="kd">local</span> <span class="n">orange</span> <span class="o">=</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xff</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x80</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x10</span><span class="p">)</span>
<span class="c1">-- Create the texture. Repeat the color string for each pixel.</span>
<span class="kr">if</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_texture</span><span class="p">(</span><span class="s2">&quot;orange_tx&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="s2">&quot;rgb&quot;</span><span class="p">,</span> <span class="nb">string.rep</span><span class="p">(</span><span class="n">orange</span><span class="p">,</span> <span class="n">w</span> <span class="o">*</span> <span class="n">h</span><span class="p">))</span> <span class="kr">then</span>
    <span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;box_node&quot;</span><span class="p">)</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;orange_tx&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [73] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get flipbook animation from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get node flipbook animation.,
        ["name"] = gui.get_flipbook,
        ["error"] = ,
        ["brief"] = gets the node flipbook animation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = animation,
            ["doc"] = animation id,
          },
        },
      },
      [74] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set animation for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = animation,
            ["doc"] = animation id,
          },
          [3] = {
            ["types"] = {
              [1] = function(self, node),
            },
            ["name"] = [complete_function],
            ["doc"] = optional function to call when the animation has completed
<dl>
<dt><code>self</code></dt>
<dd>
<span class="type">object</span> The current object.
</dd>
<dt><code>node</code></dt>
<dd>
<span class="type">node</span> The node that is animated.
</dd>
</dl>,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [play_properties],
            ["doc"] = optional table with properties
<dl>
<dt><code>offset</code></dt>
<dd><span class="type">number</span> The normalized initial value of the animation cursor when the animation starts playing</dd>
<dt><code>playback_rate</code></dt>
<dd><span class="type">number</span> The rate with which the animation will be played. Must be positive</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Play flipbook animation on a box or pie node.
The current node texture must contain the animation.
Use this function to set one-frame still images on the node.,
        ["name"] = gui.play_flipbook,
        ["error"] = ,
        ["brief"] = play node flipbook animation,
        ["type"] = FUNCTION,
        ["examples"] = Set the texture of a node to a flipbook animation from an atlas:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">anim_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
    <span class="c1">-- Take action after animation has played.</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- Create a new node and set the texture to a flipbook animation</span>
    <span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;button_node&quot;</span><span class="p">)</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;gui_sprites&quot;</span><span class="p">)</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">play_flipbook</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;animated_button&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Set the texture of a node to an image from an atlas:
<div class="codehilite"><pre><span></span><code><span class="c1">-- Create a new node and set the texture to a &quot;button.png&quot; from atlas</span>
<span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;button_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;gui_sprites&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">play_flipbook</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;button&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [75] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node cancel flipbook animation for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Cancels any running flipbook animation on the specified node.,
        ["name"] = gui.cancel_flipbook,
        ["error"] = ,
        ["brief"] = cancel a node flipbook animation,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;anim_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">cancel_flipbook</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [76] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = texture_id,
            ["doc"] = texture id,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = texture width,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = texture height,
          },
          [4] = {
            ["types"] = {
              [1] = string,
              [2] = constant,
            },
            ["name"] = type,
            ["doc"] = texture type
<ul>
<li><code>"rgb"</code> - RGB</li></li>
<li><code>"rgba"</code> - RGBA</li></li>
<li><code>"l"</code> - LUMINANCE</li></li>
</ul>,
          },
          [5] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = texture data,
          },
          [6] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flip,
            ["doc"] = flip texture vertically,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dynamically create a new texture.,
        ["name"] = gui.new_texture,
        ["error"] = ,
        ["brief"] = create new texture,
        ["type"] = FUNCTION,
        ["examples"] = How to create a texture and apply it to a new box node:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
     <span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">200</span>
     <span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">300</span>

     <span class="c1">-- A nice orange. String with the RGB values.</span>
     <span class="kd">local</span> <span class="n">orange</span> <span class="o">=</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xff</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x80</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x10</span><span class="p">)</span>

     <span class="c1">-- Create the texture. Repeat the color string for each pixel.</span>
     <span class="kd">local</span> <span class="n">ok</span><span class="p">,</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_texture</span><span class="p">(</span><span class="s2">&quot;orange_tx&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="s2">&quot;rgb&quot;</span><span class="p">,</span> <span class="nb">string.rep</span><span class="p">(</span><span class="n">orange</span><span class="p">,</span> <span class="n">w</span> <span class="o">*</span> <span class="n">h</span><span class="p">))</span>
     <span class="kr">if</span> <span class="n">ok</span> <span class="kr">then</span>
         <span class="c1">-- Create a box node and apply the texture to it.</span>
         <span class="kd">local</span> <span class="n">n</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_box_node</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
         <span class="n">gui</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s2">&quot;orange_tx&quot;</span><span class="p">)</span>
     <span class="kr">else</span>
         <span class="c1">-- Could not create texture for some reason...</span>
         <span class="kr">if</span> <span class="n">reason</span> <span class="o">==</span> <span class="n">gui</span><span class="p">.</span><span class="n">RESULT_TEXTURE_ALREADY_EXISTS</span> <span class="kr">then</span>
             <span class="p">...</span>
         <span class="kr">else</span>
             <span class="p">...</span>
         <span class="kr">end</span>
     <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = success,
            ["doc"] = texture creation was successful,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = code,
            ["doc"] = one of the gui.RESULT_* codes if unsuccessful,
          },
        },
      },
      [77] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = texture,
            ["doc"] = texture id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Delete a dynamically created texture.,
        ["name"] = gui.delete_texture,
        ["error"] = ,
        ["brief"] = delete texture,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
     <span class="c1">-- Create a texture.</span>
     <span class="kr">if</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_texture</span><span class="p">(</span><span class="s2">&quot;temp_tx&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&quot;rgb&quot;</span><span class="p">,</span> <span class="nb">string.rep</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\0</span><span class="s1">&#39;</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">3</span><span class="p">))</span> <span class="kr">then</span>
         <span class="c1">-- Do something with the texture.</span>
         <span class="p">...</span>

         <span class="c1">-- Delete the texture</span>
         <span class="n">gui</span><span class="p">.</span><span class="n">delete_texture</span><span class="p">(</span><span class="s2">&quot;temp_tx&quot;</span><span class="p">)</span>
     <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [78] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = texture,
            ["doc"] = texture id,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = texture width,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = texture height,
          },
          [4] = {
            ["types"] = {
              [1] = string,
              [2] = constant,
            },
            ["name"] = type,
            ["doc"] = texture type
<ul>
  <li><code>"rgb"</code> - RGB</li>
  <li><code>"rgba"</code> - RGBA</li>
  <li><code>"l"</code> - LUMINANCE</li>
</ul>,
          },
          [5] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = texture data,
          },
          [6] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flip,
            ["doc"] = flip texture vertically,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the texture buffer data for a dynamically created texture.,
        ["name"] = gui.set_texture_data,
        ["error"] = ,
        ["brief"] = set the buffer data for a texture,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
     <span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">200</span>
     <span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">300</span>

     <span class="c1">-- Create a dynamic texture, all white.</span>
     <span class="kr">if</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_texture</span><span class="p">(</span><span class="s2">&quot;dynamic_tx&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="s2">&quot;rgb&quot;</span><span class="p">,</span> <span class="nb">string.rep</span><span class="p">(</span><span class="nb">string.char</span><span class="p">(</span><span class="mh">0xff</span><span class="p">),</span> <span class="n">w</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="mi">3</span><span class="p">))</span> <span class="kr">then</span>
         <span class="c1">-- Create a box node and apply the texture to it.</span>
         <span class="kd">local</span> <span class="n">n</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_box_node</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
         <span class="n">gui</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s2">&quot;dynamic_tx&quot;</span><span class="p">)</span>

         <span class="p">...</span>

         <span class="c1">-- Change the data in the texture to a nice orange.</span>
         <span class="kd">local</span> <span class="n">orange</span> <span class="o">=</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xff</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x80</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x10</span><span class="p">)</span>
         <span class="kr">if</span> <span class="n">gui</span><span class="p">.</span><span class="n">set_texture_data</span><span class="p">(</span><span class="s2">&quot;dynamic_tx&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="s2">&quot;rgb&quot;</span><span class="p">,</span> <span class="nb">string.rep</span><span class="p">(</span><span class="n">orange</span><span class="p">,</span> <span class="n">w</span> <span class="o">*</span> <span class="n">h</span><span class="p">))</span> <span class="kr">then</span>
             <span class="c1">-- Go on and to more stuff</span>
             <span class="p">...</span>
         <span class="kr">end</span>
     <span class="kr">else</span>
         <span class="c1">-- Something went wrong</span>
         <span class="p">...</span>
     <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = success,
            ["doc"] = setting the data was successful,
          },
        },
      },
      [79] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the material for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the material of a node.
The material must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.get_material,
        ["error"] = ,
        ["brief"] = gets the assigned node material,
        ["type"] = FUNCTION,
        ["examples"] = Getting the material for a node, and assign it to another node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node1</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">node2</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;other_node&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">node1_material</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_material</span><span class="p">(</span><span class="n">node1</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_material</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="n">node1_material</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = materal,
            ["doc"] = material id,
          },
        },
      },
      [80] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set material for,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = material,
            ["doc"] = material id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the material on a node. The material must be mapped to the gui scene in the gui editor,
and assigning a material is supported for all node types. To set the default material that
is assigned to the gui scene node, use <code>gui.reset_material(node_id)</code> instead.,
        ["name"] = gui.set_material,
        ["error"] = ,
        ["brief"] = sets the node material,
        ["type"] = FUNCTION,
        ["examples"] = Assign an existing material to a node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_material</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s2">&quot;my_material&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [81] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to reset the material for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets the node material to the material assigned in the gui scene.,
        ["name"] = gui.reset_material,
        ["error"] = ,
        ["brief"] = resets the node material,
        ["type"] = FUNCTION,
        ["examples"] = Resetting the material for a node:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">)</span>
<span class="n">gui</span><span class="p">.</span><span class="n">reset_material</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [82] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the font,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.get_font,
        ["error"] = ,
        ["brief"] = gets the node font,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = font,
            ["doc"] = font id,
          },
        },
      },
      [83] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = font_name,
            ["doc"] = font of which to get the path hash,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.get_font_resource,
        ["error"] = ,
        ["brief"] = gets the node font resource,
        ["type"] = FUNCTION,
        ["examples"] = Get the text metrics for a text
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">font_name</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_font</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">font</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_font_resource</span><span class="p">(</span><span class="n">font_name</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">metrics</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_text_metrics</span><span class="p">(</span><span class="n">font</span><span class="p">,</span> <span class="s2">&quot;The quick brown fox</span><span class="se">\n</span><span class="s2"> jumps over the lazy dog&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = hash,
            ["doc"] = path hash to resource,
          },
        },
      },
      [84] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set the font,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = font,
            ["doc"] = font id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful for text nodes.
The font must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.set_font,
        ["error"] = ,
        ["brief"] = sets the node font,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [85] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the layer,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The layer must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.get_layer,
        ["error"] = ,
        ["brief"] = gets the node layer,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = layer,
            ["doc"] = layer id,
          },
        },
      },
      [86] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set the layer,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = layer,
            ["doc"] = layer id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The layer must be mapped to the gui scene in the gui editor.,
        ["name"] = gui.set_layer,
        ["error"] = ,
        ["brief"] = sets the node layer,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [87] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = gets the scene current layout,
        ["name"] = gui.get_layout,
        ["error"] = ,
        ["brief"] = gets the scene current layout,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = layout,
            ["doc"] = layout id,
          },
        },
      },
      [88] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the clipping mode,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Clipping mode defines how the node will clip it's children nodes,
        ["name"] = gui.get_clipping_mode,
        ["error"] = ,
        ["brief"] = gets the node clipping mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = clipping_mode,
            ["doc"] = clipping mode
<ul>
  <li><code>gui.CLIPPING_MODE_NONE</code></li>
  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>
</ul>,
          },
        },
      },
      [89] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set clipping mode for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = clipping_mode,
            ["doc"] = clipping mode to set
<ul>
  <li><code>gui.CLIPPING_MODE_NONE</code></li>
  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Clipping mode defines how the node will clip it's children nodes,
        ["name"] = gui.set_clipping_mode,
        ["error"] = ,
        ["brief"] = sets node clipping mode state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [90] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the clipping visibility state,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If node is set as visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.,
        ["name"] = gui.get_clipping_visible,
        ["error"] = ,
        ["brief"] = gets node clipping visibility state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = visible,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
      },
      [91] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set clipping visibility for,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = visible,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If node is set as an visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.,
        ["name"] = gui.set_clipping_visible,
        ["error"] = ,
        ["brief"] = sets node clipping visibility,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [92] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the clipping inverted state,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.,
        ["name"] = gui.get_clipping_inverted,
        ["error"] = ,
        ["brief"] = gets node clipping inverted state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = inverted,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
      },
      [93] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set clipping inverted state for,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = inverted,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.,
        ["name"] = gui.set_clipping_inverted,
        ["error"] = ,
        ["brief"] = sets node clipping inversion,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [94] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get x-anchor from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The x-anchor specifies how the node is moved when the game is run in a different resolution.,
        ["name"] = gui.get_xanchor,
        ["error"] = ,
        ["brief"] = gets the x-anchor of a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = anchor,
            ["doc"] = anchor constant
<ul>
<li><code>gui.ANCHOR_NONE</code></li>
<li><code>gui.ANCHOR_LEFT</code></li>
<li><code>gui.ANCHOR_RIGHT</code></li>
</ul>,
          },
        },
      },
      [95] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set x-anchor for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = anchor,
            ["doc"] = anchor constant
<ul>
<li><code>gui.ANCHOR_NONE</code></li>
<li><code>gui.ANCHOR_LEFT</code></li>
<li><code>gui.ANCHOR_RIGHT</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The x-anchor specifies how the node is moved when the game is run in a different resolution.,
        ["name"] = gui.set_xanchor,
        ["error"] = ,
        ["brief"] = sets the x-anchor of a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [96] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get y-anchor from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The y-anchor specifies how the node is moved when the game is run in a different resolution.,
        ["name"] = gui.get_yanchor,
        ["error"] = ,
        ["brief"] = gets the y-anchor of a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = anchor,
            ["doc"] = anchor constant
<ul>
<li><code>gui.ANCHOR_NONE</code></li>
<li><code>gui.ANCHOR_TOP</code></li>
<li><code>gui.ANCHOR_BOTTOM</code></li>
</ul>,
          },
        },
      },
      [97] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set y-anchor for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = anchor,
            ["doc"] = anchor constant
<ul>
<li><code>gui.ANCHOR_NONE</code></li>
<li><code>gui.ANCHOR_TOP</code></li>
<li><code>gui.ANCHOR_BOTTOM</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The y-anchor specifies how the node is moved when the game is run in a different resolution.,
        ["name"] = gui.set_yanchor,
        ["error"] = ,
        ["brief"] = sets the y-anchor of a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [98] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get pivot from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The pivot specifies how the node is drawn and rotated from its position.,
        ["name"] = gui.get_pivot,
        ["error"] = ,
        ["brief"] = gets the pivot of a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = pivot,
            ["doc"] = pivot constant
<ul>
  <li><code>gui.PIVOT_CENTER</code></li>
  <li><code>gui.PIVOT_N</code></li>
  <li><code>gui.PIVOT_NE</code></li>
  <li><code>gui.PIVOT_E</code></li>
  <li><code>gui.PIVOT_SE</code></li>
  <li><code>gui.PIVOT_S</code></li>
  <li><code>gui.PIVOT_SW</code></li>
  <li><code>gui.PIVOT_W</code></li>
  <li><code>gui.PIVOT_NW</code></li>
</ul>,
          },
        },
      },
      [99] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set pivot for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = pivot,
            ["doc"] = pivot constant
<ul>
  <li><code>gui.PIVOT_CENTER</code></li>
  <li><code>gui.PIVOT_N</code></li>
  <li><code>gui.PIVOT_NE</code></li>
  <li><code>gui.PIVOT_E</code></li>
  <li><code>gui.PIVOT_SE</code></li>
  <li><code>gui.PIVOT_S</code></li>
  <li><code>gui.PIVOT_SW</code></li>
  <li><code>gui.PIVOT_W</code></li>
  <li><code>gui.PIVOT_NW</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The pivot specifies how the node is drawn and rotated from its position.,
        ["name"] = gui.set_pivot,
        ["error"] = ,
        ["brief"] = sets the pivot of a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [100] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the scene width.,
        ["name"] = gui.get_width,
        ["error"] = ,
        ["brief"] = gets the scene width,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = scene width,
          },
        },
      },
      [101] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the scene height.,
        ["name"] = gui.get_height,
        ["error"] = ,
        ["brief"] = gets the scene height,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = scene height,
          },
        },
      },
      [102] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to manipulate,
          },
          [2] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = values,
            ["doc"] = new values,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the slice9 configuration values for the node.,
        ["name"] = gui.set_slice9,
        ["error"] = ,
        ["brief"] = set the slice9 configuration for the node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [103] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to manipulate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the slice9 configuration values for the node.,
        ["name"] = gui.get_slice9,
        ["error"] = ,
        ["brief"] = get the slice9 values for the node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = values,
            ["doc"] = configuration values,
          },
        },
      },
      [104] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = pie node,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = vertices,
            ["doc"] = vertex count,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the number of generated vertices around the perimeter of a pie node.,
        ["name"] = gui.set_perimeter_vertices,
        ["error"] = ,
        ["brief"] = sets the number of generated vertices around the perimeter,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [105] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = pie node,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the number of generated vertices around the perimeter
of a pie node.,
        ["name"] = gui.get_perimeter_vertices,
        ["error"] = ,
        ["brief"] = gets the number of generated vertices around the perimeter,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = vertices,
            ["doc"] = vertex count,
          },
        },
      },
      [106] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the fill angle for,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = sector angle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the sector angle of a pie node.,
        ["name"] = gui.set_fill_angle,
        ["error"] = ,
        ["brief"] = sets the angle for the filled pie sector,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [107] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the fill angle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the sector angle of a pie node.,
        ["name"] = gui.get_fill_angle,
        ["error"] = ,
        ["brief"] = gets the angle for the filled pie sector,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = sector angle,
          },
        },
      },
      [108] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the inner radius for,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = radius,
            ["doc"] = inner radius,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the inner radius of a pie node.
The radius is defined along the x-axis.,
        ["name"] = gui.set_inner_radius,
        ["error"] = ,
        ["brief"] = sets the pie inner radius,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [109] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from where to get the inner radius,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the inner radius of a pie node.
The radius is defined along the x-axis.,
        ["name"] = gui.get_inner_radius,
        ["error"] = ,
        ["brief"] = gets the pie inner radius,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = radius,
            ["doc"] = inner radius,
          },
        },
      },
      [110] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set the outer bounds mode,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = bounds_mode,
            ["doc"] = the outer bounds mode of the pie node:
<ul>
<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>
<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the outer bounds mode for a pie node.,
        ["name"] = gui.set_outer_bounds,
        ["error"] = ,
        ["brief"] = sets the pie node outer bounds mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [111] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from where to get the outer bounds mode,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the outer bounds mode for a pie node.,
        ["name"] = gui.get_outer_bounds,
        ["error"] = ,
        ["brief"] = gets the pie outer bounds mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = bounds_mode,
            ["doc"] = the outer bounds mode of the pie node:
<ul>
<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>
<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>
</ul>,
          },
        },
      },
      [112] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set the leading,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = leading,
            ["doc"] = a scaling value for the line spacing (default=1),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the leading value for a text node. This value is used to
scale the line spacing of text.,
        ["name"] = gui.set_leading,
        ["error"] = ,
        ["brief"] = sets the leading of the text node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [113] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from where to get the leading,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the leading value for a text node.,
        ["name"] = gui.get_leading,
        ["error"] = ,
        ["brief"] = gets the leading of the text node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = leading,
            ["doc"] = leading scaling value (default=1),
          },
        },
      },
      [114] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set the tracking,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = tracking,
            ["doc"] = a scaling number for the letter spacing (default=0),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the tracking value of a text node. This value is used to
adjust the vertical spacing of characters in the text.,
        ["name"] = gui.set_tracking,
        ["error"] = ,
        ["brief"] = sets the tracking of the text node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [115] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from where to get the tracking,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the tracking value of a text node.,
        ["name"] = gui.get_tracking,
        ["error"] = ,
        ["brief"] = gets the tracking of the text node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = tracking,
            ["doc"] = tracking scaling number (default=0),
          },
        },
      },
      [116] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to be tested for picking,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x-coordinate (see <a href="#on_input">on_input</a> ),
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y-coordinate (see <a href="#on_input">on_input</a> ),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Tests whether a coordinate is within the bounding box of a
node.,
        ["name"] = gui.pick_node,
        ["error"] = ,
        ["brief"] = determines if the node is pickable by the supplied coordinates,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = pickable,
            ["doc"] = pick result,
          },
        },
      },
      [117] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to query,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = [recursive],
            ["doc"] = check hierarchy recursively,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns <code>true</code> if a node is enabled and <code>false</code> if it's not.
Disabled nodes are not rendered and animations acting on them are not evaluated.,
        ["name"] = gui.is_enabled,
        ["error"] = ,
        ["brief"] = returns if a node is enabled or not,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enabled,
            ["doc"] = whether the node is enabled or not,
          },
        },
      },
      [118] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to be enabled/disabled,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enabled,
            ["doc"] = whether the node should be enabled or not,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets a node to the disabled or enabled state.
Disabled nodes are not rendered and animations acting on them are not evaluated.,
        ["name"] = gui.set_enabled,
        ["error"] = ,
        ["brief"] = enables/disables a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [119] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to query,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns <code>true</code> if a node is visible and <code>false</code> if it's not.
Invisible nodes are not rendered.,
        ["name"] = gui.get_visible,
        ["error"] = ,
        ["brief"] = returns if a node is visible or not,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = visible,
            ["doc"] = whether the node is visible or not,
          },
        },
      },
      [120] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to be visible or not,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = visible,
            ["doc"] = whether the node should be visible or not,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set if a node should be visible or not. Only visible nodes are rendered.,
        ["name"] = gui.set_visible,
        ["error"] = ,
        ["brief"] = set visibility for a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [121] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the adjust mode (node),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the adjust mode of a node.
The adjust mode defines how the node will adjust itself to screen
resolutions that differs from the one in the project settings.,
        ["name"] = gui.get_adjust_mode,
        ["error"] = ,
        ["brief"] = gets the node adjust mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = adjust_mode,
            ["doc"] = the current adjust mode
<ul>
<li><code>gui.ADJUST_FIT</code></li>
<li><code>gui.ADJUST_ZOOM</code></li>
<li><code>gui.ADJUST_STRETCH</code></li>
</ul>,
          },
        },
      },
      [122] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set adjust mode for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = adjust_mode,
            ["doc"] = adjust mode to set
<ul>
<li><code>gui.ADJUST_FIT</code></li>
<li><code>gui.ADJUST_ZOOM</code></li>
<li><code>gui.ADJUST_STRETCH</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the adjust mode on a node.
The adjust mode defines how the node will adjust itself to screen
resolutions that differs from the one in the project settings.,
        ["name"] = gui.set_adjust_mode,
        ["error"] = ,
        ["brief"] = sets node adjust mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [123] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the size mode (node),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the size of a node.
The size mode defines how the node will adjust itself in size. Automatic
size mode alters the node size based on the node's content. Automatic size
mode works for Box nodes and Pie nodes which will both adjust their size
to match the assigned image. Particle fx and Text nodes will ignore
any size mode setting.,
        ["name"] = gui.get_size_mode,
        ["error"] = ,
        ["brief"] = gets the node size mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = size_mode,
            ["doc"] = the current size mode
<ul>
<li><code>gui.SIZE_MODE_MANUAL</code></li>
<li><code>gui.SIZE_MODE_AUTO</code></li>
</ul>,
          },
        },
      },
      [124] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set size mode for,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = size_mode,
            ["doc"] = size mode to set
<ul>
<li><code>gui.SIZE_MODE_MANUAL</code></li>
<li><code>gui.SIZE_MODE_AUTO</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the size mode of a node.
The size mode defines how the node will adjust itself in size. Automatic
size mode alters the node size based on the node's content. Automatic size
mode works for Box nodes and Pie nodes which will both adjust their size
to match the assigned image. Particle fx and Text nodes will ignore
any size mode setting.,
        ["name"] = gui.set_size_mode,
        ["error"] = ,
        ["brief"] = sets node size mode,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [125] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = to move,
          },
          [2] = {
            ["types"] = {
              [1] = node,
              [2] = nil,
            },
            ["name"] = reference,
            ["doc"] = reference node above which the first node should be moved,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Alters the ordering of the two supplied nodes by moving the first node
above the second.
If the second argument is <code>nil</code> the first node is moved to the top.,
        ["name"] = gui.move_above,
        ["error"] = ,
        ["brief"] = moves the first node above the second,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [126] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = to move,
          },
          [2] = {
            ["types"] = {
              [1] = node,
              [2] = nil,
            },
            ["name"] = reference,
            ["doc"] = reference node below which the first node should be moved,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Alters the ordering of the two supplied nodes by moving the first node
below the second.
If the second argument is <code>nil</code> the first node is moved to the bottom.,
        ["name"] = gui.move_below,
        ["error"] = ,
        ["brief"] = moves the first node below the second,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [127] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = the node from which to retrieve its parent,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the parent node of the specified node.
If the supplied node does not have a parent, <code>nil</code> is returned.,
        ["name"] = gui.get_parent,
        ["error"] = ,
        ["brief"] = gets the parent of the specified node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
              [2] = nil,
            },
            ["name"] = parent,
            ["doc"] = parent instance or <code>nil</code>,
          },
        },
      },
      [128] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set its parent,
          },
          [2] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = [parent],
            ["doc"] = parent node to set, pass <code>nil</code> to remove parent,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = [keep_scene_transform],
            ["doc"] = optional flag to make the scene position being perserved,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the parent node of the specified node.,
        ["name"] = gui.set_parent,
        ["error"] = ,
        ["brief"] = sets the parent of the node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [129] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to clone,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Make a clone instance of a node. The cloned node will be identical to the
original node, except the id which is generated as the string "node" plus
a sequential unsigned integer value.
This function does not clone the supplied node's children nodes.
Use gui.clone_tree for that purpose.,
        ["name"] = gui.clone,
        ["error"] = ,
        ["brief"] = clone a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = clone,
            ["doc"] = the cloned node,
          },
        },
      },
      [130] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = root node to clone,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Make a clone instance of a node and all its children.
Use gui.clone to clone a node excluding its children.,
        ["name"] = gui.clone_tree,
        ["error"] = ,
        ["brief"] = clone a node including its children,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = clones,
            ["doc"] = a table mapping node ids to the corresponding cloned nodes,
          },
        },
      },
      [131] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = root node to get node tree from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a node and all its children as a Lua table.,
        ["name"] = gui.get_tree,
        ["error"] = ,
        ["brief"] = get a node including its children,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = clones,
            ["doc"] = a table mapping node ids to the corresponding nodes,
          },
        },
      },
      [132] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets all nodes in the current GUI scene to their initial state.
The reset only applies to static node loaded from the scene.
Nodes that are created dynamically from script are not affected.,
        ["name"] = gui.reset_nodes,
        ["error"] = ,
        ["brief"] = resets all nodes to initial state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [133] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = order,
            ["doc"] = rendering order (0-15),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the order number for the current GUI scene.
The number dictates the sorting of the "gui" render predicate,
in other words in which order the scene will be rendered in relation
to other currently rendered GUI scenes.
The number must be in the range 0 to 15.,
        ["name"] = gui.set_render_order,
        ["error"] = ,
        ["brief"] = sets the render ordering for the current GUI scene,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [134] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = default keyboard,
        ["name"] = gui.KEYBOARD_TYPE_DEFAULT,
        ["error"] = ,
        ["brief"] = default keyboard,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [135] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = number input keyboard,
        ["name"] = gui.KEYBOARD_TYPE_NUMBER_PAD,
        ["error"] = ,
        ["brief"] = number input keyboard,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [136] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = email keyboard,
        ["name"] = gui.KEYBOARD_TYPE_EMAIL,
        ["error"] = ,
        ["brief"] = email keyboard,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [137] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = password keyboard,
        ["name"] = gui.KEYBOARD_TYPE_PASSWORD,
        ["error"] = ,
        ["brief"] = password keyboard,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [138] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = type,
            ["doc"] = keyboard type
<ul>
<li><code>gui.KEYBOARD_TYPE_DEFAULT</code></li>
<li><code>gui.KEYBOARD_TYPE_EMAIL</code></li>
<li><code>gui.KEYBOARD_TYPE_NUMBER_PAD</code></li>
<li><code>gui.KEYBOARD_TYPE_PASSWORD</code></li>
</ul>,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = autoclose,
            ["doc"] = if the keyboard should automatically close when clicking outside,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Shows the on-display touch keyboard.
The specified type of keyboard is displayed if it is available on
the device.
This function is only available on iOS and Android. <span class="icon-ios"></span> <span class="icon-android"></span>.,
        ["name"] = gui.show_keyboard,
        ["error"] = ,
        ["brief"] = shows the on-display keyboard if available <span class="icon-ios"></span> <span class="icon-android"></span>,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [139] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Hides the on-display touch keyboard on the device.,
        ["name"] = gui.hide_keyboard,
        ["error"] = ,
        ["brief"] = hides on-display keyboard if available,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [140] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets the input context of keyboard. This will clear marked text.,
        ["name"] = gui.reset_keyboard,
        ["error"] = ,
        ["brief"] = resets on-display keyboard if available,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [141] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the position from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the position of the supplied node.,
        ["name"] = gui.get_position,
        ["error"] = ,
        ["brief"] = gets the node position,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = node position,
          },
        },
      },
      [142] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the position for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = position,
            ["doc"] = new position,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the position of the supplied node.,
        ["name"] = gui.set_position,
        ["error"] = ,
        ["brief"] = sets the node position,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [143] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the rotation from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the rotation of the supplied node.
The rotation is expressed as a quaternion,
        ["name"] = gui.get_rotation,
        ["error"] = ,
        ["brief"] = gets the node rotation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quat,
            },
            ["name"] = rotation,
            ["doc"] = node rotation,
          },
        },
      },
      [144] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the rotation for,
          },
          [2] = {
            ["types"] = {
              [1] = quat,
              [2] = vector4,
            },
            ["name"] = rotation,
            ["doc"] = new rotation,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the rotation of the supplied node.
The rotation is expressed as a quaternion,
        ["name"] = gui.set_rotation,
        ["error"] = ,
        ["brief"] = sets the node rotation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [145] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the rotation from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the rotation of the supplied node.
The rotation is expressed in degree Euler angles.,
        ["name"] = gui.get_euler,
        ["error"] = ,
        ["brief"] = gets the node rotation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = rotation,
            ["doc"] = node rotation,
          },
        },
      },
      [146] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the rotation for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = rotation,
            ["doc"] = new rotation,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the rotation of the supplied node.
The rotation is expressed in degree Euler angles.,
        ["name"] = gui.set_euler,
        ["error"] = ,
        ["brief"] = sets the node rotation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [147] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the scale from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the scale of the supplied node.,
        ["name"] = gui.get_scale,
        ["error"] = ,
        ["brief"] = gets the node scale,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = scale,
            ["doc"] = node scale,
          },
        },
      },
      [148] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the scale for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = scale,
            ["doc"] = new scale,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the scaling of the supplied node.,
        ["name"] = gui.set_scale,
        ["error"] = ,
        ["brief"] = sets the node scale,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [149] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the color from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the color of the supplied node. The components
of the returned vector4 contains the color channel values:
<table>
<thead>
<tr>
<th>Component</th>
<th>Color value</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>Red value</td>
</tr>
<tr>
<td>y</td>
<td>Green value</td>
</tr>
<tr>
<td>z</td>
<td>Blue value</td>
</tr>
<tr>
<td>w</td>
<td>Alpha value</td>
</tr>
</tbody>
</table>,
        ["name"] = gui.get_color,
        ["error"] = ,
        ["brief"] = gets the node color,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = color,
            ["doc"] = node color,
          },
        },
      },
      [150] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the color for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = color,
            ["doc"] = new color,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the color of the supplied node. The components
of the supplied vector3 or vector4 should contain the color channel values:
<table>
<thead>
<tr>
<th>Component</th>
<th>Color value</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>Red value</td>
</tr>
<tr>
<td>y</td>
<td>Green value</td>
</tr>
<tr>
<td>z</td>
<td>Blue value</td>
</tr>
<tr>
<td>w <span class="type">vector4</span></td>
<td>Alpha value</td>
</tr>
</tbody>
</table>,
        ["name"] = gui.set_color,
        ["error"] = ,
        ["brief"] = sets the node color,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [151] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the outline color from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the outline color of the supplied node.
See <a href="/ref/gui#gui.get_color">gui.get_color</a> for info how vectors encode color values.,
        ["name"] = gui.get_outline,
        ["error"] = ,
        ["brief"] = gets the node outline color,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = color,
            ["doc"] = outline color,
          },
        },
      },
      [152] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the outline color for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = color,
            ["doc"] = new outline color,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the outline color of the supplied node.
See <a href="/ref/gui#gui.set_color">gui.set_color</a> for info how vectors encode color values.,
        ["name"] = gui.set_outline,
        ["error"] = ,
        ["brief"] = sets the node outline color,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [153] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the shadow color from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the shadow color of the supplied node.
See <a href="/ref/gui#gui.get_color">gui.get_color</a> for info how vectors encode color values.,
        ["name"] = gui.get_shadow,
        ["error"] = ,
        ["brief"] = gets the node shadow color,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = color,
            ["doc"] = node shadow color,
          },
        },
      },
      [154] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the shadow color for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = color,
            ["doc"] = new shadow color,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the shadow color of the supplied node.
See <a href="/ref/gui#gui.set_color">gui.set_color</a> for info how vectors encode color values.,
        ["name"] = gui.set_shadow,
        ["error"] = ,
        ["brief"] = sets the node shadow color,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [155] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the size for,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = size,
            ["doc"] = new size,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the size of the supplied node.
<span class="icon-attention"></span> You can only set size on nodes with size mode set to SIZE_MODE_MANUAL,
        ["name"] = gui.set_size,
        ["error"] = ,
        ["brief"] = sets the node size,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [156] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the size from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the size of the supplied node.,
        ["name"] = gui.get_size,
        ["error"] = ,
        ["brief"] = gets the node size,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = size,
            ["doc"] = node size,
          },
        },
      },
      [157] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the screen position from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the screen position of the supplied node. This function returns the
calculated transformed position of the node, taking into account any parent node
transforms.,
        ["name"] = gui.get_screen_position,
        ["error"] = ,
        ["brief"] = gets the node screen position,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = node screen position,
          },
        },
      },
      [158] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the screen position to,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = screen_position,
            ["doc"] = screen position,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the screen position to the supplied node,
        ["name"] = gui.set_screen_position,
        ["error"] = ,
        ["brief"] = sets screen position to the node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [159] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node used for getting local transformation matrix,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = screen_position,
            ["doc"] = screen position,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Convert the screen position to the local position of supplied node,
        ["name"] = gui.screen_to_local,
        ["error"] = ,
        ["brief"] = convert screen position to the local node position,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = local_position,
            ["doc"] = local position,
          },
        },
      },
      [160] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get the cursor for (node),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful nodes with flipbook animations. Gets the normalized cursor of the flipbook animation on a node.,
        ["name"] = gui.get_flipbook_cursor,
        ["error"] = ,
        ["brief"] = gets the normalized cursor of the animation on a node with flipbook animation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = cursor,
            ["doc"] = cursor value,
          },
        },
      },
      [161] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the cursor for,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = cursor,
            ["doc"] = cursor value,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful nodes with flipbook animations. The cursor is normalized.,
        ["name"] = gui.set_flipbook_cursor,
        ["error"] = ,
        ["brief"] = sets the normalized cursor of the animation on a node with flipbook animation,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [162] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the cursor for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful nodes with flipbook animations. Gets the playback rate of the flipbook animation on a node.,
        ["name"] = gui.get_flipbook_playback_rate,
        ["error"] = ,
        ["brief"] = gets the playback rate of the flipbook animation on a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = rate,
            ["doc"] = playback rate,
          },
        },
      },
      [163] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set the cursor for,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = playback_rate,
            ["doc"] = playback rate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is only useful nodes with flipbook animations. Sets the playback rate of the flipbook animation on a node. Must be positive.,
        ["name"] = gui.set_flipbook_playback_rate,
        ["error"] = ,
        ["brief"] = sets the playback rate of the flipbook animation on a node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [164] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = pos,
            ["doc"] = node position,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = particlefx,
            ["doc"] = particle fx resource name,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dynamically create a particle fx node.,
        ["name"] = gui.new_particlefx_node,
        ["error"] = ,
        ["brief"] = creates a new particle fx node,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = new particle fx node,
          },
        },
      },
      [165] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to play particle fx for,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, node, emitter, state),
            },
            ["name"] = [emitter_state_function],
            ["doc"] = optional callback function that will be called when an emitter attached to this particlefx changes state.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object</dd>
<dt><code>node</code></dt>
<dd><span class="type">hash</span> The particle fx node, or <code>nil</code> if the node was deleted</dd>
<dt><code>emitter</code></dt>
<dd><span class="type">hash</span> The id of the emitter</dd>
<dt><code>state</code></dt>
<dd><span class="type">constant</span> the new state of the emitter:</dd>
</dl>
<ul>
<li><code>particlefx.EMITTER_STATE_SLEEPING</code></li>
<li><code>particlefx.EMITTER_STATE_PRESPAWN</code></li>
<li><code>particlefx.EMITTER_STATE_SPAWNING</code></li>
<li><code>particlefx.EMITTER_STATE_POSTSPAWN</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Plays the paricle fx for a gui node,
        ["name"] = gui.play_particlefx,
        ["error"] = ,
        ["brief"] = Plays a particle fx,
        ["type"] = FUNCTION,
        ["examples"] = How to play a particle fx when a gui node is created.
The callback receives the gui node, the hash of the id
of the emitter, and the new state of the emitter as particlefx.EMITTER_STATE_<STATE>.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">emitter_state_change</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">emitter</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">emitter</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;exhaust&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">state</span> <span class="o">==</span> <span class="n">particlefx</span><span class="p">.</span><span class="n">EMITTER_STATE_POSTSPAWN</span> <span class="kr">then</span>
    <span class="c1">-- exhaust is done spawning particles...</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">play_particlefx</span><span class="p">(</span><span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;particlefx&quot;</span><span class="p">),</span> <span class="n">emitter_state_change</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [166] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to stop particle fx for,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = options when stopping the particle fx. Supported options:
<ul>
<li><span class="type">boolean</span> <code>clear</code>: instantly clear spawned particles</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Stops the particle fx for a gui node,
        ["name"] = gui.stop_particlefx,
        ["error"] = ,
        ["brief"] = Stops a particle fx,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [167] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to set particle fx for,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = particlefx,
            ["doc"] = particle fx id,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the paricle fx for a gui node,
        ["name"] = gui.set_particlefx,
        ["error"] = ,
        ["brief"] = Sets a particle fx,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [168] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node to get particle fx for,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the paricle fx for a gui node,
        ["name"] = gui.get_particlefx,
        ["error"] = ,
        ["brief"] = Gets a particle fx,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = particlefx,
            ["doc"] = particle fx id,
          },
        },
      },
      [169] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get the inherit alpha state,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = gets the node inherit alpha state,
        ["name"] = gui.get_inherit_alpha,
        ["error"] = ,
        ["brief"] = gets the node inherit alpha state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = inherit_alpha,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
      },
      [170] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to set the inherit alpha state,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = inherit_alpha,
            ["doc"] = <code>true</code> or <code>false</code>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = sets the node inherit alpha state,
        ["name"] = gui.set_inherit_alpha,
        ["error"] = ,
        ["brief"] = sets the node inherit alpha state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [171] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node from which to get alpha,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = gets the node alpha,
        ["name"] = gui.get_alpha,
        ["error"] = ,
        ["brief"] = gets the node alpha,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = alpha,
            ["doc"] = alpha,
          },
        },
      },
      [172] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = node,
            },
            ["name"] = node,
            ["doc"] = node for which to set alpha,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = alpha,
            ["doc"] = 0..1 alpha color,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = sets the node alpha,
        ["name"] = gui.set_alpha,
        ["error"] = ,
        ["brief"] = sets the node alpha,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [173] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = position property,
        ["name"] = gui.PROP_POSITION,
        ["error"] = ,
        ["brief"] = position property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [174] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = rotation property,
        ["name"] = gui.PROP_ROTATION,
        ["error"] = ,
        ["brief"] = rotation property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [175] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = euler property,
        ["name"] = gui.PROP_EULER,
        ["error"] = ,
        ["brief"] = euler property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [176] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = scale property,
        ["name"] = gui.PROP_SCALE,
        ["error"] = ,
        ["brief"] = scale property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [177] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = color property,
        ["name"] = gui.PROP_COLOR,
        ["error"] = ,
        ["brief"] = color property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [178] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = outline color property,
        ["name"] = gui.PROP_OUTLINE,
        ["error"] = ,
        ["brief"] = outline color property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [179] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = shadow color property,
        ["name"] = gui.PROP_SHADOW,
        ["error"] = ,
        ["brief"] = shadow color property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [180] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = size property,
        ["name"] = gui.PROP_SIZE,
        ["error"] = ,
        ["brief"] = size property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [181] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = fill_angle property,
        ["name"] = gui.PROP_FILL_ANGLE,
        ["error"] = ,
        ["brief"] = fill_angle property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [182] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = inner_radius property,
        ["name"] = gui.PROP_INNER_RADIUS,
        ["error"] = ,
        ["brief"] = inner_radius property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [183] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = leading property,
        ["name"] = gui.PROP_LEADING,
        ["error"] = ,
        ["brief"] = leading property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [184] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = tracking property,
        ["name"] = gui.PROP_TRACKING,
        ["error"] = ,
        ["brief"] = tracking property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [185] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = slice9 property,
        ["name"] = gui.PROP_SLICE9,
        ["error"] = ,
        ["brief"] = slice9 property,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [186] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = alpha blending,
        ["name"] = gui.BLEND_ALPHA,
        ["error"] = ,
        ["brief"] = alpha blending,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [187] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = additive blending,
        ["name"] = gui.BLEND_ADD,
        ["error"] = ,
        ["brief"] = additive blending,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [188] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = additive alpha blending,
        ["name"] = gui.BLEND_ADD_ALPHA,
        ["error"] = ,
        ["brief"] = additive alpha blending,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [189] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = multiply blending,
        ["name"] = gui.BLEND_MULT,
        ["error"] = ,
        ["brief"] = multiply blending,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [190] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = screen blending,
        ["name"] = gui.BLEND_SCREEN,
        ["error"] = ,
        ["brief"] = screen blending,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [191] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = clipping mode none,
        ["name"] = gui.CLIPPING_MODE_NONE,
        ["error"] = ,
        ["brief"] = clipping mode none,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [192] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = clipping mode stencil,
        ["name"] = gui.CLIPPING_MODE_STENCIL,
        ["error"] = ,
        ["brief"] = clipping mode stencil,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [193] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = left x-anchor,
        ["name"] = gui.ANCHOR_LEFT,
        ["error"] = ,
        ["brief"] = left x-anchor,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [194] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = right x-anchor,
        ["name"] = gui.ANCHOR_RIGHT,
        ["error"] = ,
        ["brief"] = right x-anchor,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [195] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = top y-anchor,
        ["name"] = gui.ANCHOR_TOP,
        ["error"] = ,
        ["brief"] = top y-anchor,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [196] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = bottom y-anchor,
        ["name"] = gui.ANCHOR_BOTTOM,
        ["error"] = ,
        ["brief"] = bottom y-anchor,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [197] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = no anchor,
        ["name"] = gui.ANCHOR_NONE,
        ["error"] = ,
        ["brief"] = no anchor,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [198] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = center pivot,
        ["name"] = gui.PIVOT_CENTER,
        ["error"] = ,
        ["brief"] = center pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [199] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = north pivot,
        ["name"] = gui.PIVOT_N,
        ["error"] = ,
        ["brief"] = north pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [200] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = north-east pivot,
        ["name"] = gui.PIVOT_NE,
        ["error"] = ,
        ["brief"] = north-east pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [201] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = east pivot,
        ["name"] = gui.PIVOT_E,
        ["error"] = ,
        ["brief"] = east pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [202] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = south-east pivot,
        ["name"] = gui.PIVOT_SE,
        ["error"] = ,
        ["brief"] = south-east pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [203] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = south pivot,
        ["name"] = gui.PIVOT_S,
        ["error"] = ,
        ["brief"] = south pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [204] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = south-west pivot,
        ["name"] = gui.PIVOT_SW,
        ["error"] = ,
        ["brief"] = south-west pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [205] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = west pivot,
        ["name"] = gui.PIVOT_W,
        ["error"] = ,
        ["brief"] = west pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [206] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = north-west pivot,
        ["name"] = gui.PIVOT_NW,
        ["error"] = ,
        ["brief"] = north-west pivot,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [207] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Adjust mode is used when the screen resolution differs from the project settings.
The fit mode ensures that the entire node is visible in the adjusted gui scene.,
        ["name"] = gui.ADJUST_FIT,
        ["error"] = ,
        ["brief"] = fit adjust mode,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [208] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Adjust mode is used when the screen resolution differs from the project settings.
The zoom mode ensures that the node fills its entire area and might make the node exceed it.,
        ["name"] = gui.ADJUST_ZOOM,
        ["error"] = ,
        ["brief"] = zoom adjust mode,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [209] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Adjust mode is used when the screen resolution differs from the project settings.
The stretch mode ensures that the node is displayed as is in the adjusted gui scene, which might scale it non-uniformally.,
        ["name"] = gui.ADJUST_STRETCH,
        ["error"] = ,
        ["brief"] = stretch adjust mode,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [210] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = elliptical pie node bounds,
        ["name"] = gui.PIEBOUNDS_ELLIPSE,
        ["error"] = ,
        ["brief"] = elliptical pie node bounds,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [211] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = rectangular pie node bounds,
        ["name"] = gui.PIEBOUNDS_RECTANGLE,
        ["error"] = ,
        ["brief"] = rectangular pie node bounds,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [212] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The size of the node is determined by the size set in the editor, the constructor or by gui.set_size(),
        ["name"] = gui.SIZE_MODE_MANUAL,
        ["error"] = ,
        ["brief"] = manual size mode,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [213] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The size of the node is determined by the currently assigned texture.,
        ["name"] = gui.SIZE_MODE_AUTO,
        ["error"] = ,
        ["brief"] = automatic size mode,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [214] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The texture id already exists when trying to use gui.new_texture().,
        ["name"] = gui.RESULT_TEXTURE_ALREADY_EXISTS,
        ["error"] = ,
        ["brief"] = texture already exists,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [215] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The system is out of resources, for instance when trying to create a new
texture using gui.new_texture().,
        ["name"] = gui.RESULT_OUT_OF_RESOURCES,
        ["error"] = ,
        ["brief"] = out of resource,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [216] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The provided data is not in the expected format or is in some other way
incorrect, for instance the image data provided to gui.new_texture().,
        ["name"] = gui.RESULT_DATA_ERROR,
        ["error"] = ,
        ["brief"] = data error,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [217] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when a gui component is initialized. It can be used
to set the initial state of the script and gui scene.,
        ["name"] = init,
        ["error"] = ,
        ["brief"] = called when a gui component is initialized,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- set up useful data</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_value</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [218] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when a gui component is finalized (destroyed). It can
be used to e.g. take some last action, report the finalization to other game object instances
or release user input focus (see <code>release_input_focus</code>). There is no use in starting any animations or similar
from this function since the gui component is about to be destroyed.,
        ["name"] = final,
        ["error"] = ,
        ["brief"] = called when a gui component is finalized,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">final</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- report finalization</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;my_friend_instance&quot;</span><span class="p">,</span> <span class="s2">&quot;im_dead&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">my_stats</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">some_value</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [219] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = dt,
            ["doc"] = the time-step of the frame update,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine every frame to update the state of a gui component.
It can be used to perform any kind of gui related tasks, e.g. animating nodes.,
        ["name"] = update,
        ["error"] = ,
        ["brief"] = called every frame to update the gui component,
        ["type"] = FUNCTION,
        ["examples"] = This example demonstrates how to update a text node that displays game score in a counting fashion.
It is assumed that the gui component receives messages from the game when a new score is to be shown.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- fetch the score text node for later use (assumes it is called &quot;score&quot;)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">score_node</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;score&quot;</span><span class="p">)</span>
    <span class="c1">-- keep track of the current score counted up so far</span>
    <span class="n">self</span><span class="p">.</span><span class="n">current_score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1">-- keep track of the target score we should count up to</span>
    <span class="n">self</span><span class="p">.</span><span class="n">target_score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1">-- how fast we will update the score, in score/second</span>
    <span class="n">self</span><span class="p">.</span><span class="n">score_update_speed</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- check if target score is more than current score</span>
    <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_score</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">target_score</span>
        <span class="c1">-- increment current score according to the speed</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_score</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">current_score</span> <span class="o">+</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">score_update_speed</span>
        <span class="c1">-- check if we went past the target score, clamp current score in that case</span>
        <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_score</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">target_score</span> <span class="kr">then</span>
            <span class="n">self</span><span class="p">.</span><span class="n">current_score</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">target_score</span>
        <span class="kr">end</span>
        <span class="c1">-- update the score text node</span>
        <span class="n">gui</span><span class="p">.</span><span class="n">set_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">score_node</span><span class="p">,</span> <span class="s2">&quot;&quot;</span> <span class="o">..</span> <span class="nb">math.floor</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_score</span><span class="p">))</span>
    <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="c1">-- check the message</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;set_score&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="n">self</span><span class="p">.</span><span class="n">target_score</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">score</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [220] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = message_id,
            ["doc"] = id of the received message,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = message,
            ["doc"] = a table containing the message data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine whenever a message has been sent to the gui component.
It can be used to take action on the message, e.g. update the gui or send a response back to the sender of the message.
The <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the
documentation of the message specifies which data is supplied.
See the <a href="#update">update</a> function for examples on how to use this callback-function.,
        ["name"] = on_message,
        ["error"] = ,
        ["brief"] = called when a message has been sent to the gui component,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [221] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = action_id,
            ["doc"] = id of the received input action, as mapped in the input_binding-file,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = action,
            ["doc"] = a table containing the input data, see above for a description,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is a callback-function, which is called by the engine when user input is sent to the instance of the gui component.
It can be used to take action on the input, e.g. modify the gui according to the input.
For an instance to obtain user input, it must first acquire input
focus through the message <code>acquire_input_focus</code>.
Any instance that has obtained input will be put on top of an
input stack. Input is sent to all listeners on the stack until the
end of stack is reached, or a listener returns <code>true</code>
to signal that it wants input to be consumed.
See the documentation of <a href="/ref/go/#acquire_input_focus">acquire_input_focus</a> for more
information.
The <code>action</code> parameter is a table containing data about the input mapped to the
<code>action_id</code>.
For mapped actions it specifies the value of the input and if it was just pressed or released.
Actions are mapped to input in an input_binding-file.
Mouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.
The <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.
Here is a brief description of the available table fields:
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>value</code></td>
<td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>pressed</code></td>
<td>If the input was pressed this frame. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>released</code></td>
<td>If the input was released this frame. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>repeated</code></td>
<td>If the input was repeated this frame. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement.</td>
</tr>
<tr>
<td><code>x</code></td>
<td>The x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>y</code></td>
<td>The y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_x</code></td>
<td>The screen space x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_y</code></td>
<td>The screen space y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>dx</code></td>
<td>The change in x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>dy</code></td>
<td>The change in y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_dx</code></td>
<td>The change in screen space x value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>screen_dy</code></td>
<td>The change in screen space y value of a pointer device, if present.</td>
</tr>
<tr>
<td><code>gamepad</code></td>
<td>The index of the gamepad device that provided the input.</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>List of touch input, one element per finger, if present. See table below about touch input</td>
</tr>
</tbody>
</table>
Touch input table:
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>id</code></td>
<td>A number identifying the touch input during its duration.</td>
</tr>
<tr>
<td><code>pressed</code></td>
<td>True if the finger was pressed this frame.</td>
</tr>
<tr>
<td><code>released</code></td>
<td>True if the finger was released this frame.</td>
</tr>
<tr>
<td><code>tap_count</code></td>
<td>Number of taps, one for single, two for double-tap, etc</td>
</tr>
<tr>
<td><code>x</code></td>
<td>The x touch location.</td>
</tr>
<tr>
<td><code>y</code></td>
<td>The y touch location.</td>
</tr>
<tr>
<td><code>dx</code></td>
<td>The change in x value.</td>
</tr>
<tr>
<td><code>dy</code></td>
<td>The change in y value.</td>
</tr>
<tr>
<td><code>acc_x</code></td>
<td>Accelerometer x value (if present).</td>
</tr>
<tr>
<td><code>acc_y</code></td>
<td>Accelerometer y value (if present).</td>
</tr>
<tr>
<td><code>acc_z</code></td>
<td>Accelerometer z value (if present).</td>
</tr>
</tbody>
</table>,
        ["name"] = on_input,
        ["error"] = ,
        ["brief"] = called when user input is received,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_input</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action_id</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="c1">-- check for input</span>
    <span class="kr">if</span> <span class="n">action_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_action&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- take appropritate action</span>
        <span class="n">self</span><span class="p">.</span><span class="n">my_value</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">value</span>
    <span class="kr">end</span>
    <span class="c1">-- consume input</span>
    <span class="kr">return</span> <span class="kc">true</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
              [2] = nil,
            },
            ["name"] = consume,
            ["doc"] = optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false,
          },
        },
      },
      [222] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = object,
            },
            ["name"] = self,
            ["doc"] = reference to the script state to be used for storing data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = 
This is a callback-function, which is called by the engine when the gui script is reloaded, e.g. from the editor.
It can be used for live development, e.g. to tweak constants or set up the state properly for the script.
,
        ["name"] = on_reload,
        ["error"] = ,
        ["brief"] = called when the gui script is reloaded,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_reload</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- restore some color (or similar)</span>
    <span class="n">gui</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;my_node&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">my_original_color</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = GUI core hooks, functions, messages, properties and constants for
creation and manipulation of GUI nodes. The "gui" namespace is
accessible only from gui scripts.,
      ["name"] = GUI,
      ["notes"] = {},
      ["namespace"] = gui,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = GUI API documentation,
    },
  },
  [13] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = code,
            ["doc"] = Javascript code to run,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Executes the supplied string as JavaScript inside the browser.
A call to this function is blocking, the result is returned as-is, as a string.
(Internally this will execute the string using the <code>eval()</code> JavaScript function.),
        ["name"] = html5.run,
        ["error"] = ,
        ["brief"] = run JavaScript code, in the browser, from Lua,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">res</span> <span class="o">=</span> <span class="n">html5</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s2">&quot;10 + 20&quot;</span><span class="p">)</span> <span class="c1">-- returns the string &quot;30&quot;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">res_num</span> <span class="o">=</span> <span class="nb">tonumber</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="c1">-- convert to number</span>
<span class="nb">print</span><span class="p">(</span><span class="n">res_num</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">-- prints 10</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = result,
            ["doc"] = result as string,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = function(self),
              [2] = nil,
            },
            ["name"] = callback,
            ["doc"] = The interaction callback. Pass an empty function or <code>nil</code> if you no longer wish to receive callbacks.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The calling script</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set a JavaScript interaction listener callaback from lua that will be
invoked when a user interacts with the web page by clicking, touching or typing.
The callback can then call DOM restricted actions like requesting a pointer lock,
or start playing sounds the first time the callback is invoked.,
        ["name"] = html5.set_interaction_listener,
        ["error"] = ,
        ["brief"] = set a JavaScript interaction listener callback from lua,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">on_interaction</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;on_interaction called&quot;</span><span class="p">)</span>
    <span class="n">html5</span><span class="p">.</span><span class="n">set_interaction_listener</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">html5</span><span class="p">.</span><span class="n">set_interaction_listener</span><span class="p">(</span><span class="n">on_interaction</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = HTML5 platform specific functions.
<span class="icon-html5"></span> The following functions are only available on HTML5 builds, the <code>html5.*</code> Lua namespace will not be available on other platforms.,
      ["name"] = HTML5,
      ["notes"] = {},
      ["namespace"] = html5,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = HTML5 API documentation,
    },
  },
  [14] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = url,
            ["doc"] = target url,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = method,
            ["doc"] = HTTP/HTTPS method, e.g. "GET", "PUT", "POST" etc.,
          },
          [3] = {
            ["types"] = {
              [1] = function(self, id, response),
            },
            ["name"] = callback,
            ["doc"] = response callback function
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The script instance</dd>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> Internal message identifier. Do not use!</dd>
<dt><code>response</code></dt>
<dd><span class="type">table</span> The response data. Contains the fields:</dd>
</dl>
<ul>
<li><span class="type">number</span> <code>status</code>: the status of the response</li>
<li><span class="type">string</span> <code>response</code>: the response data (if not saved on disc)</li>
<li><span class="type">table</span> <code>headers</code>: all the returned headers</li>
<li><span class="type">string</span> <code>path</code>: the stored path (if saved to disc)</li>
<li><span class="type">string</span> <code>error</code>: if any unforeseen errors occurred (e.g. file I/O)</li>
</ul>,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [headers],
            ["doc"] = optional table with custom headers,
          },
          [5] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [post_data],
            ["doc"] = optional data to send,
          },
          [6] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with request parameters. Supported entries:
<ul>
<li><span class="type">number</span> <code>timeout</code>: timeout in seconds</li>
<li><span class="type">string</span> <code>path</code>: path on disc where to download the file. Only overwrites the path if status is 200. <span class="icon-attention"></span> Path should be absolute</li>
<li><span class="type">boolean</span> <code>ignore_cache</code>: don't return cached data if we get a 304. <span class="icon-attention"></span> Not available in HTML5 build</li>
<li><span class="type">boolean</span> <code>chunked_transfer</code>: use chunked transfer encoding for https requests larger than 16kb. Defaults to true. <span class="icon-attention"></span> Not available in HTML5 build</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Perform a HTTP/HTTPS request.
<span class="icon-attention"></span> If no timeout value is passed, the configuration value "network.http_timeout" is used. If that is not set, the timeout value is <code>0</code> (which blocks indefinitely).,
        ["name"] = http.request,
        ["error"] = ,
        ["brief"] = perform a HTTP/HTTPS request,
        ["type"] = FUNCTION,
        ["examples"] = Basic HTTP-GET request. The callback receives a table with the response
in the fields status, the response (the data) and headers (a table).
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">http_result</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;http://www.google.com&quot;</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="n">http_result</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Functions for performing HTTP and HTTPS requests.,
      ["name"] = HTTP,
      ["notes"] = {},
      ["namespace"] = http,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = HTTP API documentation,
    },
  },
  [15] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB image type,
        ["name"] = image.TYPE_RGB,
        ["error"] = ,
        ["brief"] = RGB image type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA image type,
        ["name"] = image.TYPE_RGBA,
        ["error"] = ,
        ["brief"] = RGBA image type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = luminance image type,
        ["name"] = image.TYPE_LUMINANCE,
        ["error"] = ,
        ["brief"] = luminance image type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = luminance image type,
        ["name"] = image.TYPE_LUMINANCE_ALPHA,
        ["error"] = ,
        ["brief"] = luminance image type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = image data buffer,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = An optional table containing parameters for loading the image. Supported entries:
<dl>
<dt><code>premultiply_alpha</code></dt>
<dd><span class="type">boolean</span> True if alpha should be premultiplied into the color components. Defaults to <code>false</code>.</dd>
<dt><code>flip_vertically</code></dt>
<dd><span class="type">boolean</span> True if the image contents should be flipped vertically. Defaults to <code>false</code>.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Load image (PNG or JPEG) from buffer.,
        ["name"] = image.load,
        ["error"] = ,
        ["brief"] = load image from buffer,
        ["type"] = FUNCTION,
        ["examples"] = How to load an image from an URL and create a GUI texture from it:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">imgurl</span> <span class="o">=</span> <span class="s2">&quot;http://www.site.com/image.png&quot;</span>
<span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">imgurl</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">tx</span> <span class="o">=</span> <span class="n">gui</span><span class="p">.</span><span class="n">new_texture</span><span class="p">(</span><span class="s2">&quot;image_node&quot;</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">type</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">buffer</span><span class="p">)</span>
    <span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = image,
            ["doc"] = object or <code>nil</code> if loading fails. The object is a table with the following fields:
<ul>
<li><span class="type">number</span> <code>width</code>: image width</li>
<li><span class="type">number</span> <code>height</code>: image height</li>
<li><span class="type">constant</span> <code>type</code>: image type<ul>
<li><code>image.TYPE_RGB</code></li>
<li><code>image.TYPE_RGBA</code></li>
<li><code>image.TYPE_LUMINANCE</code></li>
<li><code>image.TYPE_LUMINANCE_ALPHA</code></li>
</ul>
</li>
<li><span class="type">string</span> <code>buffer</code>: the raw image data</li>
</ul>,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = image data buffer,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = An optional table containing parameters for loading the image. Supported entries:
<dl>
<dt><code>premultiply_alpha</code></dt>
<dd><span class="type">boolean</span> True if alpha should be premultiplied into the color components. Defaults to <code>false</code>.</dd>
<dt><code>flip_vertically</code></dt>
<dd><span class="type">boolean</span> True if the image contents should be flipped vertically. Defaults to <code>false</code>.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Load image (PNG or JPEG) from a string buffer.,
        ["name"] = image.load_buffer,
        ["error"] = ,
        ["brief"] = load image from a string into a buffer object,
        ["type"] = FUNCTION,
        ["examples"] = Load an image from an URL as a buffer and create a texture resource from it:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">imgurl</span> <span class="o">=</span> <span class="s2">&quot;http://www.site.com/image.png&quot;</span>
<span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">imgurl</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">load_buffer</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">,</span> <span class="p">{</span> <span class="n">flip_vertically</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
        <span class="kd">local</span> <span class="n">tparams</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">width</span>  <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
            <span class="n">height</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">height</span><span class="p">,</span>
            <span class="nb">type</span>   <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_TYPE_2D</span><span class="p">,</span>
            <span class="n">format</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA</span> <span class="p">}</span>

        <span class="kd">local</span> <span class="n">my_texture_id</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">create_texture</span><span class="p">(</span><span class="s2">&quot;/my_custom_texture.texturec&quot;</span><span class="p">,</span> <span class="n">tparams</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">buffer</span><span class="p">)</span>
        <span class="c1">-- Apply the texture to a model</span>
        <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;/go1#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">my_texture_id</span><span class="p">)</span>
    <span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = image,
            ["doc"] = object or <code>nil</code> if loading fails. The object is a table with the following fields:
<ul>
<li><span class="type">number</span> <code>width</code>: image width</li>
<li><span class="type">number</span> <code>height</code>: image height</li>
<li><span class="type">constant</span> <code>type</code>: image type<ul>
<li><code>image.TYPE_RGB</code></li>
<li><code>image.TYPE_RGBA</code></li>
<li><code>image.TYPE_LUMINANCE</code></li>
<li><code>image.TYPE_LUMINANCE_ALPHA</code></li>
</ul>
</li>
<li><span class="type">buffer</span> <code>buffer</code>: the script buffer that holds the decompressed image data. See <a href="/ref/buffer#buffer.create">buffer.create</a> how to use the buffer.</li>
</ul>,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Functions for creating image objects.,
      ["name"] = Image,
      ["notes"] = {},
      ["namespace"] = image,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Image API documentation,
    },
  },
  [16] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = json,
            ["doc"] = json data,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = table with decode options
<ul>
<li><span class="type">bool</span> <code>decode_null_as_userdata</code>: wether to decode a JSON null value as json.null or nil (default is nil)</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Decode a string of JSON data into a Lua table.
A Lua error is raised for syntax errors.,
        ["name"] = json.decode,
        ["error"] = ,
        ["brief"] = decode JSON from a string to a lua-table,
        ["type"] = FUNCTION,
        ["examples"] = Converting a string containing JSON data into a Lua table:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">jsonstring</span> <span class="o">=</span> <span class="s1">&#39;{&quot;persons&quot;:[{&quot;name&quot;:&quot;John Doe&quot;},{&quot;name&quot;:&quot;Darth Vader&quot;}]}&#39;</span>
    <span class="kd">local</span> <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">jsonstring</span><span class="p">)</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Results in the following printout:
<div class="codehilite"><pre><span></span><code>{
  persons = {
    1 = {
      name = John Doe,
    }
    2 = {
      name = Darth Vader,
    }
  }
}
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = data,
            ["doc"] = decoded json,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = tbl,
            ["doc"] = lua table to encode,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = table with encode options
<ul>
<li><span class="type">string</span> <code>encode_empty_table_as_object</code>: wether to encode an empty table as an JSON object or array (default is object)</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Encode a lua table to a JSON string.
A Lua error is raised for syntax errors.,
        ["name"] = json.encode,
        ["error"] = ,
        ["brief"] = encode a lua table to a JSON string,
        ["type"] = FUNCTION,
        ["examples"] = Convert a lua table to a JSON string:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
     <span class="kd">local</span> <span class="n">tbl</span> <span class="o">=</span> <span class="p">{</span>
          <span class="n">persons</span> <span class="o">=</span> <span class="p">{</span>
               <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;John Doe&quot;</span><span class="p">},</span>
               <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Darth Vader&quot;</span><span class="p">}</span>
          <span class="p">}</span>
     <span class="p">}</span>
     <span class="kd">local</span> <span class="n">jsonstring</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">tbl</span><span class="p">)</span>
     <span class="n">pprint</span><span class="p">(</span><span class="n">jsonstring</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Results in the following printout:
<div class="codehilite"><pre><span></span><code>{&quot;persons&quot;:[{&quot;name&quot;:&quot;John Doe&quot;},{&quot;name&quot;:&quot;Darth Vader&quot;}]}
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = json,
            ["doc"] = encoded json,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Represents the null primitive from a json file,
        ["name"] = json.null,
        ["error"] = ,
        ["brief"] = null,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Manipulation of JSON data strings.,
      ["name"] = JSON,
      ["notes"] = {},
      ["namespace"] = json,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = JSON API documentation,
    },
  },
  [17] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The color of the label. The type of the property is vector4.,
        ["name"] = color,
        ["error"] = ,
        ["brief"] = <span class="type">vector4</span> label color,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
   <span class="c1">-- Get the current color&#39;s y component</span>
   <span class="kd">local</span> <span class="n">red_component</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;color.y&quot;</span><span class="p">)</span>
   <span class="c1">-- Animate the color</span>
   <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INOUTSINE</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The outline color of the label. The type of the property is vector4.,
        ["name"] = outline,
        ["error"] = ,
        ["brief"] = <span class="type">vector4</span> label outline,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
   <span class="c1">-- Get the current outline color</span>
   <span class="kd">local</span> <span class="n">outline</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;outline&quot;</span><span class="p">)</span>
   <span class="c1">-- Animate the property</span>
   <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;outline&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INOUTSINE</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The shadow color of the label. The type of the property is vector4.,
        ["name"] = shadow,
        ["error"] = ,
        ["brief"] = <span class="type">vector4</span> label shadow,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
 <span class="c1">-- Get the current shadow color</span>
 <span class="kd">local</span> <span class="n">shadow</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;shadow&quot;</span><span class="p">)</span>
 <span class="c1">-- Animate the property</span>
 <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;shadow&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INOUTSINE</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The scale of the label. The type of the property is number (uniform)
or vector3 (non uniform).,
        ["name"] = scale,
        ["error"] = ,
        ["brief"] = <span class="type">number | vector3</span> label scale,
        ["type"] = PROPERTY,
        ["examples"] = How to scale a label independently along the X and Y axis:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
   <span class="c1">-- Double the y-axis scaling on component &quot;label&quot;</span>
   <span class="kd">local</span> <span class="n">yscale</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;scale.y&quot;</span><span class="p">)</span>
   <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;scale.y&quot;</span><span class="p">,</span> <span class="n">yscale</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
   <span class="c1">-- Set the new scale altogether</span>
   <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;scale&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
   <span class="c1">-- Animate the scale</span>
   <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;scale&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INOUTSINE</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the size of the label. The size will constrain the text if line break is enabled.
The type of the property is vector3.,
        ["name"] = size,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> label size,
        ["type"] = PROPERTY,
        ["examples"] = How to query a label's size, either as a vector or selecting a specific dimension:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
 <span class="c1">-- get size from component &quot;label&quot;</span>
 <span class="kd">local</span> <span class="n">size</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;size&quot;</span><span class="p">)</span>
 <span class="kd">local</span> <span class="n">sizex</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;size.x&quot;</span><span class="p">)</span>
 <span class="c1">-- do something useful</span>
 <span class="nb">assert</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">sizex</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The material used when rendering the label. The type of the property is hash.,
        ["name"] = material,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> label material,
        ["type"] = PROPERTY,
        ["examples"] = How to set material using a script property (see <a href="/ref/resource#resource.material">resource.material</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/material.material&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;material&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The font used when rendering the label. The type of the property is hash.,
        ["name"] = font,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> label font,
        ["type"] = PROPERTY,
        ["examples"] = How to set font using a script property (see <a href="/ref/resource#resource.font">resource.font</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_font&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">font</span><span class="p">(</span><span class="s2">&quot;/font.font&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;font&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_font</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The leading of the label. This value is used to scale the line spacing of text.
The type of the property is number.,
        ["name"] = leading,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> label leading,
        ["type"] = PROPERTY,
        ["examples"] = How to query a label's leading:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
 <span class="c1">-- get leading from component &quot;label&quot;</span>
 <span class="kd">local</span> <span class="n">leading</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;leading&quot;</span><span class="p">)</span>
 <span class="c1">-- do something useful</span>
 <span class="n">leading</span> <span class="o">=</span> <span class="n">leading</span> <span class="o">*</span> <span class="mf">1.2</span>
 <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;leading&quot;</span><span class="p">,</span> <span class="n">leading</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The tracking of the label.
This value is used to adjust the vertical spacing of characters in the text.
The type of the property is number.,
        ["name"] = tracking,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> label tracking,
        ["type"] = PROPERTY,
        ["examples"] = How to query a label's tracking:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
 <span class="c1">-- get tracking from component &quot;label&quot;</span>
 <span class="kd">local</span> <span class="n">tracking</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;tracking&quot;</span><span class="p">)</span>
 <span class="c1">-- do something useful</span>
 <span class="n">tracking</span> <span class="o">=</span> <span class="n">tracking</span> <span class="o">*</span> <span class="mf">1.2</span>
 <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;tracking&quot;</span><span class="p">,</span> <span class="n">tracking</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The line break of the label.
This value is used to adjust the vertical spacing of characters in the text.
The type of the property is boolean.,
        ["name"] = line_break,
        ["error"] = ,
        ["brief"] = <span class="type">bool</span> label line break,
        ["type"] = PROPERTY,
        ["examples"] = How to query a label's line break:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
 <span class="c1">-- get line_break from component &quot;label&quot;</span>
 <span class="kd">local</span> <span class="n">line_break</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;line_break&quot;</span><span class="p">)</span>
 <span class="c1">-- do something useful</span>
 <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;line_break&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the label that should have a constant set,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = text,
            ["doc"] = the text,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the text of a label component
<span class="icon-attention"></span> This method uses the message passing that means the value will be set after <code>dispatch messages</code> step.
More information is available in the <a href="/manuals/application-lifecycle">Application Lifecycle manual</a>.,
        ["name"] = label.set_text,
        ["error"] = ,
        ["brief"] = set the text for a label,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">label</span><span class="p">.</span><span class="n">set_text</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;Hello World!&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the label to get the text from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets the text from a label component,
        ["name"] = label.get_text,
        ["error"] = ,
        ["brief"] = gets the text for a label,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">text</span> <span class="o">=</span> <span class="n">label</span><span class="p">.</span><span class="n">get_text</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = metrics,
            ["doc"] = the label text,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Label API documentation,
      ["name"] = Label,
      ["notes"] = {},
      ["namespace"] = label,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Label API documentation,
    },
  },
  [18] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Return a reference to the Manifest that is currently loaded.,
        ["name"] = liveupdate.get_current_manifest,
        ["error"] = ,
        ["brief"] = return a reference to the Manifest that is currently loaded,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = manifest_reference,
            ["doc"] = reference to the Manifest that is currently loaded,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = manifest_reference,
            ["doc"] = The manifest to check against.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = data,
            ["doc"] = The resource data that should be stored.,
          },
          [3] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = hexdigest,
            ["doc"] = The expected hash for the resource,
retrieved through collectionproxy.missing_resources.,
          },
          [4] = {
            ["types"] = {
              [1] = function(self, hexdigest, status),
            },
            ["name"] = callback,
            ["doc"] = The callback
function that is executed once the engine has been attempted to store
the resource.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>hexdigest</code></dt>
<dd><span class="type">string</span> The hexdigest of the resource.</dd>
<dt><code>status</code></dt>
<dd><span class="type">boolean</span> Whether or not the resource was successfully stored.</dd>
</dl>,
          },
        },
        ["notes"] = {
          [1] = deprecated,
        },
        ["tparams"] = {},
        ["description"] = add a resource to the data archive and runtime index. The resource will be verified
internally before being added to the data archive.,
        ["name"] = liveupdate.store_resource,
        ["error"] = ,
        ["brief"] = add a resource to the data archive and runtime index,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">manifest</span> <span class="o">=</span> <span class="n">liveupdate</span><span class="p">.</span><span class="n">get_current_manifest</span><span class="p">()</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">callback_store_resource</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">hexdigest</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
     <span class="kr">if</span> <span class="n">status</span> <span class="o">==</span> <span class="kc">true</span> <span class="kr">then</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Successfully stored resource: &quot;</span> <span class="o">..</span> <span class="n">hexdigest</span><span class="p">)</span>
     <span class="kr">else</span>
          <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Failed to store resource: &quot;</span> <span class="o">..</span> <span class="n">hexdigest</span><span class="p">)</span>
     <span class="kr">end</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">load_resources</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
     <span class="kd">local</span> <span class="n">resources</span> <span class="o">=</span> <span class="n">collectionproxy</span><span class="p">.</span><span class="n">missing_resources</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
     <span class="kr">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">resource_hash</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">resources</span><span class="p">)</span> <span class="kr">do</span>
          <span class="kd">local</span> <span class="n">baseurl</span> <span class="o">=</span> <span class="s2">&quot;http://example.defold.com:8000/&quot;</span>
          <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">baseurl</span> <span class="o">..</span> <span class="n">resource_hash</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
               <span class="kr">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="kr">then</span>
                    <span class="n">liveupdate</span><span class="p">.</span><span class="n">store_resource</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">manifest</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">,</span> <span class="n">resource_hash</span><span class="p">,</span> <span class="n">callback_store_resource</span><span class="p">)</span>
               <span class="kr">else</span>
                    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Failed to download resource: &quot;</span> <span class="o">..</span> <span class="n">resource_hash</span><span class="p">)</span>
               <span class="kr">end</span>
          <span class="kr">end</span><span class="p">)</span>
     <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = manifest_buffer,
            ["doc"] = the binary data that represents the manifest,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, status),
            },
            ["name"] = callback,
            ["doc"] = the callback function
executed once the engine has attempted to store the manifest.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>status</code></dt>
<dd><span class="type">constant</span> the status of the store operation:</dd>
</dl>
<ul>
<li><code>liveupdate.LIVEUPDATE_OK</code></li>
<li><code>liveupdate.LIVEUPDATE_INVALID_RESOURCE</code></li>
<li><code>liveupdate.LIVEUPDATE_VERSION_MISMATCH</code></li>
<li><code>liveupdate.LIVEUPDATE_ENGINE_VERSION_MISMATCH</code></li>
<li><code>liveupdate.LIVEUPDATE_SIGNATURE_MISMATCH</code></li>
<li><code>liveupdate.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH</code></li>
<li><code>liveupdate.LIVEUPDATE_FORMAT_ERROR</code></li>
</ul>,
          },
        },
        ["notes"] = {
          [1] = deprecated,
        },
        ["tparams"] = {},
        ["description"] = Create a new manifest from a buffer. The created manifest is verified
by ensuring that the manifest was signed using the bundled public/private
key-pair during the bundle process and that the manifest supports the current
running engine version. Once the manifest is verified it is stored on device.
The next time the engine starts (or is rebooted) it will look for the stored
manifest before loading resources. Storing a new manifest allows the
developer to update the game, modify existing resources, or add new
resources to the game through LiveUpdate.,
        ["name"] = liveupdate.store_manifest,
        ["error"] = ,
        ["brief"] = create, verify, and store a manifest to device,
        ["type"] = FUNCTION,
        ["examples"] = How to download a manifest with HTTP and store it on device.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">store_manifest_cb</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">status</span> <span class="o">==</span> <span class="n">liveupdate</span><span class="p">.</span><span class="n">LIVEUPDATE_OK</span> <span class="kr">then</span>
    <span class="n">pprint</span><span class="p">(</span><span class="s2">&quot;Successfully stored manifest. This manifest will be loaded instead of the bundled manifest the next time the engine starts.&quot;</span><span class="p">)</span>
  <span class="kr">else</span>
    <span class="n">pprint</span><span class="p">(</span><span class="s2">&quot;Failed to store manifest&quot;</span><span class="p">)</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">download_and_store_manifest</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">MANIFEST_URL</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
      <span class="kr">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="kr">then</span>
        <span class="n">liveupdate</span><span class="p">.</span><span class="n">store_manifest</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">response</span><span class="p">,</span> <span class="n">store_manifest_cb</span><span class="p">)</span>
      <span class="kr">end</span>
    <span class="kr">end</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = the path to the original file on disc,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, status),
            },
            ["name"] = callback,
            ["doc"] = the callback function
executed after the storage has completed
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>status</code></dt>
<dd><span class="type">constant</span> the status of the store operation (See liveupdate.store_manifest)</dd>
</dl>,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with extra parameters. Supported entries:
<ul>
<li><span class="type">boolean</span> <code>verify</code>: if archive should be verified as well as stored (defaults to true)</li>
</ul>,
          },
        },
        ["notes"] = {
          [1] = deprecated,
        },
        ["tparams"] = {},
        ["description"] = Stores a zip file and uses it for live update content. The contents of the
zip file will be verified against the manifest to ensure file integrity.
It is possible to opt out of the resource verification using an option passed
to this function.
The path is stored in the (internal) live update location.,
        ["name"] = liveupdate.store_archive,
        ["error"] = ,
        ["brief"] = register and store a live update zip file,
        ["type"] = FUNCTION,
        ["examples"] = How to download an archive with HTTP and store it on device.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">LIVEUPDATE_URL</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">file</span> <span class="n">server</span> <span class="n">url</span><span class="o">&gt;</span>

<span class="c1">-- This can be anything, but you should keep the platform bundles apart</span>
<span class="kd">local</span> <span class="n">ZIP_FILENAME</span> <span class="o">=</span> <span class="s1">&#39;defold.resourcepack.zip&#39;</span>

<span class="kd">local</span> <span class="n">APP_SAVE_DIR</span> <span class="o">=</span> <span class="s2">&quot;LiveUpdateDemo&quot;</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">proxy</span> <span class="o">=</span> <span class="s2">&quot;levels#level1&quot;</span>

    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;INIT: is_using_liveupdate_data:&quot;</span><span class="p">,</span> <span class="n">liveupdate</span><span class="p">.</span><span class="n">is_using_liveupdate_data</span><span class="p">())</span>
    <span class="c1">-- let&#39;s download the archive</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;attempt_download_archive&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="c1">-- helper function to store headers from the http request (e.g. the ETag)</span>
<span class="kd">local</span> <span class="kr">function</span> <span class="nf">store_http_response_headers</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_save_file</span><span class="p">(</span><span class="n">APP_SAVE_DIR</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">load_http_response_headers</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_save_file</span><span class="p">(</span><span class="n">APP_SAVE_DIR</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
    <span class="kr">return</span> <span class="n">sys</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
<span class="kr">end</span>

<span class="c1">-- returns headers that can potentially generate a 304</span>
<span class="c1">-- without redownloading the file again</span>
<span class="kd">local</span> <span class="kr">function</span> <span class="nf">get_http_request_headers</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">data</span> <span class="o">=</span> <span class="n">load_http_response_headers</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kr">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="kr">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="kr">do</span>
        <span class="kr">if</span> <span class="nb">string.lower</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;etag&#39;</span> <span class="kr">then</span>
            <span class="n">headers</span><span class="p">[</span><span class="s1">&#39;If-None-Match&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
        <span class="kr">elseif</span> <span class="nb">string.lower</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;last-modified&#39;</span> <span class="kr">then</span>
            <span class="n">headers</span><span class="p">[</span><span class="s1">&#39;If-Modified-Since&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
    <span class="kr">return</span> <span class="n">headers</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">store_archive_cb</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">status</span> <span class="o">==</span> <span class="kc">true</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Successfully stored live update archive!&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">reboot</span><span class="p">()</span>
    <span class="kr">else</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Failed to store live update archive, &quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
        <span class="c1">-- remove the path</span>
    <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;attempt_download_archive&quot;</span><span class="p">)</span> <span class="kr">then</span>

        <span class="c1">-- by supplying the ETag, we don&#39;t have to redownload the file again</span>
        <span class="c1">-- if we already have downloaded it.</span>
        <span class="kd">local</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">get_http_request_headers</span><span class="p">(</span><span class="n">ZIP_FILENAME</span> <span class="o">..</span> <span class="s1">&#39;.json&#39;</span><span class="p">)</span>
        <span class="kr">if</span> <span class="ow">not</span> <span class="n">liveupdate</span><span class="p">.</span><span class="n">is_using_liveupdate_data</span><span class="p">()</span> <span class="kr">then</span>
            <span class="n">headers</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">-- live update data has been purged, and we need do a fresh download</span>
        <span class="kr">end</span>

        <span class="kd">local</span> <span class="n">path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_save_file</span><span class="p">(</span><span class="n">APP_SAVE_DIR</span><span class="p">,</span> <span class="n">ZIP_FILENAME</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">path</span> <span class="o">=</span> <span class="n">path</span><span class="p">,</span>        <span class="c1">-- a temporary file on disc. will be removed upon successful liveupdate storage</span>
            <span class="n">ignore_cache</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- we don&#39;t want to store a (potentially large) duplicate in our http cache</span>
        <span class="p">}</span>

        <span class="kd">local</span> <span class="n">url</span> <span class="o">=</span> <span class="n">LIVEUPDATE_URL</span> <span class="o">..</span> <span class="n">ZIP_FILENAME</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Downloading&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
        <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
            <span class="kr">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">304</span> <span class="kr">then</span>
                <span class="nb">print</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="s2">&quot;%d: Archive zip file up-to-date&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="p">))</span>
            <span class="kr">elseif</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="ow">and</span> <span class="n">response</span><span class="p">.</span><span class="n">error</span> <span class="o">==</span> <span class="kc">nil</span> <span class="kr">then</span>
                <span class="c1">-- register the path to the live update system</span>
                <span class="n">liveupdate</span><span class="p">.</span><span class="n">store_archive</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="n">store_archive_cb</span><span class="p">)</span>
                <span class="c1">-- at this point, the &quot;path&quot; has been moved internally to a different location</span>

                <span class="c1">-- save the ETag for the next run</span>
                <span class="n">store_http_response_headers</span><span class="p">(</span><span class="n">ZIP_FILENAME</span> <span class="o">..</span> <span class="s1">&#39;.json&#39;</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">)</span>
            <span class="kr">else</span>
                <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Error when downloading&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s2">&quot;to&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">error</span><span class="p">)</span>
            <span class="kr">end</span>

            <span class="c1">-- If we got a 200, we would call store_archive_cb() then reboot</span>
            <span class="c1">-- Second time, if we get here, it should be after a 304, and then</span>
            <span class="c1">-- we can load the missing resources from the liveupdate archive</span>
            <span class="kr">if</span> <span class="n">liveupdate</span><span class="p">.</span><span class="n">is_using_liveupdate_data</span><span class="p">()</span> <span class="kr">then</span>
                <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">proxy</span><span class="p">,</span> <span class="s2">&quot;load&quot;</span><span class="p">)</span>
            <span class="kr">end</span>
        <span class="kr">end</span><span class="p">,</span>
        <span class="n">headers</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {
          [1] = deprecated,
        },
        ["tparams"] = {},
        ["description"] = Is any liveupdate data mounted and currently in use?
This can be used to determine if a new manifest or zip file should be downloaded.,
        ["name"] = liveupdate.is_using_liveupdate_data,
        ["error"] = ,
        ["brief"] = is any liveupdate data mounted and currently in use,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = bool,
            ["doc"] = true if a liveupdate archive (any format) has been loaded,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get an array of the current mounts
This can be used to determine if a new mount is needed or not,
        ["name"] = liveupdate.get_mounts,
        ["error"] = ,
        ["brief"] = Get current mounts,
        ["type"] = FUNCTION,
        ["examples"] = Output the current resource mounts
<div class="codehilite"><pre><span></span><code><span class="n">pprint</span><span class="p">(</span><span class="s2">&quot;MOUNTS&quot;</span><span class="p">,</span> <span class="n">liveupdate</span><span class="p">.</span><span class="n">get_mounts</span><span class="p">())</span>
</code></pre></div>

Give an output like:
<div class="codehilite"><pre><span></span><code><span class="n">DEBUG</span><span class="p">:</span><span class="n">SCRIPT</span><span class="p">:</span> <span class="n">MOUNTS</span><span class="p">,</span>
<span class="p">{</span> <span class="cm">--[[0x119667bf0]]</span>
  <span class="mi">1</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">--[[0x119667c50]]</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;liveupdate&quot;</span><span class="p">,</span>
    <span class="n">uri</span> <span class="o">=</span> <span class="s2">&quot;zip:/device/path/to/acchives/liveupdate.zip&quot;</span><span class="p">,</span>
    <span class="n">priority</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="p">},</span>
  <span class="mi">2</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">--[[0x119667d50]]</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;_base&quot;</span><span class="p">,</span>
    <span class="n">uri</span> <span class="o">=</span> <span class="s2">&quot;archive:build/default/game.dmanifest&quot;</span><span class="p">,</span>
    <span class="n">priority</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = array,
            },
            ["name"] = mounts,
            ["doc"] = Array of mounts,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = name,
            ["doc"] = Unique name of the mount,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = uri,
            ["doc"] = The uri of the mount, including the scheme. Currently supported schemes are 'zip' and 'archive'.,
          },
          [3] = {
            ["types"] = {
              [1] = integer,
            },
            ["name"] = priority,
            ["doc"] = Priority of mount. Larger priority takes prescedence,
          },
          [4] = {
            ["types"] = {
              [1] = function,
            },
            ["name"] = callback,
            ["doc"] = Callback after the asynchronous request completed,
          },
        },
        ["notes"] = {
          [1] = The request is asynchronous,
          [2] = Names cannot start with '_',
          [3] = Priority must be >= 0,
        },
        ["tparams"] = {},
        ["description"] = Adds a resource mount to the resource system.
The mounts are persisted between sessions.
After the mount succeeded, the resources are available to load. (i.e. no reboot required),
        ["name"] = liveupdate.add_mount,
        ["error"] = ,
        ["brief"] = Add resource mount,
        ["type"] = FUNCTION,
        ["examples"] = Add multiple mounts. Higher priority takes precedence.
<div class="codehilite"><pre><span></span><code><span class="n">liveupdate</span><span class="p">.</span><span class="n">add_mount</span><span class="p">(</span><span class="s2">&quot;common&quot;</span><span class="p">,</span> <span class="s2">&quot;zip:/path/to/common_stuff.zip&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">-- base pack</span>
<span class="n">liveupdate</span><span class="p">.</span><span class="n">add_mount</span><span class="p">(</span><span class="s2">&quot;levelpack_1&quot;</span><span class="p">,</span> <span class="s2">&quot;zip:/path/to/levels_1_to_20.zip&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">-- level pack</span>
<span class="n">liveupdate</span><span class="p">.</span><span class="n">add_mount</span><span class="p">(</span><span class="s2">&quot;season_pack_1&quot;</span><span class="p">,</span> <span class="s2">&quot;zip:/path/to/easter_pack_1.zip&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span> <span class="c1">-- season pack, overriding content in the other packs</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = result,
            ["doc"] = The result of the request,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = name,
            ["doc"] = Unique name of the mount,
          },
        },
        ["notes"] = {
          [1] = The call is synchronous,
        },
        ["tparams"] = {},
        ["description"] = Remove a mount the resource system.
The remaining mounts are persisted between sessions.
Removing a mount does not affect any loaded resources.,
        ["name"] = liveupdate.remove_mount,
        ["error"] = ,
        ["brief"] = Remove resource mount,
        ["type"] = FUNCTION,
        ["examples"] = Add multiple mounts. Higher priority takes precedence.
<div class="codehilite"><pre><span></span><code><span class="n">liveupdate</span><span class="p">.</span><span class="n">remove_mount</span><span class="p">(</span><span class="s2">&quot;season_pack_1&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = result,
            ["doc"] = The result of the call,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = LIVEUPDATE_OK,
        ["name"] = liveupdate.LIVEUPDATE_OK,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_OK,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The handled resource is invalid.,
        ["name"] = liveupdate.LIVEUPDATE_INVALID_HEADER,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_INVALID_HEADER,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Memory wasn't allocated,
        ["name"] = liveupdate.LIVEUPDATE_MEM_ERROR,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_MEM_ERROR,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The header of the resource is invalid.,
        ["name"] = liveupdate.LIVEUPDATE_INVALID_RESOURCE,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_INVALID_RESOURCE,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Mismatch between manifest expected version and actual version.,
        ["name"] = liveupdate.LIVEUPDATE_VERSION_MISMATCH,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_VERSION_MISMATCH,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Mismatch between running engine version and engine versions supported by manifest.,
        ["name"] = liveupdate.LIVEUPDATE_ENGINE_VERSION_MISMATCH,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_ENGINE_VERSION_MISMATCH,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Mismatch between manifest expected signature and actual signature.,
        ["name"] = liveupdate.LIVEUPDATE_SIGNATURE_MISMATCH,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_SIGNATURE_MISMATCH,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Mismatch between scheme used to load resources. Resources are loaded with a different scheme than from manifest, for example over HTTP or directly from file. This is typically the case when running the game directly from the editor instead of from a bundle.,
        ["name"] = liveupdate.LIVEUPDATE_SCHEME_MISMATCH,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_SCHEME_MISMATCH,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Mismatch between between expected bundled resources and actual bundled resources. The manifest expects a resource to be in the bundle, but it was not found in the bundle. This is typically the case when a non-excluded resource was modified between publishing the bundle and publishing the manifest.,
        ["name"] = liveupdate.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Failed to parse manifest data buffer. The manifest was probably produced by a different engine version.,
        ["name"] = liveupdate.LIVEUPDATE_FORMAT_ERROR,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_FORMAT_ERROR,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = I/O operation failed,
        ["name"] = liveupdate.LIVEUPDATE_IO_ERROR,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_IO_ERROR,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Argument was invalid,
        ["name"] = liveupdate.LIVEUPDATE_INVAL,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_INVAL,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Unspecified error,
        ["name"] = liveupdate.LIVEUPDATE_UNKNOWN,
        ["error"] = ,
        ["brief"] = LIVEUPDATE_UNKNOWN,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["description"] = Functions and constants to access resources.,
      ["name"] = LiveUpdate,
      ["notes"] = {},
      ["namespace"] = liveupdate,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = LiveUpdate API documentation,
    },
  },
  [19] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The normalized animation cursor. The type of the property is number.
<span class="icon-attention"></span> Please note that model events may not fire as expected when the cursor is manipulated directly.,
        ["name"] = cursor,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> model cursor,
        ["type"] = PROPERTY,
        ["examples"] = How to get the normalized cursor value:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the cursor value on component &quot;model&quot;</span>
  <span class="n">cursor</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;cursor&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

How to animate the cursor from 0.0 to 1.0 using linear easing for 2.0 seconds:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the current value on component &quot;model&quot;</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;cursor&quot;</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
  <span class="c1">-- Animate the cursor value</span>
  <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;cursor&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_FORWARD</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_LINEAR</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The animation playback rate. A multiplier to the animation playback rate. The type of the property is number.,
        ["name"] = playback_rate,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> model playback_rate,
        ["type"] = PROPERTY,
        ["examples"] = How to set the playback_rate on component "model" to play at double the current speed:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the current value on component &quot;model&quot;</span>
  <span class="n">playback_rate</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;playback_rate&quot;</span><span class="p">)</span>
  <span class="c1">-- Set the playback_rate to double the previous value.</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;playback_rate&quot;</span><span class="p">,</span> <span class="n">playback_rate</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

The playback_rate is a non-negative number, a negative value will be clamped to 0.,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The current animation set on the component. The type of the property is hash.,
        ["name"] = animation,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> model animation,
        ["type"] = PROPERTY,
        ["examples"] = How to read the current animation from a model component:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the current animation on component &quot;model&quot;</span>
  <span class="kd">local</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;animation&quot;</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">animation</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;run_left&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="c1">-- Running left. Do something...</span>
  <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The texture hash id of the model. Used for getting/setting model texture for unit 0-7,
        ["name"] = textureN,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> model textureN where N is 0-7,
        ["type"] = PROPERTY,
        ["examples"] = How to set texture using a script property (see <a href="/ref/resource#resource.texture">resource.texture</a>):
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_texture&quot;</span><span class="p">,</span> <span class="n">texture</span><span class="p">(</span><span class="s2">&quot;/texture.png&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_texture</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

See <a href="/ref/resource#resource.set_texture">resource.set_texture</a> for an example on how to set the texture of an atlas.,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The material used when rendering the model. The type of the property is hash.,
        ["name"] = material,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> model material,
        ["type"] = PROPERTY,
        ["examples"] = How to set material using a script property (see <a href="/ref/resource#resource.material">resource.material</a>):
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/material.material&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;material&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the model for which to play the animation,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = anim_id,
            ["doc"] = id of the animation to play,
          },
          [3] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = playback,
            ["doc"] = playback mode of the animation
<ul>
<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>
<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>
<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>
<li><code>go.PLAYBACK_LOOP_FORWARD</code></li>
<li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>
<li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>
</ul>,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [play_properties],
            ["doc"] = optional table with properties
Play properties table:
<dl>
<dt><code>blend_duration</code></dt>
<dd><span class="type">number</span> Duration of a linear blend between the current and new animation.</dd>
<dt><code>offset</code></dt>
<dd><span class="type">number</span> The normalized initial value of the animation cursor when the animation starts playing.</dd>
<dt><code>playback_rate</code></dt>
<dd><span class="type">number</span> The rate with which the animation will be played. Must be positive.</dd>
</dl>,
          },
          [5] = {
            ["types"] = {
              [1] = function(self, message_id, message, sender),
            },
            ["name"] = [complete_function],
            ["doc"] = function to call when the animation has completed.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>message_id</code></dt>
<dd><span class="type">hash</span> The name of the completion message, <code>"model_animation_done"</code>.</dd>
<dt><code>message</code></dt>
<dd><span class="type">table</span> Information about the completion:</dd>
</dl>
<ul>
<li><span class="type">hash</span> <code>animation_id</code> - the animation that was completed.</li>
<li><span class="type">constant</span> <code>playback</code> - the playback mode for the animation.</li>
</ul>
<dl>
<dt><code>sender</code></dt>
<dd><span class="type">url</span> The invoker of the callback: the model component.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Plays an animation on a model component with specified playback
mode and parameters.
An optional completion callback function can be provided that will be called when
the animation has completed playing. If no function is provided,
a <a href="#model_animation_done">model_animation_done</a> message is sent to the script that started the animation.
<span class="icon-attention"></span> The callback is not called (or message sent) if the animation is
cancelled with <a href="/ref/model#model.cancel">model.cancel</a>. The callback is called (or message sent) only for
animations that play with the following playback modes:
<ul>
<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>
<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>
<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>
</ul>,
        ["name"] = model.play_anim,
        ["error"] = ,
        ["brief"] = play an animation on a model,
        ["type"] = FUNCTION,
        ["examples"] = The following examples assumes that the model has id "model".
How to play the "jump" animation followed by the "run" animation:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">anim_done</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;model_animation_done&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">if</span> <span class="n">message</span><span class="p">.</span><span class="n">animation_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;jump&quot;</span><span class="p">)</span> <span class="kr">then</span>
      <span class="c1">-- open animation done, chain with &quot;run&quot;</span>
      <span class="kd">local</span> <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">blend_duration</span> <span class="o">=</span> <span class="mf">0.2</span> <span class="p">}</span>
      <span class="n">model</span><span class="p">.</span><span class="n">play_anim</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">&quot;run&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_FORWARD</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">anim_done</span><span class="p">)</span>
    <span class="kr">end</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">play_properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">blend_duration</span> <span class="o">=</span> <span class="mf">0.1</span> <span class="p">}</span>
    <span class="c1">-- first blend during 0.1 sec into the jump, then during 0.2 s into the run animation</span>
    <span class="n">model</span><span class="p">.</span><span class="n">play_anim</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">&quot;jump&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_ONCE_FORWARD</span><span class="p">,</span> <span class="n">play_properties</span><span class="p">,</span> <span class="n">anim_done</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the model for which to cancel the animation,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Cancels all animation on a model component.,
        ["name"] = model.cancel,
        ["error"] = ,
        ["brief"] = cancel all animation on a model,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the model to query,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = bone_id,
            ["doc"] = id of the corresponding bone,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets the id of the game object that corresponds to a model skeleton bone.
The returned game object can be used for parenting and transform queries.
This function has complexity <code>O(n)</code>, where <code>n</code> is the number of bones in the model skeleton.
Game objects corresponding to a model skeleton bone can not be individually deleted.,
        ["name"] = model.get_go,
        ["error"] = ,
        ["brief"] = retrieve the game object corresponding to a model skeleton bone,
        ["type"] = FUNCTION,
        ["examples"] = The following examples assumes that the model component has id "model".
How to parent the game object of the calling script to the "right_hand" bone of the model in a player game object:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">get_go</span><span class="p">(</span><span class="s2">&quot;player#model&quot;</span><span class="p">,</span> <span class="s2">&quot;right_hand&quot;</span><span class="p">)</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;set_parent&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">parent_id</span> <span class="o">=</span> <span class="n">parent</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = id of the game object,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the model,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = mesh_id,
            ["doc"] = the id of the mesh,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enabled,
            ["doc"] = true if the mesh should be visible, false if it should be hideen,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Enable or disable visibility of a mesh,
        ["name"] = model.set_mesh_enabled,
        ["error"] = ,
        ["brief"] = enable or disable a mesh,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="n">set_mesh_enabled</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;Sword&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="c1">-- hide the sword</span>
    <span class="n">model</span><span class="p">.</span><span class="n">set_mesh_enabled</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;Axe&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>    <span class="c1">-- show the axe</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the model,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = mesh_id,
            ["doc"] = the id of the mesh,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the enabled state of a mesh,
        ["name"] = model.get_mesh_enabled,
        ["error"] = ,
        ["brief"] = get the enabled state of a mesh,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">model</span><span class="p">.</span><span class="n">get_mesh_enabled</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;Sword&quot;</span><span class="p">)</span> <span class="kr">then</span>
       <span class="c1">-- set properties specific for the sword</span>
       <span class="n">self</span><span class="p">.</span><span class="n">weapon_properties</span> <span class="o">=</span> <span class="n">game</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">weapons</span><span class="p">[</span><span class="s2">&quot;Sword&quot;</span><span class="p">]</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enabled,
            ["doc"] = true if the mesh is visible, false otherwise,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = animation_id,
            ["doc"] = the id of the completed animation,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = playback,
            ["doc"] = the playback mode of the completed animation,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent when a Model animation has finished playing back to the script
that started the animation.
<span class="icon-attention"></span> No message is sent if a completion callback function was supplied
when the animation was started. No message is sent if the animation is cancelled with
model.cancel(). This message is sent only for animations that play with
the following playback modes:
<ul>
<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>
<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>
<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>
</ul>,
        ["name"] = model_animation_done,
        ["error"] = ,
        ["brief"] = reports the completion of a Model animation,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;model_animation_done&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">if</span> <span class="n">message</span><span class="p">.</span><span class="n">animation_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;run&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">message</span><span class="p">.</span><span class="n">playback</span> <span class="o">==</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_ONCE_FORWARD</span> <span class="kr">then</span>
      <span class="c1">-- The animation &quot;run&quot; has finished running forward.</span>
    <span class="kr">end</span>
  <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Model API documentation,
      ["name"] = Model,
      ["notes"] = {},
      ["namespace"] = model,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Model API documentation,
    },
  },
  [20] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This is equivalent to <code>msg.url(nil)</code> or <code>msg.url("#")</code>, which creates an url to the current
script component.,
        ["name"] = msg.url,
        ["error"] = ,
        ["brief"] = creates a new URL,
        ["type"] = FUNCTION,
        ["examples"] = Create a new URL which will address the current script:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">)</span> <span class="c1">--&gt; url: [current_collection:/my_instance#my_component]</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = url,
            },
            ["name"] = url,
            ["doc"] = a new URL,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = urlstring,
            ["doc"] = string to create the url from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The format of the string must be <code>[socket:][path][#fragment]</code>, which is similar to a HTTP URL.
When addressing instances:
<ul>
<li><code>socket</code> is the name of a valid world (a collection)</li>
<li><code>path</code> is the id of the instance, which can either be relative the instance of the calling script or global</li>
<li><code>fragment</code> would be the id of the desired component</li>
</ul>
In addition, the following shorthands are available:
<ul>
<li><code>"."</code> the current game object</li>
<li><code>"#"</code> the current component</li>
</ul>,
        ["name"] = msg.url,
        ["error"] = ,
        ["brief"] = creates a new URL from a string,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;#my_component&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">)</span> <span class="c1">--&gt; url: [current_collection:/my_instance#my_component]</span>

<span class="kd">local</span> <span class="n">my_url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;my_collection:/my_sub_collection/my_instance#my_component&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">)</span> <span class="c1">--&gt; url: [my_collection:/my_sub_collection/my_instance#my_component]</span>

<span class="kd">local</span> <span class="n">my_url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;my_socket:&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">)</span> <span class="c1">--&gt; url: [my_collection:]</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = url,
            },
            ["name"] = url,
            ["doc"] = a new URL,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = [socket],
            ["doc"] = socket of the URL,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = [path],
            ["doc"] = path of the URL,
          },
          [3] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = [fragment],
            ["doc"] = fragment of the URL,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = creates a new URL from separate arguments,
        ["name"] = msg.url,
        ["error"] = ,
        ["brief"] = creates a new URL from separate arguments,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_socket</span> <span class="o">=</span> <span class="s2">&quot;main&quot;</span> <span class="c1">-- specify by valid name</span>
<span class="kd">local</span> <span class="n">my_path</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/my_collection/my_gameobject&quot;</span><span class="p">)</span> <span class="c1">-- specify as string or hash</span>
<span class="kd">local</span> <span class="n">my_fragment</span> <span class="o">=</span> <span class="s2">&quot;component&quot;</span> <span class="c1">-- specify as string or hash</span>
<span class="kd">local</span> <span class="n">my_url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="n">my_socket</span><span class="p">,</span> <span class="n">my_path</span><span class="p">,</span> <span class="n">my_fragment</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">)</span> <span class="c1">--&gt; url: [main:/my_collection/my_gameobject#component]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">.</span><span class="n">socket</span><span class="p">)</span> <span class="c1">--&gt; 786443 (internal numeric value)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">.</span><span class="n">path</span><span class="p">)</span> <span class="c1">--&gt; hash: [/my_collection/my_gameobject]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_url</span><span class="p">.</span><span class="n">fragment</span><span class="p">)</span> <span class="c1">--&gt; hash: [component]</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = url,
            },
            ["name"] = url,
            ["doc"] = a new URL,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = url,
              [3] = hash,
            },
            ["name"] = receiver,
            ["doc"] = The receiver must be a string in URL-format, a URL object or a hashed string.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = message_id,
            ["doc"] = The id must be a string or a hashed string.,
          },
          [3] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = [message],
            ["doc"] = a lua table with message parameters to send.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post a message to a receiving URL. The most common case is to send messages
to a component. If the component part of the receiver is omitted, the message
is broadcast to all components in the game object.
The following receiver shorthands are available:
<ul>
<li><code>"."</code> the current game object</li>
<li><code>"#"</code> the current component</li>
</ul>
<span class="icon-attention"></span> There is a 2 kilobyte limit to the message parameter table size.,
        ["name"] = msg.post,
        ["error"] = ,
        ["brief"] = posts a message to a receiving URL,
        ["type"] = FUNCTION,
        ["examples"] = Send "enable" to the sprite "my_sprite" in "my_gameobject":
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;my_gameobject#my_sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;enable&quot;</span><span class="p">)</span>
</code></pre></div>

Send a "my_message" to an url with some additional data:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="n">my_parameter</span> <span class="o">=</span> <span class="s2">&quot;my_value&quot;</span><span class="p">}</span>
<span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">my_url</span><span class="p">,</span> <span class="s2">&quot;my_message&quot;</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Functions for passing messages and constructing URL objects.,
      ["name"] = Message,
      ["notes"] = {},
      ["namespace"] = msg,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Messaging API documentation,
    },
  },
  [21] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The emitter does not have any living particles and will not spawn any particles in this state.,
        ["name"] = particlefx.EMITTER_STATE_SLEEPING,
        ["error"] = ,
        ["brief"] = sleeping state,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The emitter will be in this state when it has been started but before spawning any particles. Normally the emitter is in this state for a short time, depending on if a start delay has been set for this emitter or not.,
        ["name"] = particlefx.EMITTER_STATE_PRESPAWN,
        ["error"] = ,
        ["brief"] = prespawn state,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The emitter is spawning particles.,
        ["name"] = particlefx.EMITTER_STATE_SPAWNING,
        ["error"] = ,
        ["brief"] = spawning state,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The emitter is not spawning any particles, but has particles that are still alive.,
        ["name"] = particlefx.EMITTER_STATE_POSTSPAWN,
        ["error"] = ,
        ["brief"] = postspawn state,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the particle fx that should start playing.,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, id, emitter, state),
            },
            ["name"] = [emitter_state_function],
            ["doc"] = optional callback function that will be called when an emitter attached to this particlefx changes state.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object</dd>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The id of the particle fx component</dd>
<dt><code>emitter</code></dt>
<dd><span class="type">hash</span> The id of the emitter</dd>
<dt><code>state</code></dt>
<dd><span class="type">constant</span> the new state of the emitter:</dd>
</dl>
<ul>
<li><code>particlefx.EMITTER_STATE_SLEEPING</code></li>
<li><code>particlefx.EMITTER_STATE_PRESPAWN</code></li>
<li><code>particlefx.EMITTER_STATE_SPAWNING</code></li>
<li><code>particlefx.EMITTER_STATE_POSTSPAWN</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Starts playing a particle FX component.
Particle FX started this way need to be manually stopped through <code>particlefx.stop()</code>.
Which particle FX to play is identified by the URL.
<span class="icon-attention"></span> A particle FX will continue to emit particles even if the game object the particle FX component belonged to is deleted. You can call <code>particlefx.stop()</code> to stop it from emitting more particles.,
        ["name"] = particlefx.play,
        ["error"] = ,
        ["brief"] = start playing a particle FX,
        ["type"] = FUNCTION,
        ["examples"] = How to play a particle fx when a game object is created.
The callback receives the hash of the path to the particlefx, the hash of the id
of the emitter, and the new state of the emitter as particlefx.EMITTER_STATE_<STATE>.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">emitter_state_change</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">emitter</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">emitter</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;exhaust&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">state</span> <span class="o">==</span> <span class="n">particlefx</span><span class="p">.</span><span class="n">EMITTER_STATE_POSTSPAWN</span> <span class="kr">then</span>
    <span class="c1">-- exhaust is done spawning particles...</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">particlefx</span><span class="p">.</span><span class="n">play</span><span class="p">(</span><span class="s2">&quot;#particlefx&quot;</span><span class="p">,</span> <span class="n">emitter_state_change</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the particle fx that should stop playing,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = Options when stopping the particle fx. Supported options:
<ul>
<li><span class="type">boolean</span> <code>clear</code>: instantly clear spawned particles</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Stops a particle FX component from playing.
Stopping a particle FX does not remove already spawned particles.
Which particle FX to stop is identified by the URL.,
        ["name"] = particlefx.stop,
        ["error"] = ,
        ["brief"] = stop playing a particle fx,
        ["type"] = FUNCTION,
        ["examples"] = How to stop a particle fx when a game object is deleted and immediately also clear
any spawned particles:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">final</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">particlefx</span><span class="p">.</span><span class="n">stop</span><span class="p">(</span><span class="s2">&quot;#particlefx&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">clear</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the particle FX that should have a constant set,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = emitter,
            ["doc"] = the id of the emitter,
          },
          [3] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = constant,
            ["doc"] = the name of the constant,
          },
          [4] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = value,
            ["doc"] = the value of the constant,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets a shader constant for a particle FX component emitter.
The constant must be defined in the material assigned to the emitter.
Setting a constant through this function will override the value set for that constant in the material.
The value will be overridden until particlefx.reset_constant is called.
Which particle FX to set a constant for is identified by the URL.,
        ["name"] = particlefx.set_constant,
        ["error"] = ,
        ["brief"] = set a shader constant for a particle FX component emitter,
        ["type"] = FUNCTION,
        ["examples"] = The following examples assumes that the particle FX has id "particlefx", it
contains an emitter with the id "emitter" and that the default-material in builtins is used, which defines the constant "tint".
If you assign a custom material to the sprite, you can reset the constants defined there in the same manner.
How to tint particles from an emitter red:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">particlefx</span><span class="p">.</span><span class="n">set_constant</span><span class="p">(</span><span class="s2">&quot;#particlefx&quot;</span><span class="p">,</span> <span class="s2">&quot;emitter&quot;</span><span class="p">,</span> <span class="s2">&quot;tint&quot;</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the particle FX that should have a constant reset,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = emitter,
            ["doc"] = the id of the emitter,
          },
          [3] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = constant,
            ["doc"] = the name of the constant,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets a shader constant for a particle FX component emitter.
The constant must be defined in the material assigned to the emitter.
Resetting a constant through this function implies that the value defined in the material will be used.
Which particle FX to reset a constant for is identified by the URL.,
        ["name"] = particlefx.reset_constant,
        ["error"] = ,
        ["brief"] = reset a shader constant for a particle FX component emitter,
        ["type"] = FUNCTION,
        ["examples"] = The following examples assumes that the particle FX has id "particlefx", it
contains an emitter with the id "emitter" and that the default-material in builtins is used, which defines the constant "tint".
If you assign a custom material to the sprite, you can reset the constants defined there in the same manner.
How to reset the tinting of particles from an emitter:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">particlefx</span><span class="p">.</span><span class="n">reset_constant</span><span class="p">(</span><span class="s2">&quot;#particlefx&quot;</span><span class="p">,</span> <span class="s2">&quot;emitter&quot;</span><span class="p">,</span> <span class="s2">&quot;tint&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Functions for controlling particle effect component playback and
shader constants.,
      ["name"] = Particle effects,
      ["notes"] = {},
      ["namespace"] = particlefx,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Particle effects API documentation,
    },
  },
  [22] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = length,
            ["doc"] = The natural length between the anchor points.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = frequency,
            ["doc"] = The mass-spring-damper frequency in Hertz. A value of 0 disables softness.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = The damping ratio. 0 = no damping, 1 = critical damping.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The following properties are available when connecting a joint of <code>JOINT_TYPE_SPRING</code> type:,
        ["name"] = physics.JOINT_TYPE_SPRING,
        ["error"] = ,
        ["brief"] = spring joint type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = max_length,
            ["doc"] = The maximum length of the rope.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The following properties are available when connecting a joint of <code>JOINT_TYPE_FIXED</code> type:,
        ["name"] = physics.JOINT_TYPE_FIXED,
        ["error"] = ,
        ["brief"] = fixed joint type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = reference_angle,
            ["doc"] = The bodyB angle minus bodyA angle in the reference state (radians).,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = lower_angle,
            ["doc"] = The lower angle for the joint limit (radians).,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = upper_angle,
            ["doc"] = The upper angle for the joint limit (radians).,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = max_motor_torque,
            ["doc"] = The maximum motor torque used to achieve the desired motor speed. Usually in N-m.,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = motor_speed,
            ["doc"] = The desired motor speed. Usually in radians per second.,
          },
          [6] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enable_limit,
            ["doc"] = A flag to enable joint limits.,
          },
          [7] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enable_motor,
            ["doc"] = A flag to enable the joint motor.,
          },
          [8] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_angle,
            ["doc"] = <span class="mark">READ ONLY</span>Current joint angle in radians.
(Read only field, available from <code>physics.get_joint_properties()</code>),
          },
          [9] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_speed,
            ["doc"] = <span class="mark">READ ONLY</span>Current joint angle speed in radians per second.
(Read only field, available from <code>physics.get_joint_properties()</code>),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The following properties are available when connecting a joint of <code>JOINT_TYPE_HINGE</code> type:,
        ["name"] = physics.JOINT_TYPE_HINGE,
        ["error"] = ,
        ["brief"] = hinge joint type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = local_axis_a,
            ["doc"] = The local translation unit axis in bodyA.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = reference_angle,
            ["doc"] = The constrained angle between the bodies: bodyB_angle - bodyA_angle.,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enable_limit,
            ["doc"] = Enable/disable the joint limit.,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = lower_translation,
            ["doc"] = The lower translation limit, usually in meters.,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = upper_translation,
            ["doc"] = The upper translation limit, usually in meters.,
          },
          [6] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enable_motor,
            ["doc"] = Enable/disable the joint motor.,
          },
          [7] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = max_motor_force,
            ["doc"] = The maximum motor torque, usually in N-m.,
          },
          [8] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = motor_speed,
            ["doc"] = The desired motor speed in radians per second.,
          },
          [9] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_translation,
            ["doc"] = <span class="mark">READ ONLY</span>Current joint translation, usually in meters.
(Read only field, available from <code>physics.get_joint_properties()</code>),
          },
          [10] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_speed,
            ["doc"] = <span class="mark">READ ONLY</span>Current joint translation speed, usually in meters per second.
(Read only field, available from <code>physics.get_joint_properties()</code>),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The following properties are available when connecting a joint of <code>JOINT_TYPE_SLIDER</code> type:,
        ["name"] = physics.JOINT_TYPE_SLIDER,
        ["error"] = ,
        ["brief"] = slider joint type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = reference_angle,
            ["doc"] = <span class="mark">READ ONLY</span>The bodyB angle minus bodyA angle in the reference state (radians).,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = frequency,
            ["doc"] = The mass-spring-damper frequency in Hertz. Rotation only. Disable softness with a value of 0.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = The damping ratio. 0 = no damping, 1 = critical damping.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The following properties are available when connecting a joint of <code>JOINT_TYPE_WELD</code> type:,
        ["name"] = physics.JOINT_TYPE_WELD,
        ["error"] = ,
        ["brief"] = weld joint type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = local_axis_a,
            ["doc"] = The local translation unit axis in bodyA.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = max_motor_torque,
            ["doc"] = The maximum motor torque used to achieve the desired motor speed. Usually in N-m.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = motor_speed,
            ["doc"] = The desired motor speed in radians per second.,
          },
          [4] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enable_motor,
            ["doc"] = Enable/disable the joint motor.,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = frequency,
            ["doc"] = The mass-spring-damper frequency in Hertz. Rotation only. Disable softness with a value of 0.,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = damping,
            ["doc"] = The spring damping ratio. 0 = no damping, 1 = critical damping.,
          },
          [7] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_translation,
            ["doc"] = <span class="mark">READ ONLY</span>Current joint translation, usually in meters.
(Read only field, available from <code>physics.get_joint_properties()</code>),
          },
          [8] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_speed,
            ["doc"] = <span class="mark">READ ONLY</span>Current joint translation speed, usually in meters per second.
(Read only field, available from <code>physics.get_joint_properties()</code>),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The following properties are available when connecting a joint of <code>JOINT_TYPE_WHEEL</code> type:,
        ["name"] = physics.JOINT_TYPE_WHEEL,
        ["error"] = ,
        ["brief"] = wheel joint type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="mark">READ ONLY</span> Returns the defined physical mass of the collision object component as a number.,
        ["name"] = mass,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> collision object mass,
        ["type"] = PROPERTY,
        ["examples"] = How to query a collision object component's mass:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get mass from collision object component &quot;boulder&quot;</span>
<span class="kd">local</span> <span class="n">mass</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#boulder&quot;</span><span class="p">,</span> <span class="s2">&quot;mass&quot;</span><span class="p">)</span>
<span class="c1">-- do something useful</span>
<span class="nb">assert</span><span class="p">(</span><span class="n">mass</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = request_velocity and velocity_response,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The current linear velocity of the collision object component as a vector3.
The velocity is measured in units/s (pixels/s).,
        ["name"] = linear_velocity,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> collision object linear velocity,
        ["type"] = PROPERTY,
        ["examples"] = How to query and modify a collision object component's linear velocity:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get linear velocity from collision object &quot;collisionobject&quot; in gameobject &quot;ship&quot;</span>
<span class="kd">local</span> <span class="n">source</span> <span class="o">=</span> <span class="s2">&quot;ship#collisionobject&quot;</span>
<span class="kd">local</span> <span class="n">velocity</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s2">&quot;linear_velocity&quot;</span><span class="p">)</span>
<span class="c1">-- decrease it by 10%</span>
<span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s2">&quot;linear_velocity&quot;</span><span class="p">,</span> <span class="n">velocity</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">)</span>
<span class="c1">-- apply the velocity on target game object &quot;boulder&quot;&#39;s collision object as a force</span>
<span class="kd">local</span> <span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;boulder#collisionobject&quot;</span>
<span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_position</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
<span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s2">&quot;apply_force&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">force</span> <span class="o">=</span> <span class="n">velocity</span><span class="p">,</span> <span class="n">position</span> <span class="o">=</span> <span class="n">pos</span> <span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = request_velocity and velocity_response,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The current angular velocity of the collision object component as a <span class="type">vector3</span>.
The velocity is measured as a rotation around the vector with a speed equivalent to the vector length
in radians/s.,
        ["name"] = angular_velocity,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> collision object angular velocity,
        ["type"] = PROPERTY,
        ["examples"] = How to query and modify a collision object component's angular velocity:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get angular velocity from collision object &quot;collisionobject&quot; in gameobject &quot;boulder&quot;</span>
<span class="kd">local</span> <span class="n">velocity</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;boulder#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;angular_velocity&quot;</span><span class="p">)</span>
<span class="c1">-- do something interesting</span>
<span class="kr">if</span> <span class="n">velocity</span><span class="p">.</span><span class="n">z</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="kr">then</span>
    <span class="c1">-- clockwise rotation</span>
    <span class="p">...</span>
<span class="kr">else</span>
    <span class="c1">-- counter clockwise rotation</span>
    <span class="p">...</span>
<span class="kr">end</span>
<span class="c1">-- decrease it by 10%</span>
<span class="n">velocity</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">velocity</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="mf">0.9</span>
<span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;boulder#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;angular_velocity&quot;</span><span class="p">,</span> <span class="n">velocity</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The linear damping value for the collision object. Setting this value alters the damping of
linear motion of the object. Valid values are between 0 (no damping) and 1 (full damping).,
        ["name"] = linear_damping,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> collision object linear damping,
        ["type"] = PROPERTY,
        ["examples"] = How to increase a collision object component's linear damping:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get linear damping from collision object &quot;collisionobject&quot; in gameobject &quot;floater&quot;</span>
<span class="kd">local</span> <span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;floater#collisionobject&quot;</span>
<span class="kd">local</span> <span class="n">damping</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s2">&quot;linear_damping&quot;</span><span class="p">)</span>
<span class="c1">-- increase it by 10% if it&#39;s below 0.9</span>
<span class="kr">if</span> <span class="n">damping</span> <span class="o">&lt;=</span> <span class="mf">0.9</span> <span class="kr">then</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s2">&quot;linear_damping&quot;</span><span class="p">,</span> <span class="n">damping</span> <span class="o">*</span> <span class="mf">1.1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The angular damping value for the collision object. Setting this value alters the damping of
angular motion of the object (rotation). Valid values are between 0 (no damping) and 1 (full damping).,
        ["name"] = angular_damping,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> collision object angular damping,
        ["type"] = PROPERTY,
        ["examples"] = How to decrease a collision object component's angular damping:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get angular damping from collision object &quot;collisionobject&quot; in gameobject &quot;floater&quot;</span>
<span class="kd">local</span> <span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;floater#collisionobject&quot;</span>
<span class="kd">local</span> <span class="n">damping</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s2">&quot;angular_damping&quot;</span><span class="p">)</span>
<span class="c1">-- decrease it by 10%</span>
<span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s2">&quot;angular_damping&quot;</span><span class="p">,</span> <span class="n">damping</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = from,
            ["doc"] = the world position of the start of the ray,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = to,
            ["doc"] = the world position of the end of the ray,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = groups,
            ["doc"] = a lua table containing the hashed groups for which to test collisions against,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [request_id],
            ["doc"] = a number between [0,-255]. It will be sent back in the response for identification, 0 by default,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Ray casts are used to test for intersections against collision objects in the physics world.
Collision objects of types kinematic, dynamic and static are tested against. Trigger objects
do not intersect with ray casts.
Which collision objects to hit is filtered by their collision groups and can be configured
through <code>groups</code>.
The actual ray cast will be performed during the physics-update.
<ul>
<li>If an object is hit, the result will be reported via a <a href="#ray_cast_response">ray_cast_response</a> message.</li>
<li>If there is no object hit, the result will be reported via a <a href="#ray_cast_missed">ray_cast_missed</a> message.</li>
</ul>,
        ["name"] = physics.raycast_async,
        ["error"] = ,
        ["brief"] = requests a ray cast to be performed,
        ["type"] = FUNCTION,
        ["examples"] = How to perform a ray cast asynchronously:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_groups</span> <span class="o">=</span> <span class="p">{</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_group1&quot;</span><span class="p">),</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_group2&quot;</span><span class="p">)}</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- request ray cast</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">raycast_async</span><span class="p">(</span><span class="n">my_start</span><span class="p">,</span> <span class="n">my_end</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_groups</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="c1">-- check for the response</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;ray_cast_response&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- act on the hit</span>
    <span class="kr">elseif</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;ray_cast_missed&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- act on the miss</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = from,
            ["doc"] = the world position of the start of the ray,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = to,
            ["doc"] = the world position of the end of the ray,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = groups,
            ["doc"] = a lua table containing the hashed groups for which to test collisions against,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = a lua table containing options for the raycast.
<dl>
<dt><code>all</code></dt>
<dd><span class="type">boolean</span> Set to <code>true</code> to return all ray cast hits. If <code>false</code>, it will only return the closest hit.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Ray casts are used to test for intersections against collision objects in the physics world.
Collision objects of types kinematic, dynamic and static are tested against. Trigger objects
do not intersect with ray casts.
Which collision objects to hit is filtered by their collision groups and can be configured
through <code>groups</code>.,
        ["name"] = physics.raycast,
        ["error"] = ,
        ["brief"] = requests a ray cast to be performed,
        ["type"] = FUNCTION,
        ["examples"] = How to perform a ray cast synchronously:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">groups</span> <span class="o">=</span> <span class="p">{</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;world&quot;</span><span class="p">),</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;enemy&quot;</span><span class="p">)}</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- request ray cast</span>
    <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">raycast</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">groups</span><span class="p">,</span> <span class="p">{</span><span class="n">all</span><span class="o">=</span><span class="kc">true</span><span class="p">})</span>
    <span class="kr">if</span> <span class="n">result</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="kr">then</span>
        <span class="c1">-- act on the hit (see &#39;ray_cast_response&#39;)</span>
        <span class="kr">for</span> <span class="n">_</span><span class="p">,</span><span class="n">result</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">results</span><span class="p">)</span> <span class="kr">do</span>
            <span class="n">handle_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = result,
            ["doc"] = It returns a list. If missed it returns <code>nil</code>. See <a href="#ray_cast_response">ray_cast_response</a> for details on the returned values.,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = joint_type,
            ["doc"] = the joint type,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject_a,
            ["doc"] = first collision object,
          },
          [3] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = joint_id,
            ["doc"] = id of the joint,
          },
          [4] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position_a,
            ["doc"] = local position where to attach the joint on the first collision object,
          },
          [5] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject_b,
            ["doc"] = second collision object,
          },
          [6] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position_b,
            ["doc"] = local position where to attach the joint on the second collision object,
          },
          [7] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [properties],
            ["doc"] = optional joint specific properties table
See each joint type for possible properties field. The one field that is accepted for all joint types is:
- <span class="type">boolean</span> <code>collide_connected</code>: Set this flag to true if the attached bodies should collide.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Create a physics joint between two collision object components.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.create_joint,
        ["error"] = ,
        ["brief"] = create a physics joint,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject,
            ["doc"] = collision object where the joint exist,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = joint_id,
            ["doc"] = id of the joint,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Destroy an already physics joint. The joint has to be created before a
destroy can be issued.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.destroy_joint,
        ["error"] = ,
        ["brief"] = destroy a physics joint,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject,
            ["doc"] = collision object where the joint exist,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = joint_id,
            ["doc"] = id of the joint,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a table for properties for a connected joint. The joint has to be created before
properties can be retrieved.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.get_joint_properties,
        ["error"] = ,
        ["brief"] = get properties for a joint,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = properties,
            ["doc"] = properties table. See the joint types for what fields are available, the only field available for all types is:
<ul>
<li><span class="type">boolean</span> <code>collide_connected</code>: Set this flag to true if the attached bodies should collide.</li>
</ul>,
          },
        },
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject,
            ["doc"] = collision object where the joint exist,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = joint_id,
            ["doc"] = id of the joint,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = properties,
            ["doc"] = joint specific properties table
Note: The <code>collide_connected</code> field cannot be updated/changed after a connection has been made.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Updates the properties for an already connected joint. The joint has to be created before
properties can be changed.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.set_joint_properties,
        ["error"] = ,
        ["brief"] = set properties for a joint,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject,
            ["doc"] = collision object where the joint exist,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = joint_id,
            ["doc"] = id of the joint,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the reaction force for a joint. The joint has to be created before
the reaction force can be calculated.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.get_joint_reaction_force,
        ["error"] = ,
        ["brief"] = get the reaction force for a joint,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = force,
            ["doc"] = reaction force for the joint,
          },
        },
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject,
            ["doc"] = collision object where the joint exist,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = joint_id,
            ["doc"] = id of the joint,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the reaction torque for a joint. The joint has to be created before
the reaction torque can be calculated.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.get_joint_reaction_torque,
        ["error"] = ,
        ["brief"] = get the reaction torque for a joint,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = float,
            },
            ["name"] = torque,
            ["doc"] = the reaction torque on bodyB in N*m.,
          },
        },
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = gravity,
            ["doc"] = the new gravity vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the gravity in runtime. The gravity change is not global, it will only affect
the collection that the function is called from.
Note: For 2D physics the z component of the gravity vector will be ignored.,
        ["name"] = physics.set_gravity,
        ["error"] = ,
        ["brief"] = set the gravity for collection,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- Set &quot;upside down&quot; gravity for this collection.</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_gravity</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the gravity in runtime. The gravity returned is not global, it will return
the gravity for the collection that the function is called from.
Note: For 2D physics the z component will always be zero.,
        ["name"] = physics.get_gravity,
        ["error"] = ,
        ["brief"] = get the gravity for collection,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">gravity</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">get_gravity</span><span class="p">()</span>
    <span class="c1">-- Inverse gravity!</span>
    <span class="n">gravity</span> <span class="o">=</span> <span class="o">-</span><span class="n">gravity</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_gravity</span><span class="p">(</span><span class="n">gravity</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = gravity,
            ["doc"] = gravity vector of collection,
          },
        },
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object that should flip its shapes,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flip,
            ["doc"] = <code>true</code> if the collision object should flip its shapes, <code>false</code> if not,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Flips the collision shapes horizontally for a collision object,
        ["name"] = physics.set_hflip,
        ["error"] = ,
        ["brief"] = flip the geometry horizontally for a collision object,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">fliph</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- set on some condition</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_hflip</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">fliph</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object that should flip its shapes,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flip,
            ["doc"] = <code>true</code> if the collision object should flip its shapes, <code>false</code> if not,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Flips the collision shapes vertically for a collision object,
        ["name"] = physics.set_vflip,
        ["error"] = ,
        ["brief"] = flip the geometry vertically for a collision object,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">flipv</span> <span class="o">=</span> <span class="kc">true</span> <span class="c1">-- set on some condition</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_vflip</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">flipv</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object to wake.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_input</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action_id</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">action_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">action</span><span class="p">.</span><span class="n">pressed</span> <span class="kr">then</span>
        <span class="n">physics</span><span class="p">.</span><span class="n">wakeup</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Collision objects tend to fall asleep when inactive for a small period of time for
efficiency reasons. This function wakes them up.,
        ["name"] = physics.wakeup,
        ["error"] = ,
        ["brief"] = explicitly wakeup a collision object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object affected.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = group,
            ["doc"] = the new group name to be assigned.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">change_collision_group</span><span class="p">()</span>
     <span class="n">physics</span><span class="p">.</span><span class="n">set_group</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;enemy&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Updates the group property of a collision object to the specified
string value. The group name should exist i.e. have been used in
a collision object in the editor.,
        ["name"] = physics.set_group,
        ["error"] = ,
        ["brief"] = change the group of a collision object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object to return the group of.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the group name of a collision object as a hash.,
        ["name"] = physics.get_group,
        ["error"] = ,
        ["brief"] = returns the group of a collision object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = group,
            ["doc"] = hash value of the group.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">check_is_enemy</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">group</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">get_group</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">)</span>
    <span class="kr">return</span> <span class="n">group</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;enemy&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object to change the mask of.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = group,
            ["doc"] = the name of the group (maskbit) to modify in the mask.,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = maskbit,
            ["doc"] = boolean value of the new maskbit. 'true' to enable, 'false' to disable.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">make_invincible</span><span class="p">()</span>
    <span class="c1">-- no longer collide with the &quot;bullet&quot; group</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_maskbit</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;bullet&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets or clears the masking of a group (maskbit) in a collision object.,
        ["name"] = physics.set_maskbit,
        ["error"] = ,
        ["brief"] = updates the mask of a collision object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object to check the mask of.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = group,
            ["doc"] = the name of the group to check for.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns true if the specified group is set in the mask of a collision
object, false otherwise.,
        ["name"] = physics.get_maskbit,
        ["error"] = ,
        ["brief"] = checks the presense of a group in the mask (maskbit) of a collision object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = maskbit,
            ["doc"] = boolean value of the maskbit. 'true' if present, 'false' otherwise.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">is_invincible</span><span class="p">()</span>
    <span class="c1">-- check if the collisionobject would collide with the &quot;bullet&quot; group</span>
    <span class="kd">local</span> <span class="n">invincible</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">get_maskbit</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;bullet&quot;</span><span class="p">)</span>
    <span class="kr">return</span> <span class="n">invincible</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = physics.SHAPE_TYPE_SPHERE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = physics.SHAPE_TYPE_BOX,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = physics.SHAPE_TYPE_CAPSULE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = physics.SHAPE_TYPE_HULL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = shape,
            ["doc"] = the name of the shape to get data for.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets collision shape data from a collision object,
        ["name"] = physics.get_shape,
        ["error"] = ,
        ["brief"] = get collision shape info,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing meta data about the physics shape
<dl>
<dt><code>type</code></dt>
<dd><span class="type">number</span> The shape type. Supported values:</dd>
</dl>
<ul>
<li><code>physics.SHAPE_TYPE_SPHERE</code></li>
<li><code>physics.SHAPE_TYPE_BOX</code></li>
<li><code>physics.SHAPE_TYPE_CAPSULE</code> <em>Only supported for 3D physics</em></li>
<li><code>physics.SHAPE_TYPE_HULL</code></li>
</ul>
The returned table contains different fields depending on which type the shape is.
If the shape is a sphere:
<dl>
<dt><code>diameter</code></dt>
<dd><span class="type">number</span> the diameter of the sphere shape</dd>
</dl>
If the shape is a box:
<dl>
<dt><code>dimensions</code></dt>
<dd><span class="type">vector3</span> a <code>vmath.vector3</code> of the box dimensions</dd>
</dl>
If the shape is a capsule:
<dl>
<dt><code>diameter</code></dt>
<dd><span class="type">number</span> the diameter of the capsule poles</dd>
<dt><code>height</code></dt>
<dd><span class="type">number</span> the height of the capsule</dd>
</dl>
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">get_shape_meta</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">sphere</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">get_shape</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;my_sphere_shape&quot;</span><span class="p">)</span>
    <span class="c1">-- returns a table with sphere.diameter</span>
    <span class="kr">return</span> <span class="n">sphere</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the collision object.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = shape,
            ["doc"] = the name of the shape to get data for.,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = the shape data to update the shape with.
See <a href="/ref/physics#physics.get_shape">physics.get_shape</a> for a detailed description of each field in the data table.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">set_shape_data</span><span class="p">()</span>
    <span class="c1">-- set capsule shape data</span>
    <span class="kd">local</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">data</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">SHAPE_TYPE_CAPSULE</span>
    <span class="n">data</span><span class="p">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">data</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_shape</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;my_capsule_shape&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="c1">-- set sphere shape data</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">data</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">SHAPE_TYPE_SPHERE</span>
    <span class="n">data</span><span class="p">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_shape</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;my_sphere_shape&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="c1">-- set box shape data</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">data</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">physics</span><span class="p">.</span><span class="n">SHAPE_TYPE_BOX</span>
    <span class="n">data</span><span class="p">.</span><span class="n">dimensions</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_shape</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="s2">&quot;my_box_shape&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets collision shape data for a collision object. Please note that updating data in 3D
can be quite costly for box and capsules. Because of the physics engine, the cost
comes from having to recreate the shape objects when certain shapes needs to be updated.,
        ["name"] = physics.set_shape,
        ["error"] = ,
        ["brief"] = set collision shape data,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = function(self, event, data),
              [2] = nil,
            },
            ["name"] = callback,
            ["doc"] = A callback that receives information about all the physics interactions in this physics world.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The calling script</dd>
<dt><code>event</code></dt>
<dd><span class="type">constant</span> The type of event. Can be one of these messages:</dd>
</dl>
<ul>
<li><a href="#contact_point_event">contact_point_event</a></li>
<li><a href="#collision_event">collision_event</a></li>
<li><a href="#trigger_event">trigger_event</a></li>
<li><a href="#ray_cast_response">ray_cast_response</a></li>
<li><a href="#ray_cast_missed">ray_cast_missed</a></li>
</ul>
<dl>
<dt><code>data</code></dt>
<dd><span class="type">table</span> The callback value data is a table that contains event-related data. See the documentation for details on the messages.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = sets a physics world event listener. If a function is set, physics messages will no longer be sent.,
        ["name"] = physics.set_listener,
        ["error"] = ,
        ["brief"] = sets a physics world event listener. If a function is set, physics messages will no longer be sent.,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">physics_world_listener</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">event</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;contact_point_event&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">-- {</span>
    <span class="c1">--  distance = 0.0714111328125,</span>
    <span class="c1">--  applied_impulse = 310.00769042969,</span>
    <span class="c1">--  a = {</span>
    <span class="c1">--      position = vmath.vector3(446, 371, 0),</span>
    <span class="c1">--      relative_velocity = vmath.vector3(1.1722083854693e-06, -20.667181015015, -0),</span>
    <span class="c1">--      mass = 0,</span>
    <span class="c1">--      group = hash: [default],</span>
    <span class="c1">--      id = hash: [/flat],</span>
    <span class="c1">--      normal = vmath.vector3(-0, -1, -0)</span>
    <span class="c1">--  },</span>
    <span class="c1">--  b = {</span>
    <span class="c1">--      position = vmath.vector3(185, 657.92858886719, 0),</span>
    <span class="c1">--      relative_velocity = vmath.vector3(-1.1722083854693e-06, 20.667181015015, 0),</span>
    <span class="c1">--      mass = 10,</span>
    <span class="c1">--      group = hash: [default],</span>
    <span class="c1">--      id = hash: [/go2],</span>
    <span class="c1">--      normal = vmath.vector3(0, 1, 0)</span>
    <span class="c1">--  }</span>
    <span class="c1">-- }</span>
  <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;collision_event&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">-- {</span>
    <span class="c1">--  a = {</span>
    <span class="c1">--          group = hash: [default],</span>
    <span class="c1">--          position = vmath.vector3(183, 666, 0),</span>
    <span class="c1">--          id = hash: [/go1]</span>
    <span class="c1">--      },</span>
    <span class="c1">--  b = {</span>
    <span class="c1">--          group = hash: [default],</span>
    <span class="c1">--          position = vmath.vector3(185, 704.05865478516, 0),</span>
    <span class="c1">--          id = hash: [/go2]</span>
    <span class="c1">--      }</span>
    <span class="c1">-- }</span>
  <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span>  <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;trigger_event&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">-- {</span>
    <span class="c1">--  enter = true,</span>
    <span class="c1">--  b = {</span>
    <span class="c1">--      group = hash: [default],</span>
    <span class="c1">--      id = hash: [/go2]</span>
    <span class="c1">--  },</span>
    <span class="c1">--  a = {</span>
    <span class="c1">--      group = hash: [default],</span>
    <span class="c1">--      id = hash: [/go1]</span>
    <span class="c1">--  }</span>
    <span class="c1">-- },</span>
  <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span>  <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;ray_cast_response&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">--{</span>
    <span class="c1">--  group = hash: [default],</span>
    <span class="c1">--  request_id = 0,</span>
    <span class="c1">--  position = vmath.vector3(249.92222595215, 249.92222595215, 0),</span>
    <span class="c1">--  fraction = 0.68759721517563,</span>
    <span class="c1">--  normal = vmath.vector3(0, 1, 0),</span>
    <span class="c1">--  id = hash: [/go]</span>
    <span class="c1">-- }</span>
  <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span>  <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;ray_cast_missed&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">-- {</span>
    <span class="c1">--  request_id = 0</span>
    <span class="c1">--},</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">physics</span><span class="p">.</span><span class="n">set_listener</span><span class="p">(</span><span class="n">physics_world_listener</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = collisionobject,
            ["doc"] = the collision object whose mass needs to be updated.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = mass,
            ["doc"] = the new mass value to set for the collision object.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function recalculates the density of each shape based on the total area of all shapes and the specified mass, then updates the mass of the body accordingly.
Note: Currently only supported in 2D physics.,
        ["name"] = physics.update_mass,
        ["error"] = ,
        ["brief"] = updates the mass of a dynamic 2D collision object in the physics world.,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code> <span class="n">physics</span><span class="p">.</span><span class="n">update_mass</span><span class="p">(</span><span class="s2">&quot;#collisionobject&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = force,
            ["doc"] = the force to be applied on the collision object, measured in Newton,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = the position where the force should be applied,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a collision-object-component to apply the specified force on the collision object.
The collision object must be dynamic.,
        ["name"] = apply_force,
        ["error"] = ,
        ["brief"] = applies a force on a collision object,
        ["type"] = MESSAGE,
        ["examples"] = Assuming the instance of the script has a collision-object-component with id "co":
<div class="codehilite"><pre><span></span><code><span class="c1">-- apply a force of 1 Newton towards world-x at the center of the game object instance</span>
<span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#co&quot;</span><span class="p">,</span> <span class="s2">&quot;apply_force&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">force</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">position</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get_world_position</span><span class="p">()})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = other_id,
            ["doc"] = the id of the instance the collision object collided with,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = other_position,
            ["doc"] = the world position of the instance the collision object collided with,
          },
          [3] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = other_group,
            ["doc"] = the collision group of the other collision object,
          },
          [4] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = own_group,
            ["doc"] = the collision group of the own collision object,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is broadcasted to every component of an instance that has a collision object,
when the collision object collides with another collision object. For a script to take action
when such a collision happens, it should check for this message in its <code>on_message</code> callback
function.
This message only reports that a collision actually happened and will only be sent once per
colliding pair and frame.
To retrieve more detailed information, check for the <code>contact_point_response</code> instead.,
        ["name"] = collision_response,
        ["error"] = ,
        ["brief"] = reports a collision between two collision objects,
        ["type"] = MESSAGE,
        ["examples"] = How to take action when a collision occurs:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="c1">-- check for the message</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;collision_response&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- take action</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = world position of the contact point,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = normal,
            ["doc"] = normal in world space of the contact point, which points from the other object towards the current object,
          },
          [3] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = relative_velocity,
            ["doc"] = the relative velocity of the collision object as observed from the other object,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = distance,
            ["doc"] = the penetration distance between the objects, which is always positive,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = applied_impulse,
            ["doc"] = the impulse the contact resulted in,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = life_time,
            ["doc"] = life time of the contact, <strong>not currently used</strong>,
          },
          [7] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = mass,
            ["doc"] = the mass of the current collision object in kg,
          },
          [8] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = other_mass,
            ["doc"] = the mass of the other collision object in kg,
          },
          [9] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = other_id,
            ["doc"] = the id of the instance the collision object is in contact with,
          },
          [10] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = other_position,
            ["doc"] = the world position of the other collision object,
          },
          [11] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = other_group,
            ["doc"] = the collision group of the other collision object,
          },
          [12] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = own_group,
            ["doc"] = the collision group of the own collision object,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is broadcasted to every component of an instance that has a collision object,
when the collision object has contact points with respect to another collision object.
For a script to take action when such contact points occur, it should check for this message
in its <code>on_message</code> callback function.
Since multiple contact points can occur for two colliding objects, this message can be sent
multiple times in the same frame for the same two colliding objects. To only be notified once
when the collision occurs, check for the <code>collision_response</code> message instead.,
        ["name"] = contact_point_response,
        ["error"] = ,
        ["brief"] = reports a contact point between two collision objects,
        ["type"] = MESSAGE,
        ["examples"] = How to take action when a contact point occurs:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="c1">-- check for the message</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;contact_point_response&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- take action</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = other_id,
            ["doc"] = the id of the instance the collision object collided with,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enter,
            ["doc"] = if the interaction was an entry or not,
          },
          [3] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = other_group,
            ["doc"] = the collision group of the triggering collision object,
          },
          [4] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = own_group,
            ["doc"] = the collision group of the own collision object,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is broadcasted to every component of an instance that has a collision object,
when the collision object interacts with another collision object and one of them is a trigger.
For a script to take action when such an interaction happens, it should check for this message
in its <code>on_message</code> callback function.
This message only reports that an interaction actually happened and will only be sent once per
colliding pair and frame. To retrieve more detailed information, check for the
<code>contact_point_response</code> instead.,
        ["name"] = trigger_response,
        ["error"] = ,
        ["brief"] = reports interaction (enter/exit) between a trigger collision object and another collision object,
        ["type"] = MESSAGE,
        ["examples"] = How to take action when a trigger interaction occurs:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="c1">-- check for the message</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;trigger_response&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kr">if</span> <span class="n">message</span><span class="p">.</span><span class="n">enter</span> <span class="kr">then</span>
            <span class="c1">-- take action for entry</span>
        <span class="kr">else</span>
            <span class="c1">-- take action for exit</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = fraction,
            ["doc"] = the fraction of the hit measured along the ray, where 0 is the start of the ray and 1 is the end,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = the world position of the hit,
          },
          [3] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = normal,
            ["doc"] = the normal of the surface of the collision object where it was hit,
          },
          [4] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = the instance id of the hit collision object,
          },
          [5] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = group,
            ["doc"] = the collision group of the hit collision object as a hashed name,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = request_id,
            ["doc"] = id supplied when the ray cast was requested,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent back to the sender of a <a href="#ray_cast_request">ray_cast_request</a>, or to the physics world listener
if it is set (see <a href="/ref/physics#physics.set_listener">physics.set_listener</a>), if the ray hits a collision object.
See <a href="/ref/physics#physics.raycast_async">physics.raycast_async</a> for examples of how to use it.,
        ["name"] = ray_cast_response,
        ["error"] = ,
        ["brief"] = reports a ray cast hit,
        ["type"] = MESSAGE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = request_id,
            ["doc"] = id supplied when the ray cast was requested,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent back to the sender of a <a href="#ray_cast_request">ray_cast_request</a>, or to the physics world listener
if it is set (see <a href="/ref/physics#physics.set_listener">physics.set_listener</a>), if the ray didn't hit any collision object.
See <a href="/ref/physics#physics.raycast_async">physics.raycast_async</a> for examples of how to use it.,
        ["name"] = ray_cast_missed,
        ["error"] = ,
        ["brief"] = reports a ray cast miss,
        ["type"] = MESSAGE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = applied_impulse,
            ["doc"] = the impulse the contact resulted in,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = distance,
            ["doc"] = the penetration distance between the objects, which is always positive,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = a,
            ["doc"] = contact point information for object A
<dl>
<dt><code>position</code></dt>
<dd><span class="type">vector3</span> The world position of object A</dd>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The ID of object A</dd>
<dt><code>group</code></dt>
<dd><span class="type">hash</span> The collision group of object A</dd>
<dt><code>relative_velocity</code></dt>
<dd><span class="type">vector3</span> The relative velocity of the collision object A as observed from B object</dd>
<dt><code>mass</code></dt>
<dd><span class="type">number</span> The mass of the collision object A in kg</dd>
<dt><code>normal</code></dt>
<dd><span class="type">vector3</span> normal in world space of the contact point, which points from B object towards A object</dd>
</dl>,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = b,
            ["doc"] = contact point information for object B
<dl>
<dt><code>position</code></dt>
<dd><span class="type">vector3</span> The world position of object B</dd>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The ID of object B</dd>
<dt><code>group</code></dt>
<dd><span class="type">hash</span> The collision group of object B</dd>
<dt><code>relative_velocity</code></dt>
<dd><span class="type">vector3</span> The relative velocity of the collision object B as observed from A object</dd>
<dt><code>mass</code></dt>
<dd><span class="type">number</span> The mass of the collision object B in kg</dd>
<dt><code>normal</code></dt>
<dd><span class="type">vector3</span> normal in world space of the contact point, which points from A object towards B object</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = See <a href="/ref/physics#physics.set_listener">physics.set_listener</a>.
This message is sent to a function specified in <a href="/ref/physics#physics.set_listener">physics.set_listener</a> when
a collision object has contact points with another collision object.
Since multiple contact points can occur for two colliding objects, this event can be sent
multiple times in the same frame for the same two colliding objects. To only be notified once
when the collision occurs, check for the <a href="#collision_event">collision_event</a> event instead.,
        ["name"] = contact_point_event,
        ["error"] = ,
        ["brief"] = reports a contact point between two collision objects in cases where a listener is specified.,
        ["type"] = MESSAGE,
        ["examples"] = How to take action when a contact point occurs:
<div class="codehilite"><pre><span></span><code><span class="n">physics</span><span class="p">.</span><span class="n">set_listener</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
 <span class="kr">if</span> <span class="n">event</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;contact_point_event&quot;</span><span class="p">)</span> <span class="kr">then</span>
     <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
     <span class="c1">-- {</span>
     <span class="c1">--  applied_impulse = 310.00769042969,</span>
     <span class="c1">--  distance = 0.0714111328125,</span>
     <span class="c1">--  a = {</span>
     <span class="c1">--      position = vmath.vector3(446, 371, 0),</span>
     <span class="c1">--      relative_velocity = vmath.vector3(1.1722083854693e-06, -20.667181015015, -0),</span>
     <span class="c1">--      mass = 0,</span>
     <span class="c1">--      group = hash: [default],</span>
     <span class="c1">--      id = hash: [/flat],</span>
     <span class="c1">--      normal = vmath.vector3(-0, -1, -0)</span>
     <span class="c1">--  },</span>
     <span class="c1">--  b = {</span>
     <span class="c1">--      position = vmath.vector3(185, 657.92858886719, 0),</span>
     <span class="c1">--      relative_velocity = vmath.vector3(-1.1722083854693e-06, 20.667181015015, 0),</span>
     <span class="c1">--      mass = 10,</span>
     <span class="c1">--      group = hash: [default],</span>
     <span class="c1">--      id = hash: [/go2],</span>
     <span class="c1">--      normal = vmath.vector3(0, 1, 0)</span>
     <span class="c1">--  },</span>
     <span class="c1">-- }</span>
  <span class="kr">end</span>
<span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = a,
            ["doc"] = collision information for object A
<dl>
<dt><code>position</code></dt>
<dd><span class="type">vector3</span> The world position of object A</dd>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The ID of object A</dd>
<dt><code>group</code></dt>
<dd><span class="type">hash</span> The collision group of object A</dd>
</dl>,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = b,
            ["doc"] = collision information for object B
<dl>
<dt><code>position</code></dt>
<dd><span class="type">vector3</span> The world position of object B</dd>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The ID of object B</dd>
<dt><code>group</code></dt>
<dd><span class="type">hash</span> The collision group of object B</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = See <a href="/ref/physics#physics.set_listener">physics.set_listener</a>.
This message is sent to a function specified in <a href="/ref/physics#physics.set_listener">physics.set_listener</a>
when two collision objects collide.
This message only reports that a collision has occurred and will be sent once per frame and per colliding pair.
For more detailed information, check for the <a href="#contact_point_event">contact_point_event</a>.,
        ["name"] = collision_event,
        ["error"] = ,
        ["brief"] = reports a collision between two collision objects in cases where a listener is specified.,
        ["type"] = MESSAGE,
        ["examples"] = How to take action when a collision occurs:
<div class="codehilite"><pre><span></span><code><span class="n">physics</span><span class="p">.</span><span class="n">set_listener</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">event</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;collision_event&quot;</span><span class="p">)</span> <span class="kr">then</span>
      <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="c1">-- {</span>
      <span class="c1">--  a = {</span>
      <span class="c1">--          group = hash: [default],</span>
      <span class="c1">--          position = vmath.vector3(183, 666, 0),</span>
      <span class="c1">--          id = hash: [/go1]</span>
      <span class="c1">--      },</span>
      <span class="c1">--  b = {</span>
      <span class="c1">--          group = hash: [default],</span>
      <span class="c1">--          position = vmath.vector3(185, 704.05865478516, 0),</span>
      <span class="c1">--          id = hash: [/go2]</span>
      <span class="c1">--      }</span>
      <span class="c1">-- }</span>
  <span class="kr">end</span>
<span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enter,
            ["doc"] = if the interaction was an entry or not,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = a,
            ["doc"] = <dl>
<dt>interaction information for object A</dt>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The ID of object A</dd>
<dt><code>group</code></dt>
<dd><span class="type">hash</span> The collision group of object A</dd>
</dl>,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = b,
            ["doc"] = collision information for object B
<dl>
<dt><code>id</code></dt>
<dd><span class="type">hash</span> The ID of object B</dd>
<dt><code>group</code></dt>
<dd><span class="type">hash</span> The collision group of object B</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = See <a href="/ref/physics#physics.set_listener">physics.set_listener</a>.
This message is sent to a function specified in <a href="/ref/physics#physics.set_listener">physics.set_listener</a>
when a collision object interacts with another collision object and one of them is a trigger.
This message only reports that an interaction actually happened and will be sent once per colliding pair and frame.
For more detailed information, check for the <a href="#contact_point_event">contact_point_event</a>.,
        ["name"] = trigger_event,
        ["error"] = ,
        ["brief"] = reports interaction (enter/exit) between a trigger collision object and another collision object,
        ["type"] = MESSAGE,
        ["examples"] = How to take action when a trigger interaction occurs:
<div class="codehilite"><pre><span></span><code><span class="n">physics</span><span class="p">.</span><span class="n">set_listener</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
 <span class="kr">if</span> <span class="n">event</span> <span class="o">==</span>  <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;trigger_event&quot;</span><span class="p">)</span> <span class="kr">then</span>
     <span class="kr">if</span> <span class="n">data</span><span class="p">.</span><span class="n">enter</span> <span class="kr">then</span>
        <span class="c1">-- take action for entry</span>
     <span class="kr">else</span>
        <span class="c1">-- take action for exit</span>
     <span class="kr">end</span>
     <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
     <span class="c1">-- {</span>
     <span class="c1">--  enter = true,</span>
     <span class="c1">--  b = {</span>
     <span class="c1">--      group = hash: [default],</span>
     <span class="c1">--      id = hash: [/go2]</span>
     <span class="c1">--  },</span>
     <span class="c1">--  a = {</span>
     <span class="c1">--      group = hash: [default],</span>
     <span class="c1">--      id = hash: [/go1]</span>
     <span class="c1">--  }</span>
     <span class="c1">-- },</span>
  <span class="kr">end</span>
<span class="kr">end</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Collision object physics API documentation,
      ["name"] = Collision object,
      ["notes"] = {},
      ["namespace"] = physics,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Collision object physics API documentation,
    },
  },
  [23] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the amount of memory used (resident/working set) by the application in bytes, as reported by the OS.
<span class="icon-attention"></span> This function is not available on <span class="icon-html5"></span> HTML5.
The values are gathered from internal OS functions which correspond to the following;
<table>
<thead>
<tr>
<th>OS</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="icon-ios"></span> iOS<br/><span class="icon-macos"></span> MacOS<br/><span class="icon-android"></span><br/>Android<br/><span class="icon-linux"></span> Linux</td>
<td><a href="https://en.wikipedia.org/wiki/Resident_set_size">Resident memory</a></td>
</tr>
<tr>
<td><span class="icon-windows"></span> Windows</td>
<td><a href="https://en.wikipedia.org/wiki/Working_set">Working set</a></td>
</tr>
<tr>
<td><span class="icon-html5"></span> HTML5</td>
<td><span class="icon-attention"></span> Not available</td>
</tr>
</tbody>
</table>,
        ["name"] = profiler.get_memory_usage,
        ["error"] = ,
        ["brief"] = get current memory usage for app reported by OS,
        ["type"] = FUNCTION,
        ["examples"] = Get memory usage before and after loading a collection:
<div class="codehilite"><pre><span></span><code><span class="nb">print</span><span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">get_memory_usage</span><span class="p">())</span>
<span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#collectionproxy&quot;</span><span class="p">,</span> <span class="s2">&quot;load&quot;</span><span class="p">)</span>
<span class="p">...</span>
<span class="nb">print</span><span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">get_memory_usage</span><span class="p">())</span> <span class="c1">-- will report a higher number than the initial call</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = bytes,
            ["doc"] = used by the application,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the percent of CPU usage by the application, as reported by the OS.
<span class="icon-attention"></span> This function is not available on <span class="icon-html5"></span> HTML5.
For some platforms (<span class="icon-android"></span> Android, <span class="icon-linux"></span> Linux and <span class="icon-windows"></span> Windows), this information is only available
by default in the debug version of the engine. It can be enabled in release version as well
by checking <code>track_cpu</code> under <code>profiler</code> in the <code>game.project</code> file.
(This means that the engine will sample the CPU usage in intervalls during execution even in release mode.),
        ["name"] = profiler.get_cpu_usage,
        ["error"] = ,
        ["brief"] = get current CPU usage for app reported by OS,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = percent,
            ["doc"] = of CPU used by the application,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = enabled,
            ["doc"] = true to enable, false to disable,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates and shows or hides and destroys the on-sceen profiler ui
The profiler is a real-time tool that shows the numbers of milliseconds spent
in each scope per frame as well as counters. The profiler is very useful for
tracking down performance and resource problems.,
        ["name"] = profiler.enable_ui,
        ["error"] = ,
        ["brief"] = enables or disables the on-screen profiler ui,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Show the profiler UI</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">enable_ui</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = mode,
            ["doc"] = the mode to set the ui profiler in
<ul>
<li><code>profiler.MODE_RUN</code> This is default mode that continously shows the last frame</li>
<li><code>profiler.MODE_PAUSE</code> Pauses on the currently displayed frame</li>
<li><code>profiler.MODE_SHOW_PEAK_FRAME</code> Pauses on the currently displayed frame but shows a new frame if that frame is slower</li>
<li><code>profiler.MODE_RECORD</code> Records all incoming frames to the recording buffer</li>
</ul>
To stop recording, switch to a different mode such as <code>MODE_PAUSE</code> or <code>MODE_RUN</code>.
You can also use the <code>view_recorded_frame</code> function to display a recorded frame. Doing so stops the recording as well.
Every time you switch to recording mode the recording buffer is cleared.
The recording buffer is also cleared when setting the <code>MODE_SHOW_PEAK_FRAME</code> mode.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the on-screen profile mode - run, pause, record or show peak frame,
        ["name"] = profiler.set_ui_mode,
        ["error"] = ,
        ["brief"] = sets the the on-screen profiler ui mode,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">start_recording</span><span class="p">()</span>
     <span class="n">profiler</span><span class="p">.</span><span class="n">set_ui_mode</span><span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">MODE_RECORD</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">stop_recording</span><span class="p">()</span>
     <span class="n">profiler</span><span class="p">.</span><span class="n">set_ui_mode</span><span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">MODE_PAUSE</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = mode,
            ["doc"] = the view mode to set the ui profiler in
<ul>
<li><code>profiler.VIEW_MODE_FULL</code> The default mode which displays all the ui profiler details</li>
<li><code>profiler.VIEW_MODE_MINIMIZED</code> Minimized mode which only shows the top header (fps counters and ui profiler mode)</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the on-screen profile view mode - minimized or expanded,
        ["name"] = profiler.set_ui_view_mode,
        ["error"] = ,
        ["brief"] = sets the the on-screen profiler ui view mode,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Minimize the profiler view</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">set_ui_view_mode</span><span class="p">(</span><span class="n">profiler</span><span class="p">.</span><span class="n">VIEW_MODE_MINIMIZED</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = visible,
            ["doc"] = true to include it in the display, false to hide it.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Shows or hides the time the engine waits for vsync in the on-screen profiler
Each frame the engine waits for vsync and depending on your vsync settings and how much time
your game logic takes this time can dwarf the time in the game logic making it hard to
see details in the on-screen profiler graph and lists.
Also, by hiding this the FPS times in the header show the time spent each time excuding the
time spent waiting for vsync. This shows you how long time your game is spending actively
working each frame.
This setting also effects the display of recorded frames but does not affect the actual
recorded frames so it is possible to toggle this on and off when viewing recorded frames.
By default the vsync wait times is displayed in the profiler.,
        ["name"] = profiler.set_ui_vsync_wait_visible,
        ["error"] = ,
        ["brief"] = Shows or hides the vsync wait time in the on-screen profiler ui,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Exclude frame wait time form the profiler ui</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">set_ui_vsync_wait_visible</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the number of recorded frames in the on-screen profiler ui recording buffer,
        ["name"] = profiler.recorded_frame_count,
        ["error"] = ,
        ["brief"] = get the number of recorded frames in the on-screen profiler ui,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Show the last recorded frame</span>
<span class="kd">local</span> <span class="n">recorded_frame_count</span> <span class="o">=</span> <span class="n">profiler</span><span class="p">.</span><span class="n">recorded_frame_count</span><span class="p">()</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">view_recorded_frame</span><span class="p">(</span><span class="n">recorded_frame_count</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = frame_count,
            ["doc"] = the number of recorded frames, zero if on-screen profiler is disabled,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = frame_index,
            ["doc"] = a table where you specify one of the following parameters:
<ul>
<li><code>distance</code> The offset from the currently displayed frame (this is truncated between zero and the number of recorded frames)</li>
<li><code>frame</code> The frame index in the recording buffer (1 is first recorded frame)</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Pauses and displays a frame from the recording buffer in the on-screen profiler ui
The frame to show can either be an absolute frame or a relative frame to the current frame.,
        ["name"] = profiler.view_recorded_frame,
        ["error"] = ,
        ["brief"] = displays a previously recorded frame in the on-screen profiler ui,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Go back one frame</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">view_recorded_frame</span><span class="p">({</span><span class="n">distance</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = text,
            ["doc"] = the string to send to the profiler,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Send a text to the profiler,
        ["name"] = profiler.log_text,
        ["error"] = ,
        ["brief"] = send a text to the profiler,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">profiler</span><span class="p">.</span><span class="n">log_text</span><span class="p">(</span><span class="s2">&quot;Event: &quot;</span> <span class="o">..</span> <span class="n">name</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = name,
            ["doc"] = The name of the scope,
          },
        },
        ["notes"] = {
          [1] = Must be correctly matched with a corresponding call to `profiler.scope_end()`,
        },
        ["tparams"] = {},
        ["description"] = Starts a profile scope.,
        ["name"] = profiler.scope_begin,
        ["error"] = ,
        ["brief"] = start a profile scope,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Go back one frame</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">scope_begin</span><span class="p">(</span><span class="s2">&quot;test_function&quot;</span><span class="p">)</span>
  <span class="n">test_function</span><span class="p">()</span>
<span class="n">profiler</span><span class="p">.</span><span class="n">scope_end</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = End the current profile scope.,
        ["name"] = profiler.scope_end,
        ["error"] = ,
        ["brief"] = end the current profile scope,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = continously show latest frame,
        ["name"] = profiler.MODE_RUN,
        ["error"] = ,
        ["brief"] = continously show latest frame,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = pause on current frame,
        ["name"] = profiler.MODE_PAUSE,
        ["error"] = ,
        ["brief"] = pause on current frame,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = pause at peak frame,
        ["name"] = profiler.MODE_SHOW_PEAK_FRAME,
        ["error"] = ,
        ["brief"] = pause at peak frame,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = start recording,
        ["name"] = profiler.MODE_RECORD,
        ["error"] = ,
        ["brief"] = start recording,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = show full profiler ui,
        ["name"] = profiler.VIEW_MODE_FULL,
        ["error"] = ,
        ["brief"] = show full profiler ui,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = show mimimal profiler ui,
        ["name"] = profiler.VIEW_MODE_MINIMIZED,
        ["error"] = ,
        ["brief"] = show mimimal profiler ui,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions for getting profiling data in runtime.
More detailed <a href="https://www.defold.com/manuals/profiling/">profiling</a> and <a href="http://www.defold.com/manuals/debugging/">debugging</a> information available in the manuals.,
      ["name"] = Profiler,
      ["notes"] = {},
      ["namespace"] = profiler,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Profiler API documentation,
    },
  },
  [24] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = position,
            ["doc"] = position of the text,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = text,
            ["doc"] = the text to draw,
          },
          [3] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = color,
            ["doc"] = color of the text,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Draw a text on the screen. This should be used for debugging purposes only.,
        ["name"] = draw_debug_text,
        ["error"] = ,
        ["brief"] = draw a text on the screen,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@render:&quot;</span><span class="p">,</span> <span class="s2">&quot;draw_debug_text&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;Hello world!&quot;</span><span class="p">,</span> <span class="n">position</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">color</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = start_point,
            ["doc"] = start point of the line,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = end_point,
            ["doc"] = end point of the line,
          },
          [3] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = color,
            ["doc"] = color of the line,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Draw a line on the screen. This should mostly be used for debugging purposes.,
        ["name"] = draw_line,
        ["error"] = ,
        ["brief"] = draw a line on the screen,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- draw a white line from (200, 200) to (200, 300)</span>
<span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@render:&quot;</span><span class="p">,</span> <span class="s2">&quot;draw_line&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">start_point</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">end_point</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">color</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = the new window height,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = the new window width,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Reports a change in window size. This is initiated on window resize on desktop or by orientation changes
on mobile devices.,
        ["name"] = window_resized,
        ["error"] = ,
        ["brief"] = reports a window size change,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="c1">-- check for the message</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;window_resized&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="c1">-- the window was resized.</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = the new window height,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = the new window width,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the size of the game window. Only works on desktop platforms.,
        ["name"] = resize,
        ["error"] = ,
        ["brief"] = resizes the window,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@render:&quot;</span><span class="p">,</span> <span class="s2">&quot;resize&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">768</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = color,
            ["doc"] = color to use as clear color,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set render clear color. This is the color that appears on the screen where nothing is rendered, i.e. background.,
        ["name"] = clear_color,
        ["error"] = ,
        ["brief"] = set clear color,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@render:&quot;</span><span class="p">,</span> <span class="s2">&quot;clear_color&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">color</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constant buffers are used to set shader program variables and are optionally passed to the <code>render.draw()</code> function.
The buffer's constant elements can be indexed like an ordinary Lua table, but you can't iterate over them with pairs() or ipairs().,
        ["name"] = render.constant_buffer,
        ["error"] = ,
        ["brief"] = create a new constant buffer.,
        ["type"] = FUNCTION,
        ["examples"] = Set a "tint" constant in a constant buffer in the render script:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">constants</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">constant_buffer</span><span class="p">()</span>
<span class="n">constants</span><span class="p">.</span><span class="n">tint</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>

Then use the constant buffer when drawing a predicate:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">,</span> <span class="p">{</span><span class="n">constants</span> <span class="o">=</span> <span class="n">constants</span><span class="p">})</span>
</code></pre></div>

The constant buffer also supports array values by specifying constants in a table:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">constants</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">constant_buffer</span><span class="p">()</span>
<span class="n">constants</span><span class="p">.</span><span class="n">light_colors</span>    <span class="o">=</span> <span class="p">{}</span>
<span class="n">constants</span><span class="p">.</span><span class="n">light_colors</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">constants</span><span class="p">.</span><span class="n">light_colors</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">constants</span><span class="p">.</span><span class="n">light_colors</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>

You can also create the table by passing the vectors directly when creating the table:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">constants</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">constant_buffer</span><span class="p">()</span>
<span class="n">constants</span><span class="p">.</span><span class="n">light_colors</span>    <span class="o">=</span> <span class="p">{</span>
     <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
     <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
     <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">-- Add more constant to the array</span>
<span class="n">constants</span><span class="p">.</span><span class="n">light_colors</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant_buffer,
            },
            ["name"] = buffer,
            ["doc"] = new constant buffer,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STATE_DEPTH_TEST,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STATE_STENCIL_TEST,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STATE_BLEND,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STATE_CULL_FACE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STATE_POLYGON_OFFSET_FILL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = state,
            ["doc"] = state to enable
<ul>
<li><code>render.STATE_DEPTH_TEST</code></li>
<li><code>render.STATE_STENCIL_TEST</code></li>
<li><code>render.STATE_BLEND</code></li>
<li><code>render.STATE_ALPHA_TEST</code> (<span class="icon-ios"></span><span class="icon-android"></span> not available on iOS and Android)</li>
<li><code>render.STATE_CULL_FACE</code></li>
<li><code>render.STATE_POLYGON_OFFSET_FILL</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Enables a particular render state. The state will be enabled until disabled.,
        ["name"] = render.enable_state,
        ["error"] = ,
        ["brief"] = enables a render state,
        ["type"] = FUNCTION,
        ["examples"] = Enable stencil test when drawing the gui predicate, then disable it:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">enable_state</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STATE_STENCIL_TEST</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">gui_pred</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">disable_state</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STATE_STENCIL_TEST</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = state,
            ["doc"] = state to disable
<ul>
<li><code>render.STATE_DEPTH_TEST</code></li>
<li><code>render.STATE_STENCIL_TEST</code></li>
<li><code>render.STATE_BLEND</code></li>
<li><code>render.STATE_ALPHA_TEST</code> (<span class="icon-ios"></span><span class="icon-android"></span> not available on iOS and Android)</li>
<li><code>render.STATE_CULL_FACE</code></li>
<li><code>render.STATE_POLYGON_OFFSET_FILL</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Disables a render state.,
        ["name"] = render.disable_state,
        ["error"] = ,
        ["brief"] = disables a render state,
        ["type"] = FUNCTION,
        ["examples"] = Disable face culling when drawing the tile predicate:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">disable_state</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STATE_CULL_FACE</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tile_pred</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = left corner,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = bottom corner,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = viewport width,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = viewport height,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the render viewport to the specified rectangle.,
        ["name"] = render.set_viewport,
        ["error"] = ,
        ["brief"] = sets the render viewport,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Set the viewport to the window dimensions.</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_viewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">())</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FORMAT_LUMINANCE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FORMAT_RGB,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FORMAT_RGBA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_RGB16F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_RGB32F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_RGBA16F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_RGBA32F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_R16F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_RG16F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_R32F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = May be nil if the format isn't supported,
        ["name"] = render.FORMAT_RG32F,
        ["error"] = ,
        ["brief"] = May be nil if the format isn't supported,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FORMAT_DEPTH,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FORMAT_STENCIL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FILTER_LINEAR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FILTER_NEAREST,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.WRAP_CLAMP_TO_BORDER,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.WRAP_CLAMP_TO_EDGE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.WRAP_MIRRORED_REPEAT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.WRAP_REPEAT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = name,
            ["doc"] = render target name,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = parameters,
            ["doc"] = table of buffer parameters, see the description for available keys and values,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new render target according to the supplied
specification table.
The table should contain keys specifying which buffers should be created
with what parameters. Each buffer key should have a table value consisting
of parameters. The following parameter keys are available:
<table>
<thead>
<tr>
<th>Key</th>
<th>Values</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>format</code></td>
<td><code>render.FORMAT_LUMINANCE</code><br/><code>render.FORMAT_RGB</code><br/><code>render.FORMAT_RGBA</code><br/><code>render.FORMAT_DEPTH</code><br/><code>render.FORMAT_STENCIL</code><br/><code>render.FORMAT_RGBA32F</code><br/><code>render.FORMAT_RGBA16F</code><br/></td>
</tr>
<tr>
<td><code>width</code></td>
<td>number</td>
</tr>
<tr>
<td><code>height</code></td>
<td>number</td>
</tr>
<tr>
<td><code>min_filter</code> (optional)</td>
<td><code>render.FILTER_LINEAR</code><br/><code>render.FILTER_NEAREST</code></td>
</tr>
<tr>
<td><code>mag_filter</code> (optional)</td>
<td><code>render.FILTER_LINEAR</code><br/><code>render.FILTER_NEAREST</code></td>
</tr>
<tr>
<td><code>u_wrap</code>     (optional)</td>
<td><code>render.WRAP_CLAMP_TO_BORDER</code><br/><code>render.WRAP_CLAMP_TO_EDGE</code><br/><code>render.WRAP_MIRRORED_REPEAT</code><br/><code>render.WRAP_REPEAT</code><br/></td>
</tr>
<tr>
<td><code>v_wrap</code>     (optional)</td>
<td><code>render.WRAP_CLAMP_TO_BORDER</code><br/><code>render.WRAP_CLAMP_TO_EDGE</code><br/><code>render.WRAP_MIRRORED_REPEAT</code><br/><code>render.WRAP_REPEAT</code></td>
</tr>
<tr>
<td><code>flags</code>      (optional)</td>
<td><code>render.TEXTURE_BIT</code> (only applicable to depth and stencil buffers)</td>
</tr>
</tbody>
</table>
The render target can be created to support multiple color attachments. Each attachment can have different format settings and texture filters,
but attachments must be added in sequence, meaning you cannot create a render target at slot 0 and 3.
Instead it has to be created with all four buffer types ranging from [0..3] (as denoted by render.BUFFER_COLORX_BIT where 'X' is the attachment you want to create).
It is not guaranteed that the device running the script can support creating render targets with multiple color attachments. To check if the device can support multiple attachments,
you can check if the <code>render</code> table contains any of the <code>BUFFER_COLOR1_BIT</code>, <code>BUFFER_COLOR2_BIT</code> or <code>BUFFER_COLOR3_BIT</code> constants:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR1_BIT</span> <span class="o">==</span> <span class="kc">nil</span> <span class="kr">then</span>
        <span class="c1">-- this devices does not support multiple color attachments</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["name"] = render.render_target,
        ["error"] = ,
        ["brief"] = creates a new render target,
        ["type"] = FUNCTION,
        ["examples"] = How to create a new render target and draw to it:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- render target buffer parameters</span>
    <span class="kd">local</span> <span class="n">color_params</span> <span class="o">=</span> <span class="p">{</span> <span class="n">format</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FORMAT_RGBA</span><span class="p">,</span>
                           <span class="n">width</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span>
                           <span class="n">height</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">(),</span>
                           <span class="n">min_filter</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FILTER_LINEAR</span><span class="p">,</span>
                           <span class="n">mag_filter</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FILTER_LINEAR</span><span class="p">,</span>
                           <span class="n">u_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span><span class="p">,</span>
                           <span class="n">v_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span> <span class="p">}</span>
    <span class="kd">local</span> <span class="n">depth_params</span> <span class="o">=</span> <span class="p">{</span> <span class="n">format</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FORMAT_DEPTH</span><span class="p">,</span>
                           <span class="n">width</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span>
                           <span class="n">height</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">(),</span>
                           <span class="n">u_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span><span class="p">,</span>
                           <span class="n">v_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span> <span class="p">}</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">render_target</span><span class="p">({[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">color_params</span><span class="p">,</span> <span class="p">[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_DEPTH_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">depth_params</span> <span class="p">})</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- enable target so all drawing is done to it</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">)</span>

    <span class="c1">-- draw a predicate to the render target</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

How to create a render target with multiple outputs:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- render target buffer parameters</span>
    <span class="kd">local</span> <span class="n">color_params_rgba</span> <span class="o">=</span> <span class="p">{</span> <span class="n">format</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FORMAT_RGBA</span><span class="p">,</span>
                                <span class="n">width</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span>
                                <span class="n">height</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">(),</span>
                                <span class="n">min_filter</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FILTER_LINEAR</span><span class="p">,</span>
                                <span class="n">mag_filter</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FILTER_LINEAR</span><span class="p">,</span>
                                <span class="n">u_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span><span class="p">,</span>
                                <span class="n">v_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span> <span class="p">}</span>
    <span class="kd">local</span> <span class="n">color_params_float</span> <span class="o">=</span> <span class="p">{</span> <span class="n">format</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FORMAT_RG32F</span><span class="p">,</span>
                           <span class="n">width</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span>
                           <span class="n">height</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">(),</span>
                           <span class="n">min_filter</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FILTER_LINEAR</span><span class="p">,</span>
                           <span class="n">mag_filter</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FILTER_LINEAR</span><span class="p">,</span>
                           <span class="n">u_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span><span class="p">,</span>
                           <span class="n">v_wrap</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">WRAP_CLAMP_TO_EDGE</span> <span class="p">}</span>


    <span class="c1">-- Create a render target with three color attachments</span>
    <span class="c1">-- Note: No depth buffer is attached here</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">render_target</span><span class="p">({</span>
           <span class="p">[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR0_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">color_params_rgba</span><span class="p">,</span>
           <span class="p">[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR1_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">color_params_rgba</span><span class="p">,</span>
           <span class="p">[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR2_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">color_params_float</span><span class="p">,</span> <span class="p">})</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- enable target so all drawing is done to it</span>
    <span class="n">render</span><span class="p">.</span><span class="n">enable_render_target</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">)</span>

    <span class="c1">-- draw a predicate to the render target</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = render_target,
            },
            ["name"] = render_target,
            ["doc"] = new render target,
          },
        },
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = render_target,
            },
            ["name"] = render_target,
            ["doc"] = render target to delete,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Deletes a render target created by a render script.
You cannot delete a render target resource.,
        ["name"] = render.delete_render_target,
        ["error"] = ,
        ["brief"] = deletes a render target,
        ["type"] = FUNCTION,
        ["examples"] = How to delete a render target:
<div class="codehilite"><pre><span></span><code> <span class="n">render</span><span class="p">.</span><span class="n">delete_render_target</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.RENDER_TARGET_DEFAULT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = render_target,
            },
            ["name"] = render_target,
            ["doc"] = render target to set. render.RENDER_TARGET_DEFAULT to set the default render target,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with behaviour parameters
<dl>
<dt><code>transient</code></dt>
<dd><span class="type">table</span> Transient frame buffer types are only valid while the render target is active, i.e becomes undefined when a new target is set by a subsequent call to set_render_target.
 Default is all non-transient. Be aware that some hardware uses a combined depth stencil buffer and when this is the case both are considered non-transient if exclusively selected!
 A buffer type defined that doesn't exist in the render target is silently ignored.</dd>
</dl>
<ul>
<li><code>render.BUFFER_COLOR_BIT</code></li>
<li><code>render.BUFFER_DEPTH_BIT</code></li>
<li><code>render.BUFFER_STENCIL_BIT</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets a render target. Subsequent draw operations will be to the
render target until it is replaced by a subsequent call to set_render_target.
This function supports render targets created by a render script, or a render target resource.,
        ["name"] = render.set_render_target,
        ["error"] = ,
        ["brief"] = sets a render target,
        ["type"] = FUNCTION,
        ["examples"] = How to set a render target and draw to it and then switch back to the default render target
The render target defines the depth/stencil buffers as transient, when set_render_target is called the next time the buffers may be invalidated and allow for optimisations depending on driver support
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- set render target so all drawing is done to it</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">,</span> <span class="p">{</span> <span class="n">transient</span> <span class="o">=</span> <span class="p">{</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_DEPTH_BIT</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_STENCIL_BIT</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>

    <span class="c1">-- draw a predicate to the render target</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>

    <span class="c1">-- set default render target. This also invalidates the depth and stencil buffers of the current target (self.my_render_target)</span>
    <span class="c1">--  which can be an optimisation on some hardware</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">RENDER_TARGET_DEFAULT</span><span class="p">)</span>

<span class="kr">end</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- set render target by a render target resource identifier</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="s1">&#39;my_rt_resource&#39;</span><span class="p">)</span>

    <span class="c1">-- draw a predicate to the render target</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>

    <span class="c1">-- reset the render target to the default backbuffer</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">RENDER_TARGET_DEFAULT</span><span class="p">)</span>

<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = render_target,
            },
            ["name"] = render_target,
            ["doc"] = render target to set size for,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = new render target width,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = new render target height,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the render target size for a render target created from
either a render script, or from a render target resource.,
        ["name"] = render.set_render_target_size,
        ["error"] = ,
        ["brief"] = sets the render target size,
        ["type"] = FUNCTION,
        ["examples"] = Resize render targets to the current window size:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_render_target_size</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">())</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_render_target_size</span><span class="p">(</span><span class="s1">&#39;my_rt_resource&#39;</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">())</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = string,
              [3] = hash,
            },
            ["name"] = binding,
            ["doc"] = texture binding, either by texture unit, string or hash for the sampler name that the texture should be bound to,
          },
          [2] = {
            ["types"] = {
              [1] = texture,
              [2] = string,
              [3] = hash,
            },
            ["name"] = handle_or_name,
            ["doc"] = render target or texture handle that should be bound, or a named resource in the "Render Resource" table in the currently assigned .render file,
          },
          [3] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = [buffer_type],
            ["doc"] = optional buffer type from which to enable the texture. Note that this argument only applies to render targets. Defaults to <code>render.BUFFER_COLOR_BIT</code>. These values are supported:
<ul>
<li><code>render.BUFFER_COLOR_BIT</code></li>
</ul>
If The render target has been created as depth and/or stencil textures, these buffer types can be used:
<ul>
<li><code>render.BUFFER_DEPTH_BIT</code></li>
<li><code>render.BUFFER_STENCIL_BIT</code></li>
</ul>
If the render target has been created with multiple color attachments, these buffer types can be used
to enable those textures as well. Currently 4 color attachments are supported:
<ul>
<li><code>render.BUFFER_COLOR0_BIT</code></li>
<li><code>render.BUFFER_COLOR1_BIT</code></li>
<li><code>render.BUFFER_COLOR2_BIT</code></li>
<li><code>render.BUFFER_COLOR3_BIT</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the specified texture handle for a render target attachment or a regular texture
that should be used for rendering. The texture can be bound to either a texture unit
or to a sampler name by a hash or a string.
A texture can be bound to multiple units and sampler names at the same time,
the actual binding will be applied to the shaders when a shader program is bound.
When mixing binding using both units and sampler names, you might end up in situations
where two different textures will be applied to the same bind location in the shader.
In this case, the texture set to the named sampler will take precedence over the unit.
Note that you can bind multiple sampler names to the same texture, in case you want to reuse
the same texture for differnt use-cases. It is however recommended that you use the same name
everywhere for the textures that should be shared across different materials.,
        ["name"] = render.enable_texture,
        ["error"] = ,
        ["brief"] = sets a texture to the render state,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- enable target so all drawing is done to it</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">)</span>

    <span class="c1">-- draw a predicate to the render target</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>

    <span class="c1">-- disable target</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">RENDER_TARGET_DEFAULT</span><span class="p">)</span>

    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
    <span class="c1">-- draw a predicate with the render target available as texture 0 in the predicate</span>
    <span class="c1">-- material shader.</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- enable render target by resource id</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="s1">&#39;my_rt_resource&#39;</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_render_target</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">RENDER_TARGET_DEFAULT</span><span class="p">)</span>

    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;my_rt_resource&#39;</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
    <span class="c1">-- draw a predicate with the render target available as texture 0 in the predicate</span>
    <span class="c1">-- material shader.</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- bind a texture to the texture unit 0</span>
    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_texture_handle</span><span class="p">)</span>
    <span class="c1">-- bind the same texture to a named sampler</span>
    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="s2">&quot;my_texture_sampler&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_texture_handle</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = string,
              [3] = hash,
            },
            ["name"] = binding,
            ["doc"] = texture binding, either by texture unit, string or hash that should be disabled,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Disables a texture that has previourly been enabled.,
        ["name"] = render.disable_texture,
        ["error"] = ,
        ["brief"] = disables a texture on the render state,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
    <span class="c1">-- draw a predicate with the render target available as texture 0 in the predicate</span>
    <span class="c1">-- material shader.</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
    <span class="c1">-- done, disable the texture</span>
    <span class="n">render</span><span class="p">.</span><span class="n">disable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = render_target,
            },
            ["name"] = render_target,
            ["doc"] = render target from which to retrieve the buffer width,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = buffer_type,
            ["doc"] = which type of buffer to retrieve the width from
<ul>
<li><code>render.BUFFER_COLOR_BIT</code></li>
<li><code>render.BUFFER_COLOR[x]_BIT</code> (x: [0..3], if supported!)</li>
<li><code>render.BUFFER_DEPTH_BIT</code></li>
<li><code>render.BUFFER_STENCIL_BIT</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the specified buffer width from a render target.,
        ["name"] = render.get_render_target_width,
        ["error"] = ,
        ["brief"] = retrieve the buffer width from a render target,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- get the width of the render target color buffer</span>
<span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_render_target_width</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">target_right</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
<span class="c1">-- get the width of a render target resource</span>
<span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_render_target_width</span><span class="p">(</span><span class="s1">&#39;my_rt_resource&#39;</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = the width of the render target buffer texture,
          },
        },
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = render_target,
            },
            ["name"] = render_target,
            ["doc"] = render target from which to retrieve the buffer height,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = buffer_type,
            ["doc"] = which type of buffer to retrieve the height from
<ul>
<li><code>render.BUFFER_COLOR_BIT</code></li>
<li><code>render.BUFFER_DEPTH_BIT</code></li>
<li><code>render.BUFFER_STENCIL_BIT</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the specified buffer height from a render target.,
        ["name"] = render.get_render_target_height,
        ["error"] = ,
        ["brief"] = retrieve a buffer height from a render target,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- get the height of the render target color buffer</span>
<span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_render_target_height</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">target_right</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
<span class="c1">-- get the height of a render target resource</span>
<span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_render_target_height</span><span class="p">(</span><span class="s1">&#39;my_rt_resource&#39;</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = the height of the render target buffer texture,
          },
        },
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_COLOR_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_COLOR0_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_COLOR1_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_COLOR2_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [47] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_COLOR3_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [48] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_DEPTH_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [49] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BUFFER_STENCIL_BIT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [50] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = buffers,
            ["doc"] = table with keys specifying which buffers to clear and values set to clear values. Available keys are:
<ul>
<li><code>render.BUFFER_COLOR_BIT</code></li>
<li><code>render.BUFFER_DEPTH_BIT</code></li>
<li><code>render.BUFFER_STENCIL_BIT</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Clear buffers in the currently enabled render target with specified value. If the render target has been created with multiple
color attachments, all buffers will be cleared with the same value.,
        ["name"] = render.clear,
        ["error"] = ,
        ["brief"] = clears the active render target,
        ["type"] = FUNCTION,
        ["examples"] = Clear the color buffer and the depth buffer.
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">clear</span><span class="p">({[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_DEPTH_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [51] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = predicate,
            },
            ["name"] = predicate,
            ["doc"] = predicate to draw for,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with properties:
<dl>
<dt><code>frustum</code></dt>
<dd><span class="type">vmath.matrix4</span> A frustum matrix used to cull renderable items. (E.g. <code>local frustum = proj * view</code>). default=nil</dd>
<dt><code>frustum_planes</code></dt>
<dd><span class="type">int</span> Determines which sides of the frustum will be used. Default is render.FRUSTUM_PLANES_SIDES.</dd>
</dl>
<ul>
<li>render.FRUSTUM_PLANES_SIDES : The left, right, top and bottom sides of the frustum.</li>
<li>render.FRUSTUM_PLANES_ALL : All 6 sides of the frustum.</li>
</ul>
<dl>
<dt><code>constants</code></dt>
<dd><span class="type">constant_buffer</span> optional constants to use while rendering</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Draws all objects that match a specified predicate. An optional constant buffer can be
provided to override the default constants. If no constants buffer is provided, a default
system constants buffer is used containing constants as defined in materials and set through
<a href="/ref/go#go.set">go.set</a> (or <a href="/ref/particlefx#particlefx.set_constant">particlefx.set_constant</a>) on visual components.,
        ["name"] = render.draw,
        ["error"] = ,
        ["brief"] = draws all objects matching a predicate,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- define a predicate matching anything with material tag &quot;my_tag&quot;</span>
    <span class="n">self</span><span class="p">.</span><span class="n">my_pred</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">predicate</span><span class="p">({</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;my_tag&quot;</span><span class="p">)})</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- draw everything in the my_pred predicate</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Draw predicate with constants:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">constants</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">constant_buffer</span><span class="p">()</span>
<span class="n">constants</span><span class="p">.</span><span class="n">tint</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">,</span> <span class="p">{</span><span class="n">constants</span> <span class="o">=</span> <span class="n">constants</span><span class="p">})</span>
</code></pre></div>

Draw with predicate and frustum culling (without near+far planes):
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">frustum</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">proj</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">,</span> <span class="p">{</span><span class="n">frustum</span> <span class="o">=</span> <span class="n">frustum</span><span class="p">})</span>
</code></pre></div>

Draw with predicate and frustum culling (with near+far planes):
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">frustum</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">proj</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">,</span> <span class="p">{</span><span class="n">frustum</span> <span class="o">=</span> <span class="n">frustum</span><span class="p">,</span> <span class="n">frustum_planes</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FRUSTUM_PLANES_ALL</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [52] = {
        ["members"] = {},
        ["replaces"] = render.draw_debug2d,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with properties:
<dl>
<dt><code>frustum</code></dt>
<dd><span class="type">vmath.matrix4</span> A frustum matrix used to cull renderable items. (E.g. <code>local frustum = proj * view</code>). May be nil.</dd>
<dt><code>frustum_planes</code></dt>
<dd><span class="type">int</span> Determines which sides of the frustum will be used. Default is render.FRUSTUM_PLANES_SIDES.</dd>
</dl>
<ul>
<li>render.FRUSTUM_PLANES_SIDES : The left, right, top and bottom sides of the frustum.</li>
<li>render.FRUSTUM_PLANES_ALL : All sides of the frustum.</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Draws all 3d debug graphics such as lines drawn with "draw_line" messages and physics visualization.,
        ["name"] = render.draw_debug3d,
        ["error"] = ,
        ["brief"] = draws all 3d debug graphics,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="c1">-- draw debug visualization</span>
    <span class="n">render</span><span class="p">.</span><span class="n">draw_debug3d</span><span class="p">()</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [53] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = matrix,
            ["doc"] = view matrix to set,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the view matrix to use when rendering.,
        ["name"] = render.set_view,
        ["error"] = ,
        ["brief"] = sets the view matrix,
        ["type"] = FUNCTION,
        ["examples"] = How to set the view and projection matrices according to
the values supplied by a camera.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4</span><span class="p">()</span>
  <span class="n">self</span><span class="p">.</span><span class="n">projection</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4</span><span class="p">()</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
  <span class="c1">-- set the view to the stored view value</span>
  <span class="n">render</span><span class="p">.</span><span class="n">set_view</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
  <span class="c1">-- now we can draw with this view</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;set_view_projection&quot;</span><span class="p">)</span> <span class="kr">then</span>
     <span class="c1">-- camera view and projection arrives here.</span>
     <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">view</span>
     <span class="n">self</span><span class="p">.</span><span class="n">projection</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">projection</span>
  <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [54] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = matrix,
            ["doc"] = projection matrix,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the projection matrix to use when rendering.,
        ["name"] = render.set_projection,
        ["error"] = ,
        ["brief"] = sets the projection matrix,
        ["type"] = FUNCTION,
        ["examples"] = How to set the projection to orthographic with world origo at lower left,
width and height as set in project settings and depth (z) between -1 and 1:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_projection</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_orthographic</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">get_width</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">get_height</span><span class="p">(),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [55] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FRUSTUM_PLANES_SIDES,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [56] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FRUSTUM_PLANES_ALL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [57] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ZERO,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [58] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [59] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_SRC_COLOR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [60] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE_MINUS_SRC_COLOR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [61] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_DST_COLOR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [62] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE_MINUS_DST_COLOR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [63] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_SRC_ALPHA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [64] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE_MINUS_SRC_ALPHA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [65] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_DST_ALPHA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [66] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE_MINUS_DST_ALPHA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [67] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_SRC_ALPHA_SATURATE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [68] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_CONSTANT_COLOR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [69] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE_MINUS_CONSTANT_COLOR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [70] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_CONSTANT_ALPHA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [71] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.BLEND_ONE_MINUS_CONSTANT_ALPHA,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [72] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = source_factor,
            ["doc"] = source factor,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = destination_factor,
            ["doc"] = destination factor,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Specifies the arithmetic used when computing pixel values that are written to the frame
buffer. In RGBA mode, pixels can be drawn using a function that blends the source RGBA
pixel values with the destination pixel values already in the frame buffer.
Blending is initially disabled.
<code>source_factor</code> specifies which method is used to scale the source color components.
<code>destination_factor</code> specifies which method is used to scale the destination color
components.
Source color components are referred to as (R<sub>s</sub>,G<sub>s</sub>,B<sub>s</sub>,A<sub>s</sub>).
Destination color components are referred to as (R<sub>d</sub>,G<sub>d</sub>,B<sub>d</sub>,A<sub>d</sub>).
The color specified by setting the blendcolor is referred to as (R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>,A<sub>c</sub>).
The source scale factor is referred to as (s<sub>R</sub>,s<sub>G</sub>,s<sub>B</sub>,s<sub>A</sub>).
The destination scale factor is referred to as (d<sub>R</sub>,d<sub>G</sub>,d<sub>B</sub>,d<sub>A</sub>).
The color values have integer values between 0 and (k<sub>R</sub>,k<sub>G</sub>,k<sub>B</sub>,k<sub>A</sub>), where k<sub>c</sub> = 2<sup>m<sub>c</sub></sup> - 1 and m<sub>c</sub> is the number of bitplanes for that color. I.e for 8 bit color depth, color values are between <code>0</code> and <code>255</code>.
Available factor constants and corresponding scale factors:
<table>
<thead>
<tr>
<th>Factor constant</th>
<th>Scale factor (f<sub>R</sub>,f<sub>G</sub>,f<sub>B</sub>,f<sub>A</sub>)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>render.BLEND_ZERO</code></td>
<td>(0,0,0,0)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE</code></td>
<td>(1,1,1,1)</td>
</tr>
<tr>
<td><code>render.BLEND_SRC_COLOR</code></td>
<td>(R<sub>s</sub>/k<sub>R</sub>,G<sub>s</sub>/k<sub>G</sub>,B<sub>s</sub>/k<sub>B</sub>,A<sub>s</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE_MINUS_SRC_COLOR</code></td>
<td>(1,1,1,1) - (R<sub>s</sub>/k<sub>R</sub>,G<sub>s</sub>/k<sub>G</sub>,B<sub>s</sub>/k<sub>B</sub>,A<sub>s</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_DST_COLOR</code></td>
<td>(R<sub>d</sub>/k<sub>R</sub>,G<sub>d</sub>/k<sub>G</sub>,B<sub>d</sub>/k<sub>B</sub>,A<sub>d</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE_MINUS_DST_COLOR</code></td>
<td>(1,1,1,1) - (R<sub>d</sub>/k<sub>R</sub>,G<sub>d</sub>/k<sub>G</sub>,B<sub>d</sub>/k<sub>B</sub>,A<sub>d</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_SRC_ALPHA</code></td>
<td>(A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE_MINUS_SRC_ALPHA</code></td>
<td>(1,1,1,1) - (A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_DST_ALPHA</code></td>
<td>(A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE_MINUS_DST_ALPHA</code></td>
<td>(1,1,1,1) - (A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_CONSTANT_COLOR</code></td>
<td>(R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>,A<sub>c</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE_MINUS_CONSTANT_COLOR</code></td>
<td>(1,1,1,1) - (R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>,A<sub>c</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_CONSTANT_ALPHA</code></td>
<td>(A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_ONE_MINUS_CONSTANT_ALPHA</code></td>
<td>(1,1,1,1) - (A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>)</td>
</tr>
<tr>
<td><code>render.BLEND_SRC_ALPHA_SATURATE</code></td>
<td>(i,i,i,1) where i = min(A<sub>s</sub>, k<sub>A</sub> - A<sub>d</sub>) /k<sub>A</sub></td>
</tr>
</tbody>
</table>
The blended RGBA values of a pixel comes from the following equations:
<ul>
<li>R<sub>d</sub> = min(k<sub>R</sub>, R<sub>s</sub> * s<sub>R</sub> + R<sub>d</sub> * d<sub>R</sub>)</li>
<li>G<sub>d</sub> = min(k<sub>G</sub>, G<sub>s</sub> * s<sub>G</sub> + G<sub>d</sub> * d<sub>G</sub>)</li>
<li>B<sub>d</sub> = min(k<sub>B</sub>, B<sub>s</sub> * s<sub>B</sub> + B<sub>d</sub> * d<sub>B</sub>)</li>
<li>A<sub>d</sub> = min(k<sub>A</sub>, A<sub>s</sub> * s<sub>A</sub> + A<sub>d</sub> * d<sub>A</sub>)</li>
</ul>
Blend function <code>(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)</code> is useful for
drawing with transparency when the drawn objects are sorted from farthest to nearest.
It is also useful for drawing antialiased points and lines in arbitrary order.,
        ["name"] = render.set_blend_func,
        ["error"] = ,
        ["brief"] = sets the blending function,
        ["type"] = FUNCTION,
        ["examples"] = Set the blend func to the most common one:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_blend_func</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">BLEND_SRC_ALPHA</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">BLEND_ONE_MINUS_SRC_ALPHA</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [73] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = red,
            ["doc"] = red mask,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = green,
            ["doc"] = green mask,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = blue,
            ["doc"] = blue mask,
          },
          [4] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = alpha,
            ["doc"] = alpha mask,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Specifies whether the individual color components in the frame buffer is enabled for writing (<code>true</code>) or disabled (<code>false</code>). For example, if <code>blue</code> is <code>false</code>, nothing is written to the blue component of any pixel in any of the color buffers, regardless of the drawing operation attempted. Note that writing are either enabled or disabled for entire color components, not the individual bits of a component.
The component masks are all initially <code>true</code>.,
        ["name"] = render.set_color_mask,
        ["error"] = ,
        ["brief"] = sets the color mask,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- alpha cannot be written to frame buffer</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_color_mask</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [74] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = depth,
            ["doc"] = depth mask,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Specifies whether the depth buffer is enabled for writing. The supplied mask governs
if depth buffer writing is enabled (<code>true</code>) or disabled (<code>false</code>).
The mask is initially <code>true</code>.,
        ["name"] = render.set_depth_mask,
        ["error"] = ,
        ["brief"] = sets the depth mask,
        ["type"] = FUNCTION,
        ["examples"] = How to turn off writing to the depth buffer:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_depth_mask</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [75] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = mask,
            ["doc"] = stencil mask,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The stencil mask controls the writing of individual bits in the stencil buffer.
The least significant <code>n</code> bits of the parameter <code>mask</code>, where <code>n</code> is the number of
bits in the stencil buffer, specify the mask.
Where a <code>1</code> bit appears in the mask, the corresponding
bit in the stencil buffer can be written. Where a <code>0</code> bit appears in the mask,
the corresponding bit in the stencil buffer is never written.
The mask is initially all <code>1</code>'s.,
        ["name"] = render.set_stencil_mask,
        ["error"] = ,
        ["brief"] = sets the stencil mask,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- set the stencil mask to all 1:s</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_stencil_mask</span><span class="p">(</span><span class="mh">0xff</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [76] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_NEVER,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [77] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_LESS,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [78] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_LEQUAL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [79] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_GREATER,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [80] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_GEQUAL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [81] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_EQUAL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [82] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_NOTEQUAL,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [83] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.COMPARE_FUNC_ALWAYS,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [84] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = func,
            ["doc"] = depth test function, see the description for available values,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Specifies the function that should be used to compare each incoming pixel
depth value with the value present in the depth buffer.
The comparison is performed only if depth testing is enabled and specifies
the conditions under which a pixel will be drawn.
Function constants:
<ul>
<li><code>render.COMPARE_FUNC_NEVER</code> (never passes)</li>
<li><code>render.COMPARE_FUNC_LESS</code> (passes if the incoming depth value is less than the stored value)</li>
<li><code>render.COMPARE_FUNC_LEQUAL</code> (passes if the incoming depth value is less than or equal to the stored value)</li>
<li><code>render.COMPARE_FUNC_GREATER</code> (passes if the incoming depth value is greater than the stored value)</li>
<li><code>render.COMPARE_FUNC_GEQUAL</code> (passes if the incoming depth value is greater than or equal to the stored value)</li>
<li><code>render.COMPARE_FUNC_EQUAL</code> (passes if the incoming depth value is equal to the stored value)</li>
<li><code>render.COMPARE_FUNC_NOTEQUAL</code> (passes if the incoming depth value is not equal to the stored value)</li>
<li><code>render.COMPARE_FUNC_ALWAYS</code> (always passes)</li>
</ul>
The depth function is initially set to <code>render.COMPARE_FUNC_LESS</code>.,
        ["name"] = render.set_depth_func,
        ["error"] = ,
        ["brief"] = sets the depth test function,
        ["type"] = FUNCTION,
        ["examples"] = Enable depth test and set the depth test function to "not equal".
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">enable_state</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STATE_DEPTH_TEST</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_depth_func</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">COMPARE_FUNC_NOTEQUAL</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [85] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = func,
            ["doc"] = stencil test function, see the description for available values,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = ref,
            ["doc"] = reference value for the stencil test,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = mask,
            ["doc"] = mask that is ANDed with both the reference value and the stored stencil value when the test is done,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Stenciling is similar to depth-buffering as it enables and disables drawing on a
per-pixel basis. First, GL drawing primitives are drawn into the stencil planes.
Second, geometry and images are rendered but using the stencil planes to mask out
where to draw.
The stencil test discards a pixel based on the outcome of a comparison between the
reference value <code>ref</code> and the corresponding value in the stencil buffer.
<code>func</code> specifies the comparison function. See the table below for values.
The initial value is <code>render.COMPARE_FUNC_ALWAYS</code>.
<code>ref</code> specifies the reference value for the stencil test. The value is clamped to
the range [0, 2<sup>n</sup>-1], where n is the number of bitplanes in the stencil buffer.
The initial value is <code>0</code>.
<code>mask</code> is ANDed with both the reference value and the stored stencil value when the test
is done. The initial value is all <code>1</code>'s.
Function constant:
<ul>
<li><code>render.COMPARE_FUNC_NEVER</code> (never passes)</li>
<li><code>render.COMPARE_FUNC_LESS</code> (passes if (ref &amp; mask) &lt; (stencil &amp; mask))</li>
<li><code>render.COMPARE_FUNC_LEQUAL</code> (passes if (ref &amp; mask) &lt;= (stencil &amp; mask))</li>
<li><code>render.COMPARE_FUNC_GREATER</code> (passes if (ref &amp; mask) &gt; (stencil &amp; mask))</li>
<li><code>render.COMPARE_FUNC_GEQUAL</code> (passes if (ref &amp; mask) &gt;= (stencil &amp; mask))</li>
<li><code>render.COMPARE_FUNC_EQUAL</code> (passes if (ref &amp; mask) = (stencil &amp; mask))</li>
<li><code>render.COMPARE_FUNC_NOTEQUAL</code> (passes if (ref &amp; mask) != (stencil &amp; mask))</li>
<li><code>render.COMPARE_FUNC_ALWAYS</code> (always passes)</li>
</ul>,
        ["name"] = render.set_stencil_func,
        ["error"] = ,
        ["brief"] = sets the stencil test function,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- let only 0&#39;s pass the stencil test</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_stencil_func</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">COMPARE_FUNC_EQUAL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [86] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_KEEP,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [87] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_ZERO,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [88] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_REPLACE,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [89] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_INCR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [90] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_INCR_WRAP,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [91] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_DECR,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [92] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_DECR_WRAP,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [93] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.STENCIL_OP_INVERT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [94] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = sfail,
            ["doc"] = action to take when the stencil test fails,
          },
          [2] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = dpfail,
            ["doc"] = the stencil action when the stencil test passes,
          },
          [3] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = dppass,
            ["doc"] = the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The stencil test discards a pixel based on the outcome of a comparison between the
reference value <code>ref</code> and the corresponding value in the stencil buffer.
To control the test, call <a href="/ref/render#render.set_stencil_func">render.set_stencil_func</a>.
This function takes three arguments that control what happens to the stored stencil
value while stenciling is enabled. If the stencil test fails, no change is made to the
pixel's color or depth buffers, and <code>sfail</code> specifies what happens to the stencil buffer
contents.
Operator constants:
<ul>
<li><code>render.STENCIL_OP_KEEP</code> (keeps the current value)</li>
<li><code>render.STENCIL_OP_ZERO</code> (sets the stencil buffer value to 0)</li>
<li><code>render.STENCIL_OP_REPLACE</code> (sets the stencil buffer value to <code>ref</code>, as specified by <a href="/ref/render#render.set_stencil_func">render.set_stencil_func</a>)</li>
<li><code>render.STENCIL_OP_INCR</code> (increments the stencil buffer value and clamp to the maximum representable unsigned value)</li>
<li><code>render.STENCIL_OP_INCR_WRAP</code> (increments the stencil buffer value and wrap to zero when incrementing the maximum representable unsigned value)</li>
<li><code>render.STENCIL_OP_DECR</code> (decrements the current stencil buffer value and clamp to 0)</li>
<li><code>render.STENCIL_OP_DECR_WRAP</code> (decrements the current stencil buffer value and wrap to the maximum representable unsigned value when decrementing zero)</li>
<li><code>render.STENCIL_OP_INVERT</code> (bitwise inverts the current stencil buffer value)</li>
</ul>
<code>dppass</code> and <code>dpfail</code> specify the stencil buffer actions depending on whether subsequent
depth buffer tests succeed (dppass) or fail (dpfail).
The initial value for all operators is <code>render.STENCIL_OP_KEEP</code>.,
        ["name"] = render.set_stencil_op,
        ["error"] = ,
        ["brief"] = sets the stencil operator,
        ["type"] = FUNCTION,
        ["examples"] = Set the stencil function to never pass and operator to always draw 1's
on test fail.
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_stencil_func</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">COMPARE_FUNC_NEVER</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">)</span>
<span class="c1">-- always draw 1&#39;s on test fail</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_stencil_op</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STENCIL_OP_REPLACE</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">STENCIL_OP_KEEP</span><span class="p">,</span> <span class="n">render</span><span class="p">.</span><span class="n">STENCIL_OP_KEEP</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [95] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FACE_FRONT,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [96] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FACE_BACK,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [97] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = ,
        ["name"] = render.FACE_FRONT_AND_BACK,
        ["error"] = ,
        ["brief"] = ,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [98] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = face_type,
            ["doc"] = face type
<ul>
<li><code>render.FACE_FRONT</code></li>
<li><code>render.FACE_BACK</code></li>
<li><code>render.FACE_FRONT_AND_BACK</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Specifies whether front- or back-facing polygons can be culled
when polygon culling is enabled. Polygon culling is initially disabled.
If mode is <code>render.FACE_FRONT_AND_BACK</code>, no polygons are drawn, but other
primitives such as points and lines are drawn. The initial value for
<code>face_type</code> is <code>render.FACE_BACK</code>.,
        ["name"] = render.set_cull_face,
        ["error"] = ,
        ["brief"] = sets the cull face,
        ["type"] = FUNCTION,
        ["examples"] = How to enable polygon culling and set front face culling:
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">enable_state</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STATE_CULL_FACE</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_cull_face</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">FACE_FRONT</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [99] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = factor,
            ["doc"] = polygon offset factor,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = units,
            ["doc"] = polygon offset units,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the scale and units used to calculate depth values.
If <code>render.STATE_POLYGON_OFFSET_FILL</code> is enabled, each fragment's depth value
is offset from its interpolated value (depending on the depth value of the
appropriate vertices). Polygon offset can be used when drawing decals, rendering
hidden-line images etc.
<code>factor</code> specifies a scale factor that is used to create a variable depth
offset for each polygon. The initial value is <code>0</code>.
<code>units</code> is multiplied by an implementation-specific value to create a
constant depth offset. The initial value is <code>0</code>.
The value of the offset is computed as <code>factor</code> &times; <code>DZ</code> + <code>r</code> &times; <code>units</code>
<code>DZ</code> is a measurement of the depth slope of the polygon which is the change in z (depth)
values divided by the change in either x or y coordinates, as you traverse a polygon.
The depth values are in window coordinates, clamped to the range [0, 1].
<code>r</code> is the smallest value that is guaranteed to produce a resolvable difference.
It's value is an implementation-specific constant.
The offset is added before the depth test is performed and before the
value is written into the depth buffer.,
        ["name"] = render.set_polygon_offset,
        ["error"] = ,
        ["brief"] = sets the polygon offset,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">enable_state</span><span class="p">(</span><span class="n">render</span><span class="p">.</span><span class="n">STATE_POLYGON_OFFSET_FILL</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_polygon_offset</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [100] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the logical window width that is set in the "game.project" settings.
Note that the actual window pixel size can change, either by device constraints
or user input.,
        ["name"] = render.get_width,
        ["error"] = ,
        ["brief"] = gets the window width, as specified for the project,
        ["type"] = FUNCTION,
        ["examples"] = Get the width of the window.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = specified window width (number),
          },
        },
      },
      [101] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the logical window height that is set in the "game.project" settings.
Note that the actual window pixel size can change, either by device constraints
or user input.,
        ["name"] = render.get_height,
        ["error"] = ,
        ["brief"] = gets the window height, as specified for the project,
        ["type"] = FUNCTION,
        ["examples"] = Get the height of the window
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = specified window height,
          },
        },
      },
      [102] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the actual physical window width.
Note that this value might differ from the logical width that is set in the
"game.project" settings.,
        ["name"] = render.get_window_width,
        ["error"] = ,
        ["brief"] = gets the actual window width,
        ["type"] = FUNCTION,
        ["examples"] = Get the actual width of the window
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = actual window width,
          },
        },
      },
      [103] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the actual physical window height.
Note that this value might differ from the logical height that is set in the
"game.project" settings.,
        ["name"] = render.get_window_height,
        ["error"] = ,
        ["brief"] = gets the actual window height,
        ["type"] = FUNCTION,
        ["examples"] = Get the actual height of the window
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = actual window height,
          },
        },
      },
      [104] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = tags,
            ["doc"] = table of tags that the predicate should match. The tags can be of either hash or string type,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function returns a new render predicate for objects with materials matching
the provided material tags. The provided tags are combined into a bit mask
for the predicate. If multiple tags are provided, the predicate matches materials
with all tags ANDed together.
The current limit to the number of tags that can be defined is <code>64</code>.,
        ["name"] = render.predicate,
        ["error"] = ,
        ["brief"] = creates a new render predicate,
        ["type"] = FUNCTION,
        ["examples"] = Create a new render predicate containing all visual objects that
have a material with material tags "opaque" AND "smoke".
<div class="codehilite"><pre><span></span><code>local p = render.predicate({hash(&quot;opaque&quot;), hash(&quot;smoke&quot;)})
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = predicate,
            },
            ["name"] = predicate,
            ["doc"] = new predicate,
          },
        },
      },
      [105] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = material_id,
            ["doc"] = material id to enable,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If another material was already enabled, it will be automatically disabled
and the specified material is used instead.
The name of the material must be specified in the ".render" resource set
in the "game.project" setting.,
        ["name"] = render.enable_material,
        ["error"] = ,
        ["brief"] = enables a material,
        ["type"] = FUNCTION,
        ["examples"] = Enable material named "glow", then draw my_pred with it.
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">enable_material</span><span class="p">(</span><span class="s2">&quot;glow&quot;</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">disable_material</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [106] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If a material is currently enabled, disable it.
The name of the material must be specified in the ".render" resource set
in the "game.project" setting.,
        ["name"] = render.disable_material,
        ["error"] = ,
        ["brief"] = disables the currently enabled material,
        ["type"] = FUNCTION,
        ["examples"] = Enable material named "glow", then draw my_pred with it.
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">enable_material</span><span class="p">(</span><span class="s2">&quot;glow&quot;</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">disable_material</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [107] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = url,
              [2] = handle,
              [3] = nil,
            },
            ["name"] = camera,
            ["doc"] = camera id to use, or nil to reset,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with properties:
<dl>
<dt><code>use_frustum</code></dt>
<dd><span class="type">boolean</span> If true, the renderer will use the cameras view-projection matrix for frustum culling (default: false)</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the current render camera to be used for rendering. If a render camera
has been set by the render script, the renderer will be using its projection and view matrix
during rendering. If a projection and/or view matrix has been set by the render script,
they will not be used until the current render camera has been reset by calling <code>render.set_camera()</code>.
If the 'use_frustum' flag in the options table has been set to true, the renderer will automatically use the
camera frustum for frustum culling regardless of what frustum is being passed into the render.draw() function.
Note that the frustum plane option in render.draw can still be used together with the camera.,
        ["name"] = render.set_camera,
        ["error"] = ,
        ["brief"] = sets the current render camera to be used for rendering,
        ["type"] = FUNCTION,
        ["examples"] = Set the current camera to be used for rendering
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_camera</span><span class="p">(</span><span class="s2">&quot;main:/my_go#camera&quot;</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_camera</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</code></pre></div>

Use the camera frustum for frustum culling together with a specific frustum plane option for the draw command
<div class="codehilite"><pre><span></span><code><span class="c1">-- The camera frustum will take precedence over the frustum plane option in render.draw</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_camera</span><span class="p">(</span><span class="s2">&quot;main:/my_go#camera&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">use_frustum</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
<span class="c1">-- However, we can still customize the frustum planes regardless of the camera option!</span>
<span class="n">render</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_pred</span><span class="p">,</span> <span class="p">{</span> <span class="n">frustum_planes</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FRUSTUM_PLANES_ALL</span> <span class="p">})</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_camera</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [108] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = nil,
            },
            ["name"] = compute,
            ["doc"] = compute id to use, or nil to disable,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The name of the compute program must be specified in the ".render" resource set
in the "game.project" setting. If nil (or no arguments) are passed to this function,
the current compute program will instead be disabled.,
        ["name"] = render.set_compute,
        ["error"] = ,
        ["brief"] = set the current compute program,
        ["type"] = FUNCTION,
        ["examples"] = Enable compute program named "fractals", then dispatch it.
<div class="codehilite"><pre><span></span><code><span class="n">render</span><span class="p">.</span><span class="n">set_compute</span><span class="p">(</span><span class="s2">&quot;fractals&quot;</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">backing_texture</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">dispatch_compute</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_compute</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [109] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = global work group size X,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = global work group size Y,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = z,
            ["doc"] = global work group size Z,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional table with properties:
<dl>
<dt><code>constants</code></dt>
<dd><span class="type">constant_buffer</span> optional constants to use while rendering</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dispatches the currently enabled compute program. The dispatch call takes three arguments x,y,z which constitutes
the 'global working group' of the compute dispatch. Together with the 'local working group' specified in the compute shader
as a layout qualifier, these two sets of parameters forms the number of invocations the compute shader will execute.
An optional constant buffer can be provided to override the default constants. If no constants buffer is provided, a default
system constants buffer is used containing constants as defined in the compute program.,
        ["name"] = render.dispatch_compute,
        ["error"] = ,
        ["brief"] = dispatches the currently enabled compute program,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">color_params</span> <span class="o">=</span> <span class="p">{</span> <span class="n">format</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">FORMAT_RGBA</span><span class="p">,</span>
                           <span class="n">width</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_width</span><span class="p">(),</span>
                           <span class="n">height</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_window_height</span><span class="p">()}</span>
    <span class="n">self</span><span class="p">.</span><span class="n">scene_rt</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">render_target</span><span class="p">({[</span><span class="n">render</span><span class="p">.</span><span class="n">BUFFER_COLOR_BIT</span><span class="p">]</span> <span class="o">=</span> <span class="n">color_params</span><span class="p">})</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_compute</span><span class="p">(</span><span class="s2">&quot;bloom&quot;</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">backing_texture</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">enable_texture</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">scene_rt</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">dispatch_compute</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">render</span><span class="p">.</span><span class="n">set_compute</span><span class="p">()</span>
<span class="kr">end</span>
</code></pre></div>

Dispatch a compute program with a constant buffer:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">constants</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">constant_buffer</span><span class="p">()</span>
<span class="n">constants</span><span class="p">.</span><span class="n">tint</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">dispatch_compute</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="p">{</span><span class="n">constants</span> <span class="o">=</span> <span class="n">constants</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Rendering functions, messages and constants. The "render" namespace is
accessible only from render scripts.
The rendering API was originally built on top of OpenGL ES 2.0, and it uses a subset of the
OpenGL computer graphics rendering API for rendering 2D and 3D computer
graphics. Our current target is OpenGLES 3.0 with fallbacks to 2.0 on some platforms.
<span class="icon-attention"></span> It is possible to create materials and write shaders that
require features not in OpenGL ES 2.0, but those will not work cross platform.,
      ["name"] = Render,
      ["notes"] = {},
      ["namespace"] = render,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Rendering API documentation,
    },
  },
  [25] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.material,
        ["error"] = ,
        ["brief"] = reference to material resource,
        ["type"] = FUNCTION,
        ["examples"] = Load a material and set it to a sprite:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/material.material&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;material&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Load a material resource and update a named material with the resource:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/material.material&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;materials&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;my_material&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.font,
        ["error"] = ,
        ["brief"] = reference to font resource,
        ["type"] = FUNCTION,
        ["examples"] = Load a font and set it to a label:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_font&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">font</span><span class="p">(</span><span class="s2">&quot;/font.font&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;font&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_font</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Load a font and set it to a gui:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_font&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">font</span><span class="p">(</span><span class="s2">&quot;/font.font&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;fonts&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_font</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;my_font&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.texture,
        ["error"] = ,
        ["brief"] = reference to texture resource,
        ["type"] = FUNCTION,
        ["examples"] = Load a texture and set it to a model:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_texture&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">texture</span><span class="p">(</span><span class="s2">&quot;/texture.png&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_texture</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.atlas,
        ["error"] = ,
        ["brief"] = reference to atlas resource,
        ["type"] = FUNCTION,
        ["examples"] = Load an atlas and set it to a sprite:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_atlas&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">atlas</span><span class="p">(</span><span class="s2">&quot;/atlas.atlas&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;image&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_atlas</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Load an atlas and set it to a gui:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_atlas&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">atlas</span><span class="p">(</span><span class="s2">&quot;/atlas.atlas&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;textures&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_atlas</span><span class="p">,</span> <span class="p">{</span><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;my_atlas&quot;</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.buffer,
        ["error"] = ,
        ["brief"] = reference to buffer resource,
        ["type"] = FUNCTION,
        ["examples"] = Set a unique buffer it to a sprite:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_buffer&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">buffer</span><span class="p">(</span><span class="s2">&quot;/cube.buffer&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#mesh&quot;</span><span class="p">,</span> <span class="s2">&quot;vertices&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_buffer</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.tile_source,
        ["error"] = ,
        ["brief"] = reference to tile source resource,
        ["type"] = FUNCTION,
        ["examples"] = Load tile source and set it to a tile map:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_tile_source&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">tile_source</span><span class="p">(</span><span class="s2">&quot;/tilesource.tilesource&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;tile_source&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_tile_source</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [path],
            ["doc"] = optional resource path string to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructor-like function with two purposes:
<ul>
<li>Load the specified resource as part of loading the script</li>
<li>Return a hash to the run-time version of the resource</li>
</ul>
<span class="icon-attention"></span> This function can only be called within <a href="/ref/go#go.property">go.property</a> function calls.,
        ["name"] = resource.render_target,
        ["error"] = ,
        ["brief"] = reference to render target resource,
        ["type"] = FUNCTION,
        ["examples"] = Set a render target color attachment as a model texture:
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_render_target&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">render_target</span><span class="p">(</span><span class="s2">&quot;/rt.render_target&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">rt_info</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_render_target_info</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_render_target</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">rt_info</span><span class="p">.</span><span class="n">attachments</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">texture</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = a path hash to the binary version of the resource,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = path,
            ["doc"] = The path to the resource,
          },
          [2] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = The buffer of precreated data, suitable for the intended resource type,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the resource data for a specific resource,
        ["name"] = resource.set,
        ["error"] = ,
        ["brief"] = Set a resource,
        ["type"] = FUNCTION,
        ["examples"] = Assuming the folder "/res" is added to the project custom resources:
<div class="codehilite"><pre><span></span><code><span class="c1">-- load a texture resource and set it on a sprite</span>
<span class="kd">local</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;/res/new.texturec&quot;</span><span class="p">)</span>
<span class="n">resource</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">),</span> <span class="n">buffer</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Loads the resource data for a specific resource.,
        ["name"] = resource.load,
        ["error"] = ,
        ["brief"] = load a resource,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- read custom resource data into buffer</span>
<span class="kd">local</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;/resources/datafile&quot;</span><span class="p">)</span>
</code></pre></div>

In order for the engine to include custom resources in the build process, you need
to specify them in the "game.project" settings file:
<div class="codehilite"><pre><span></span><code><span class="k">[project]</span><span class="w"></span>
<span class="na">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">My project</span><span class="w"></span>
<span class="na">version</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">0.1</span><span class="w"></span>
<span class="na">custom_resources</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">resources/,assets/level_data.json</span><span class="w"></span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = Returns the buffer stored on disc,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing info about how to create the texture. Supported entries:
<dl>
<dt><code>type</code></dt>
<dd><span class="type">number</span> The texture type. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_TYPE_2D</code></li>
<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>
<li><code>resource.TEXTURE_TYPE_IMAGE_2D</code></li>
</ul>
<dl>
<dt><code>width</code></dt>
<dd><span class="type">number</span> The width of the texture (in pixels). Must be larger than 0.</dd>
<dt><code>height</code></dt>
<dd><span class="type">number</span> The width of the texture (in pixels). Must be larger than 0.</dd>
<dt><code>format</code></dt>
<dd><span class="type">number</span> The texture format, note that some of these formats might not be supported by the running device. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_FORMAT_LUMINANCE</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA</code></li>
</ul>
These constants might not be available on the device:
<ul>
<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB_ETC1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_ETC2</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_ASTC_4x4</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB_BC1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_BC3</code></li>
<li><code>resource.TEXTURE_FORMAT_R_BC4</code></li>
<li><code>resource.TEXTURE_FORMAT_RG_BC5</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_BC7</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB16F</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB32F</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA16F</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA32F</code></li>
<li><code>resource.TEXTURE_FORMAT_R16F</code></li>
<li><code>resource.TEXTURE_FORMAT_RG16F</code></li>
<li><code>resource.TEXTURE_FORMAT_R32F</code></li>
<li><code>resource.TEXTURE_FORMAT_RG32F</code></li>
</ul>
You can test if the device supports these values by checking if a specific enum is nil or not:
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA16F</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="kr">then</span>
    <span class="c1">-- it is safe to use this format</span>
<span class="kr">end</span>
</code></pre></div>

<dl>
<dt><code>flags</code></dt>
<dd><span class="type">number</span> Texture creation flags that can be used to dictate how the texture is created. The default value is <a href="/ref/resource#resource.TEXTURE_USAGE_FLAG_SAMPLE">resource.TEXTURE_USAGE_FLAG_SAMPLE</a>, which means that the texture can be sampled from a shader.
These flags may or may not be supported on the running device and/or the underlying graphics API and is simply used internally as a 'hint' when creating the texture. There is no guarantee that any of these will have any effect. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_USAGE_FLAG_SAMPLE</code> - The texture can be sampled from a shader (default)</li>
<li><code>resource.TEXTURE_USAGE_FLAG_MEMORYLESS</code> - The texture can be used as a memoryless texture, i.e only transient memory for the texture is used during rendering</li>
<li><code>resource.TEXTURE_USAGE_FLAG_STORAGE</code> - The texture can be used as a storage texture, which is required for a shader to write to the texture</li>
</ul>
<dl>
<dt><code>max_mipmaps</code></dt>
<dd><span class="type">number</span> optional max number of mipmaps. Defaults to zero, i.e no mipmap support</dd>
<dt><code>compression_type</code></dt>
<dd><span class="type">number</span> optional specify the compression type for the data in the buffer object that holds the texture data. Will only be used when a compressed buffer has been passed into the function.
Creating an empty texture with no buffer data is not supported as a core feature. Defaults to resource.COMPRESSION_TYPE_DEFAULT, i.e no compression. Supported values:</dd>
</dl>
<ul>
<li><code>COMPRESSION_TYPE_DEFAULT</code></li>
<li><code>COMPRESSION_TYPE_BASIS_UASTC</code></li>
</ul>,
          },
          [3] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = optional buffer of precreated pixel data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new texture resource that can be used in the same way as any texture created during build time.
The path used for creating the texture must be unique, trying to create a resource at a path that is already
registered will trigger an error. If the intention is to instead modify an existing texture, use the <a href="/ref/resource#resource.set_texture">resource.set_texture</a>
function. Also note that the path to the new texture resource must have a '.texturec' extension,
meaning "/path/my_texture" is not a valid path but "/path/my_texture.texturec" is.
If the texture is created without a buffer, the pixel data will be blank.,
        ["name"] = resource.create_texture,
        ["error"] = ,
        ["brief"] = create a texture,
        ["type"] = FUNCTION,
        ["examples"] = How to create an 128x128 floating point texture (RGBA32F) resource from a buffer object
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- Create a new buffer with 4 components and FLOAT32 type</span>
    <span class="kd">local</span> <span class="n">tbuffer</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="mi">128</span> <span class="o">*</span> <span class="mi">128</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;rgba&quot;</span><span class="p">),</span> <span class="nb">type</span><span class="o">=</span><span class="n">buffer</span><span class="p">.</span><span class="n">VALUE_TYPE_FLOAT32</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">4</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
    <span class="kd">local</span> <span class="n">tstream</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">tbuffer</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;rgba&quot;</span><span class="p">))</span>

    <span class="c1">-- Fill the buffer stream with some float values</span>
    <span class="kr">for</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">128</span> <span class="kr">do</span>
        <span class="kr">for</span> <span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">128</span> <span class="kr">do</span>
            <span class="kd">local</span> <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">128</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">999.0</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span>
        <span class="kr">end</span>
    <span class="kr">end</span>

    <span class="c1">-- Create a 2D Texture with a RGBA23F format</span>
    <span class="kd">local</span> <span class="n">tparams</span> <span class="o">=</span> <span class="p">{</span>
       <span class="n">width</span>          <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
       <span class="n">height</span>         <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
       <span class="nb">type</span>           <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_TYPE_2D</span><span class="p">,</span>
       <span class="n">format</span>         <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA32F</span><span class="p">,</span>
   <span class="p">}</span>

   <span class="c1">-- Note that we pass the buffer as the last argument here!</span>
   <span class="kd">local</span> <span class="n">my_texture_id</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">create_texture</span><span class="p">(</span><span class="s2">&quot;/my_custom_texture.texturec&quot;</span><span class="p">,</span> <span class="n">tparams</span><span class="p">,</span> <span class="n">tbuffer</span><span class="p">)</span>

   <span class="c1">-- assign the texture to a model</span>
   <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">my_texture_id</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = <dl>
<dt>A table containing info about how to create the texture. Supported entries:</dt>
<dt><code>type</code></dt>
<dd><span class="type">number</span> The texture type. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_TYPE_2D</code></li>
<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>
</ul>
<dl>
<dt><code>width</code></dt>
<dd><span class="type">number</span> The width of the texture (in pixels). Must be larger than 0.</dd>
<dt><code>height</code></dt>
<dd><span class="type">number</span> The width of the texture (in pixels). Must be larger than 0.</dd>
<dt><code>format</code></dt>
<dd><span class="type">number</span> The texture format, note that some of these formats might not be supported by the running device. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_FORMAT_LUMINANCE</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA</code></li>
</ul>
These constants might not be available on the device:
<ul>
<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB_ETC1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_ETC2</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_ASTC_4x4</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB_BC1</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_BC3</code></li>
<li><code>resource.TEXTURE_FORMAT_R_BC4</code></li>
<li><code>resource.TEXTURE_FORMAT_RG_BC5</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA_BC7</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB16F</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB32F</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA16F</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA32F</code></li>
<li><code>resource.TEXTURE_FORMAT_R16F</code></li>
<li><code>resource.TEXTURE_FORMAT_RG16F</code></li>
<li><code>resource.TEXTURE_FORMAT_R32F</code></li>
<li><code>resource.TEXTURE_FORMAT_RG32F</code></li>
</ul>
<dl>
<dt><code>flags</code></dt>
<dd><span class="type">number</span> Texture creation flags that can be used to dictate how the texture is created. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_USAGE_FLAG_SAMPLE</code> - The texture can be sampled from a shader (default)</li>
<li><code>resource.TEXTURE_USAGE_FLAG_MEMORYLESS</code> - The texture can be used as a memoryless texture, i.e only transient memory for the texture is used during rendering</li>
<li><code>resource.TEXTURE_USAGE_FLAG_STORAGE</code> - The texture can be used as a storage texture, which is required for a shader to write to the texture</li>
</ul>
You can test if the device supports these values by checking if a specific enum is nil or not:
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA16F</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="kr">then</span>
    <span class="c1">-- it is safe to use this format</span>
<span class="kr">end</span>
</code></pre></div>

<dl>
<dt><code>max_mipmaps</code></dt>
<dd><span class="type">number</span> optional max number of mipmaps. Defaults to zero, i.e no mipmap support</dd>
<dt><code>compression_type</code></dt>
<dd><span class="type">number</span> optional specify the compression type for the data in the buffer object that holds the texture data. Will only be used when a compressed buffer has been passed into the function.
Creating an empty texture with no buffer data is not supported as a core feature. Defaults to resource.COMPRESSION_TYPE_DEFAULT, i.e no compression. Supported values:</dd>
</dl>
<ul>
<li><code>COMPRESSION_TYPE_DEFAULT</code></li>
<li><code>COMPRESSION_TYPE_BASIS_UASTC</code></li>
</ul>,
          },
          [3] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = optional buffer of precreated pixel data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new texture resource that can be used in the same way as any texture created during build time.
The path used for creating the texture must be unique, trying to create a resource at a path that is already
registered will trigger an error. If the intention is to instead modify an existing texture, use the <a href="/ref/resource#resource.set_texture">resource.set_texture</a>
function. Also note that the path to the new texture resource must have a '.texturec' extension,
meaning "/path/my_texture" is not a valid path but "/path/my_texture.texturec" is.
If the texture is created without a buffer, the pixel data will be blank.
The difference between the async version and <a href="/ref/resource#resource.create_texture">resource.create_texture</a> is that the texture data will be uploaded
in a graphics worker thread. The function will return a resource immediately that contains a 1x1 blank texture which can be used
immediately after the function call. When the new texture has been uploaded, the initial blank texture will be deleted and replaced with the
new texture. Be careful when using the initial texture handle handle as it will not be valid after the upload has finished.,
        ["name"] = resource.create_texture_async,
        ["error"] = ,
        ["brief"] = create a texture async,
        ["type"] = FUNCTION,
        ["examples"] = Create a texture resource asyncronously without a callback
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- Create a texture resource async</span>
    <span class="kd">local</span> <span class="n">tparams</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">width</span>          <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
        <span class="n">height</span>         <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
        <span class="nb">type</span>           <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_TYPE_2D</span><span class="p">,</span>
        <span class="n">format</span>         <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="c1">-- Create a new buffer with 4 components</span>
    <span class="kd">local</span> <span class="n">tbuffer</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">tparams</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">tparams</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="n">hash</span><span class="p">(</span><span class="s2">&quot;rgba&quot;</span><span class="p">),</span> <span class="nb">type</span><span class="o">=</span><span class="n">buffer</span><span class="p">.</span><span class="n">VALUE_TYPE_UINT8</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">4</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
    <span class="kd">local</span> <span class="n">tstream</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">tbuffer</span><span class="p">,</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;rgba&quot;</span><span class="p">))</span>

    <span class="c1">-- Fill the buffer stream with some float values</span>
    <span class="kr">for</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">tparams</span><span class="p">.</span><span class="n">width</span> <span class="kr">do</span>
        <span class="kr">for</span> <span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">tparams</span><span class="p">.</span><span class="n">height</span> <span class="kr">do</span>
            <span class="kd">local</span> <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">128</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
            <span class="n">tstream</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
    <span class="c1">-- create the texture</span>
    <span class="kd">local</span> <span class="n">tpath</span><span class="p">,</span> <span class="n">request_id</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">create_texture_async</span><span class="p">(</span><span class="s2">&quot;/my_texture.texturec&quot;</span><span class="p">,</span> <span class="n">tparams</span><span class="p">,</span> <span class="n">tbuffer</span><span class="p">)</span>
    <span class="c1">-- at this point you can use the resource as-is, but note that the texture will be a blank 1x1 texture</span>
    <span class="c1">-- that will be removed once the new texture has been updated</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">tpath</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
          [2] = {
            ["types"] = {
              [1] = handle,
            },
            ["name"] = request_id,
            ["doc"] = The request id for the async request.,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Release a resource.
<span class="icon-attention"></span> This is a potentially dangerous operation, releasing resources currently being used can cause unexpected behaviour.,
        ["name"] = resource.release,
        ["error"] = ,
        ["brief"] = release a resource,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing info about the texture. Supported entries:
<dl>
<dt><code>type</code></dt>
<dd><span class="type">number</span> The texture type. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_TYPE_2D</code></li>
<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>
</ul>
<dl>
<dt><code>width</code></dt>
<dd><span class="type">number</span> The width of the texture (in pixels)</dd>
<dt><code>height</code></dt>
<dd><span class="type">number</span> The width of the texture (in pixels)</dd>
<dt><code>format</code></dt>
<dd><span class="type">number</span> The texture format, note that some of these formats are platform specific. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_FORMAT_LUMINANCE</code></li>
<li><code>resource.TEXTURE_FORMAT_RGB</code></li>
<li><code>resource.TEXTURE_FORMAT_RGBA</code></li>
</ul>
These constants might not be available on the device:
- <code>resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1</code>
- <code>resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1</code>
- <code>resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1</code>
- <code>resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1</code>
- <code>resource.TEXTURE_FORMAT_RGB_ETC1</code>
- <code>resource.TEXTURE_FORMAT_RGBA_ETC2</code>
- <code>resource.TEXTURE_FORMAT_RGBA_ASTC_4x4</code>
- <code>resource.TEXTURE_FORMAT_RGB_BC1</code>
- <code>resource.TEXTURE_FORMAT_RGBA_BC3</code>
- <code>resource.TEXTURE_FORMAT_R_BC4</code>
- <code>resource.TEXTURE_FORMAT_RG_BC5</code>
- <code>resource.TEXTURE_FORMAT_RGBA_BC7</code>
- <code>resource.TEXTURE_FORMAT_RGB16F</code>
- <code>resource.TEXTURE_FORMAT_RGB32F</code>
- <code>resource.TEXTURE_FORMAT_RGBA16F</code>
- <code>resource.TEXTURE_FORMAT_RGBA32F</code>
- <code>resource.TEXTURE_FORMAT_R16F</code>
- <code>resource.TEXTURE_FORMAT_RG16F</code>
- <code>resource.TEXTURE_FORMAT_R32F</code>
- <code>resource.TEXTURE_FORMAT_RG32F</code>
You can test if the device supports these values by checking if a specific enum is nil or not:
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA16F</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="kr">then</span>
    <span class="c1">-- it is safe to use this format</span>
<span class="kr">end</span>
</code></pre></div>

<dl>
<dt><code>x</code></dt>
<dd><span class="type">number</span> optional x offset of the texture (in pixels)</dd>
<dt><code>y</code></dt>
<dd><span class="type">number</span> optional y offset of the texture (in pixels)</dd>
<dt><code>mipmap</code></dt>
<dd><span class="type">number</span> optional mipmap to upload the data to</dd>
<dt><code>compression_type</code></dt>
<dd><span class="type">number</span> optional specify the compression type for the data in the buffer object that holds the texture data. Defaults to resource.COMPRESSION_TYPE_DEFAULT, i.e no compression. Supported values:</dd>
</dl>
<ul>
<li><code>COMPRESSION_TYPE_DEFAULT</code></li>
<li><code>COMPRESSION_TYPE_BASIS_UASTC</code></li>
</ul>,
          },
          [3] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = The buffer of precreated pixel data
<span class="icon-attention"></span> To update a cube map texture you need to pass in six times the amount of data via the buffer, since a cube map has six sides!,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the pixel data for a specific texture.,
        ["name"] = resource.set_texture,
        ["error"] = ,
        ["brief"] = set a texture,
        ["type"] = FUNCTION,
        ["examples"] = Update a texture from a buffer resource
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_buffer&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">buffer</span><span class="p">(</span><span class="s2">&quot;/my_default_buffer.buffer&quot;</span><span class="p">))</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">resource_path</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">)</span>
    <span class="c1">-- the &quot;my_buffer&quot; resource is expected to hold 128 * 128 * 3 bytes!</span>
    <span class="kd">local</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{</span>
         <span class="n">width</span>  <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
         <span class="n">height</span> <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
         <span class="nb">type</span>   <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_TYPE_2D</span><span class="p">,</span>
         <span class="n">format</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGB</span>
     <span class="p">}</span>
    <span class="c1">-- Note that the extra resource.get_buffer call is a requirement here</span>
    <span class="c1">-- since the &quot;self.my_buffer&quot; is just pointing to a buffer resource path</span>
    <span class="c1">-- and not an actual buffer object or buffer resource.</span>
    <span class="n">resource</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">resource_path</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_buffer</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">my_buffer</span><span class="p">))</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
              [3] = handle,
            },
            ["name"] = path,
            ["doc"] = The path to the resource or a texture handle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets texture info from a texture resource path or a texture handle,
        ["name"] = resource.get_texture_info,
        ["error"] = ,
        ["brief"] = get texture info,
        ["type"] = FUNCTION,
        ["examples"] = Get the meta data from an atlas resource
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">my_atlas_info</span>   <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_atlas</span><span class="p">(</span><span class="s2">&quot;/my_atlas.a.texturesetc&quot;</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">my_texture_info</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_texture_info</span><span class="p">(</span><span class="n">my_atlas_info</span><span class="p">.</span><span class="n">texture</span><span class="p">)</span>

    <span class="c1">-- my_texture_info now contains the information about the texture that is backing the atlas</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing info about the texture:
<dl>
<dt><code>handle</code></dt>
<dd><span class="type">handle</span> the opaque handle to the texture resource</dd>
<dt><code>width</code></dt>
<dd><span class="type">integer</span> width of the texture</dd>
<dt><code>height</code></dt>
<dd><span class="type">integer</span> height of the texture</dd>
<dt><code>depth</code></dt>
<dd><span class="type">integer</span> depth of the texture (i.e 1 for a 2D texture and 6 for a cube map)</dd>
<dt><code>mipmaps</code></dt>
<dd><span class="type">integer</span> number of mipmaps of the texture</dd>
<dt><code>flags</code></dt>
<dd><span class="type">integer</span> usage hints of the texture.</dd>
<dt><code>type</code></dt>
<dd><span class="type">number</span> The texture type. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_TYPE_2D</code></li>
<li><code>resource.TEXTURE_TYPE_IMAGE_2D</code></li>
<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>
<li><code>resource.TEXTURE_TYPE_2D_ARRAY</code></li>
</ul>,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
              [3] = handle,
            },
            ["name"] = path,
            ["doc"] = The path to the resource or a render target handle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets render target info from a render target resource path or a render target handle,
        ["name"] = resource.get_render_target_info,
        ["error"] = ,
        ["brief"] = get render target info,
        ["type"] = FUNCTION,
        ["examples"] = Get a texture attachment from a render target and set it on a model component
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">info</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_render_target_info</span><span class="p">(</span><span class="s2">&quot;/my_render_target.render_targetc&quot;</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">attachment</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="n">attachments</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">texture</span>
    <span class="c1">-- you can also get texture info from the &#39;texture&#39; field, since it&#39;s a resource hash</span>
    <span class="kd">local</span> <span class="n">texture_info</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_texture_info</span><span class="p">(</span><span class="n">attachment</span><span class="p">)</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#model&quot;</span><span class="p">,</span> <span class="s2">&quot;texture0&quot;</span><span class="p">,</span> <span class="n">attachment</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing info about the render target:
<dl>
<dt><code>handle</code></dt>
<dd><span class="type">handle</span> the opaque handle to the texture resource</dd>
<dt>'attachments'</dt>
<dd><span class="type">table</span> a table of attachments, where each attachment contains the following entries:</dd>
<dt><code>handle</code></dt>
<dd><span class="type">handle</span> the opaque handle to the texture resource</dd>
<dt><code>width</code></dt>
<dd><span class="type">integer</span> width of the texture</dd>
<dt><code>height</code></dt>
<dd><span class="type">integer</span> height of the texture</dd>
<dt><code>depth</code></dt>
<dd><span class="type">integer</span> depth of the texture (i.e 1 for a 2D texture and 6 for a cube map)</dd>
<dt><code>mipmaps</code></dt>
<dd><span class="type">integer</span> number of mipmaps of the texture</dd>
<dt><code>type</code></dt>
<dd><span class="type">number</span> The texture type. Supported values:</dd>
</dl>
<ul>
<li><code>resource.TEXTURE_TYPE_2D</code></li>
<li><code>resource.TEXTURE_TYPE_CUBE_MAP</code></li>
<li><code>resource.TEXTURE_TYPE_2D_ARRAY</code></li>
</ul>
<dl>
<dt><code>buffer_type</code></dt>
<dd><span class="type">number</span> The attachment buffer type. Supported values:</dd>
</dl>
<ul>
<li><code>resource.BUFFER_TYPE_COLOR0</code></li>
<li><code>resource.BUFFER_TYPE_COLOR1</code></li>
<li><code>resource.BUFFER_TYPE_COLOR2</code></li>
<li><code>resource.BUFFER_TYPE_COLOR3</code></li>
<li><code>resource.BUFFER_TYPE_DEPTH</code></li>
<li>
<code>resource.BUFFER_TYPE_STENCIL</code>
</li>
<li>
<dl>
<dt><code>texture</code></dt>
<dd><span class="type">hash</span> The hashed path to the attachment texture resource. This field is only available if the render target passed in is a resource.</dd>
</dl>
</li>
</ul>,
          },
        },
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing info about how to create the atlas. Supported entries:
<ul>
<li>
<dl>
<dt><code>texture</code></dt>
<dd><span class="type">string | hash</span> the path to the texture resource, e.g "/main/my_texture.texturec"</dd>
</dl>
</li>
<li>
<dl>
<dt><code>animations</code></dt>
<dd><span class="type">table</span> a list of the animations in the atlas. Supports the following fields:</dd>
</dl>
</li>
<li>
<dl>
<dt><code>id</code></dt>
<dd><span class="type">string</span> the id of the animation, used in e.g sprite.play_animation</dd>
</dl>
</li>
<li>
<dl>
<dt><code>width</code></dt>
<dd><span class="type">integer</span> the width of the animation</dd>
</dl>
</li>
<li>
<dl>
<dt><code>height</code></dt>
<dd><span class="type">integer</span> the height of the animation</dd>
</dl>
</li>
<li>
<dl>
<dt><code>frame_start</code></dt>
<dd><span class="type">integer</span> index to the first geometry of the animation. Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>
</dl>
</li>
<li>
<dl>
<dt><code>frame_end</code></dt>
<dd><span class="type">integer</span> index to the last geometry of the animation (non-inclusive). Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>
</dl>
</li>
<li>
<dl>
<dt><code>playback</code></dt>
<dd><span class="type">constant</span> optional playback mode of the animation, the default value is <a href="/ref/go#go.PLAYBACK_ONCE_FORWARD">go.PLAYBACK_ONCE_FORWARD</a></dd>
</dl>
</li>
<li>
<dl>
<dt><code>fps</code></dt>
<dd><span class="type">integer</span> optional fps of the animation, the default value is 30</dd>
</dl>
</li>
<li>
<dl>
<dt><code>flip_vertical</code></dt>
<dd><span class="type">boolean</span> optional flip the animation vertically, the default value is false</dd>
</dl>
</li>
<li>
<dl>
<dt><code>flip_horizontal</code></dt>
<dd><span class="type">boolean</span> optional flip the animation horizontally, the default value is false</dd>
</dl>
</li>
<li>
<dl>
<dt><code>geometries</code></dt>
<dd><span class="type">table</span> A list of the geometries that should map to the texture data. Supports the following fields:</dd>
</dl>
</li>
<li>
<dl>
<dt><code>id</code></dt>
<dd><span class="type">string</span> The name of the geometry. Used when matching animations between multiple atlases</dd>
</dl>
</li>
<li>
<dl>
<dt><code>vertices</code></dt>
<dd><span class="type">table</span> a list of the vertices in texture space of the geometry in the form {px0, py0, px1, py1, ..., pxn, pyn}</dd>
</dl>
</li>
<li>
<dl>
<dt><code>uvs</code></dt>
<dd><span class="type">table</span> a list of the uv coordinates in texture space of the geometry in the form of {u0, v0, u1, v1, ..., un, vn}</dd>
</dl>
</li>
<li>
<dl>
<dt><code>indices</code></dt>
<dd><span class="type">table</span> a list of the indices of the geometry in the form {i0, i1, i2, ..., in}. Each tripe in the list represents a triangle.</dd>
</dl>
</li>
</ul>,
          },
        },
        ["notes"] = {
          [1] = The index values are zero based where zero refers to the first entry of the vertex and uv lists,
        },
        ["tparams"] = {},
        ["description"] = This function creates a new atlas resource that can be used in the same way as any atlas created during build time.
The path used for creating the atlas must be unique, trying to create a resource at a path that is already
registered will trigger an error. If the intention is to instead modify an existing atlas, use the <a href="/ref/resource#resource.set_atlas">resource.set_atlas</a>
function. Also note that the path to the new atlas resource must have a '.texturesetc' extension,
meaning "/path/my_atlas" is not a valid path but "/path/my_atlas.texturesetc" is.
When creating the atlas, at least one geometry and one animation is required, and an error will be
raised if these requirements are not met. A reference to the resource will be held by the collection
that created the resource and will automatically be released when that collection is destroyed.
Note that releasing a resource essentially means decreasing the reference count of that resource,
and not necessarily that it will be deleted.,
        ["name"] = resource.create_atlas,
        ["error"] = ,
        ["brief"] = create an atlas resource,
        ["type"] = FUNCTION,
        ["examples"] = Create a backing texture and an atlas
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="c1">-- create an empty texture</span>
    <span class="kd">local</span> <span class="n">tparams</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">width</span>          <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
        <span class="n">height</span>         <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
        <span class="nb">type</span>           <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_TYPE_2D</span><span class="p">,</span>
        <span class="n">format</span>         <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">TEXTURE_FORMAT_RGBA</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="kd">local</span> <span class="n">my_texture_id</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">create_texture</span><span class="p">(</span><span class="s2">&quot;/my_texture.texturec&quot;</span><span class="p">,</span> <span class="n">tparams</span><span class="p">)</span>

    <span class="c1">-- optionally use resource.set_texture to upload data to texture</span>

    <span class="c1">-- create an atlas with one animation and one square geometry</span>
    <span class="c1">-- note that the function doesn&#39;t support hashes for the texture,</span>
    <span class="c1">-- you need to use a string for the texture path here aswell</span>
    <span class="kd">local</span> <span class="n">aparams</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">texture</span> <span class="o">=</span> <span class="s2">&quot;/my_texture.texturec&quot;</span><span class="p">,</span>
        <span class="n">animations</span> <span class="o">=</span> <span class="p">{</span>
            <span class="p">{</span>
                <span class="n">id</span>          <span class="o">=</span> <span class="s2">&quot;my_animation&quot;</span><span class="p">,</span>
                <span class="n">width</span>       <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
                <span class="n">height</span>      <span class="o">=</span> <span class="mi">128</span><span class="p">,</span>
                <span class="n">frame_start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
                <span class="n">frame_end</span>   <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="n">geometries</span> <span class="o">=</span> <span class="p">{</span>
            <span class="p">{</span>
                <span class="n">id</span> <span class="o">=</span> <span class="s1">&#39;idle0&#39;</span><span class="p">,</span>
                <span class="n">vertices</span>  <span class="o">=</span> <span class="p">{</span>
                    <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>
                    <span class="mi">0</span><span class="p">,</span>   <span class="mi">128</span><span class="p">,</span>
                    <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span>
                    <span class="mi">128</span><span class="p">,</span> <span class="mi">0</span>
                <span class="p">},</span>
                <span class="n">uvs</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>
                    <span class="mi">0</span><span class="p">,</span>   <span class="mi">128</span><span class="p">,</span>
                    <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span>
                    <span class="mi">128</span><span class="p">,</span> <span class="mi">0</span>
                <span class="p">},</span>
                <span class="n">indices</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">local</span> <span class="n">my_atlas_id</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">create_atlas</span><span class="p">(</span><span class="s2">&quot;/my_atlas.texturesetc&quot;</span><span class="p">,</span> <span class="n">aparams</span><span class="p">)</span>

    <span class="c1">-- assign the atlas to the &#39;sprite&#39; component on the same go</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;image&quot;</span><span class="p">,</span> <span class="n">my_atlas_id</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = Returns the atlas resource path,
          },
        },
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the atlas resource,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = A table containing info about the atlas. Supported entries:
<ul>
<li>
<dl>
<dt><code>texture</code></dt>
<dd><span class="type">string | hash</span> the path to the texture resource, e.g "/main/my_texture.texturec"</dd>
</dl>
</li>
<li>
<dl>
<dt><code>animations</code></dt>
<dd><span class="type">table</span> a list of the animations in the atlas. Supports the following fields:</dd>
</dl>
</li>
<li>
<dl>
<dt><code>id</code></dt>
<dd><span class="type">string</span> the id of the animation, used in e.g sprite.play_animation</dd>
</dl>
</li>
<li>
<dl>
<dt><code>width</code></dt>
<dd><span class="type">integer</span> the width of the animation</dd>
</dl>
</li>
<li>
<dl>
<dt><code>height</code></dt>
<dd><span class="type">integer</span> the height of the animation</dd>
</dl>
</li>
<li>
<dl>
<dt><code>frame_start</code></dt>
<dd><span class="type">integer</span> index to the first geometry of the animation. Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>
</dl>
</li>
<li>
<dl>
<dt><code>frame_end</code></dt>
<dd><span class="type">integer</span> index to the last geometry of the animation (non-inclusive). Indices are lua based and must be in the range of 1 .. <number-of-geometries> in atlas.</dd>
</dl>
</li>
<li>
<dl>
<dt><code>playback</code></dt>
<dd><span class="type">constant</span> optional playback mode of the animation, the default value is <a href="/ref/go#go.PLAYBACK_ONCE_FORWARD">go.PLAYBACK_ONCE_FORWARD</a></dd>
</dl>
</li>
<li>
<dl>
<dt><code>fps</code></dt>
<dd><span class="type">integer</span> optional fps of the animation, the default value is 30</dd>
</dl>
</li>
<li>
<dl>
<dt><code>flip_vertical</code></dt>
<dd><span class="type">boolean</span> optional flip the animation vertically, the default value is false</dd>
</dl>
</li>
<li>
<dl>
<dt><code>flip_horizontal</code></dt>
<dd><span class="type">boolean</span> optional flip the animation horizontally, the default value is false</dd>
</dl>
</li>
<li>
<dl>
<dt><code>geometries</code></dt>
<dd><span class="type">table</span> A list of the geometries that should map to the texture data. Supports the following fields:</dd>
</dl>
</li>
<li>
<dl>
<dt><code>vertices</code></dt>
<dd><span class="type">table</span> a list of the vertices in texture space of the geometry in the form {px0, py0, px1, py1, ..., pxn, pyn}</dd>
</dl>
</li>
<li>
<dl>
<dt><code>uvs</code></dt>
<dd><span class="type">table</span> a list of the uv coordinates in texture space of the geometry in the form of {u0, v0, u1, v1, ..., un, vn}</dd>
</dl>
</li>
<li>
<dl>
<dt><code>indices</code></dt>
<dd><span class="type">table</span> a list of the indices of the geometry in the form {i0, i1, i2, ..., in}. Each tripe in the list represents a triangle.</dd>
</dl>
</li>
</ul>,
          },
        },
        ["notes"] = {
          [1] = Custom atlas data is not compatible with slice-9 for sprites,
          [2] = The index values are zero based where zero refers to the first entry of the vertex and uv lists,
        },
        ["tparams"] = {},
        ["description"] = Sets the data for a specific atlas resource. Setting new atlas data is specified by passing in
a texture path for the backing texture of the atlas, a list of geometries and a list of animations
that map to the entries in the geometry list. The geometry entries are represented by three lists:
vertices, uvs and indices that together represent triangles that are used in other parts of the
engine to produce render objects from.
Vertex and uv coordinates for the geometries are expected to be
in pixel coordinates where 0,0 is the top left corner of the texture.
There is no automatic padding or margin support when setting custom data,
which could potentially cause filtering artifacts if used with a material sampler that has linear filtering.
If that is an issue, you need to calculate padding and margins manually before passing in the geometry data to
this function.,
        ["name"] = resource.set_atlas,
        ["error"] = ,
        ["brief"] = set atlas data,
        ["type"] = FUNCTION,
        ["examples"] = Sets atlas data for a 256x256 texture with a single animation being rendered as a quad
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">texture</span> <span class="o">=</span> <span class="s2">&quot;/main/my_256x256_texture.texturec&quot;</span><span class="p">,</span>
        <span class="n">animations</span> <span class="o">=</span> <span class="p">{</span>
            <span class="p">{</span>
                <span class="n">id</span>          <span class="o">=</span> <span class="s2">&quot;my_animation&quot;</span><span class="p">,</span>
                <span class="n">width</span>       <span class="o">=</span> <span class="mi">256</span><span class="p">,</span>
                <span class="n">height</span>      <span class="o">=</span> <span class="mi">256</span><span class="p">,</span>
                <span class="n">frame_start</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
                <span class="n">frame_end</span>   <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="n">geometries</span> <span class="o">=</span> <span class="p">{</span>
            <span class="p">{</span>
                <span class="n">vertices</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>
                    <span class="mi">0</span><span class="p">,</span>   <span class="mi">256</span><span class="p">,</span>
                    <span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span>
                    <span class="mi">256</span><span class="p">,</span> <span class="mi">0</span>
                <span class="p">},</span>
                <span class="n">uvs</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                    <span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span>
                    <span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span>
                    <span class="mi">256</span><span class="p">,</span> <span class="mi">0</span>
                <span class="p">},</span>
                <span class="n">indices</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">resource</span><span class="p">.</span><span class="n">set_atlas</span><span class="p">(</span><span class="s2">&quot;/main/test.a.texturesetc&quot;</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the atlas resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the atlas data for an atlas,
        ["name"] = resource.get_atlas,
        ["error"] = ,
        ["brief"] = Get atlas data,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = data,
            ["doc"] = A table with the following entries:
<ul>
<li>texture</li>
<li>geometries</li>
<li>animations</li>
</ul>
See <a href="/ref/resource#resource.set_atlas">resource.set_atlas</a> for a detailed description of each field,
          },
        },
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = A lua string containing the binary sound data,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Update internal sound resource (wavc/oggc) with new data,
        ["name"] = resource.set_sound,
        ["error"] = ,
        ["brief"] = Update internal sound resource,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [table],
            ["doc"] = A table containing info about how to create the buffer. Supported entries:
<ul>
<li>
<dl>
<dt><code>buffer</code></dt>
<dd><span class="type">buffer</span> the buffer to bind to this resource</dd>
</dl>
</li>
<li>
<dl>
<dt><code>transfer_ownership</code></dt>
<dd><span class="type">boolean</span> optional flag to determine wether or not the resource should take over ownership of the buffer object (default true)</dd>
</dl>
</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function creates a new buffer resource that can be used in the same way as any buffer created during build time.
The function requires a valid buffer created from either <a href="/ref/buffer#buffer.create">buffer.create</a> or another pre-existing buffer resource.
By default, the new resource will take ownership of the buffer lua reference, meaning the buffer will not automatically be removed
when the lua reference to the buffer is garbage collected. This behaviour can be overruled by specifying 'transfer_ownership = false'
in the argument table. If the new buffer resource is created from a buffer object that is created by another resource,
the buffer object will be copied and the new resource will effectively own a copy of the buffer instead.
Note that the path to the new resource must have the '.bufferc' extension, "/path/my_buffer" is not a valid path but "/path/my_buffer.bufferc" is.
The path must also be unique, attempting to create a buffer with the same name as an existing resource will raise an error.,
        ["name"] = resource.create_buffer,
        ["error"] = ,
        ["brief"] = create a buffer resource,
        ["type"] = FUNCTION,
        ["examples"] = Create a buffer resource from existing resource
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">res</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_buffer</span><span class="p">(</span><span class="s2">&quot;/my_buffer_path.bufferc&quot;</span><span class="p">)</span>
    <span class="c1">-- create a cloned buffer resource from another resource buffer</span>
    <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">reource</span><span class="p">.</span><span class="n">create_buffer</span><span class="p">(</span><span class="s2">&quot;/my_cloned_buffer.bufferc&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">res</span> <span class="p">})</span>
    <span class="c1">-- assign cloned buffer to a mesh component</span>
    <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;/go#mesh&quot;</span><span class="p">,</span> <span class="s2">&quot;vertices&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = path,
            ["doc"] = Returns the buffer resource path,
          },
        },
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = gets the buffer from a resource,
        ["name"] = resource.get_buffer,
        ["error"] = ,
        ["brief"] = get resource buffer,
        ["type"] = FUNCTION,
        ["examples"] = How to get the data from a buffer
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>

    <span class="kd">local</span> <span class="n">res_path</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#mesh&quot;</span><span class="p">,</span> <span class="s2">&quot;vertices&quot;</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_buffer</span><span class="p">(</span><span class="n">res_path</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">stream_positions</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>

    <span class="kr">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="o">#</span><span class="n">stream_positions</span> <span class="kr">do</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">stream_positions</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = The resource buffer,
          },
        },
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
              [2] = string,
            },
            ["name"] = path,
            ["doc"] = The path to the resource,
          },
          [2] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = The resource buffer,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [table],
            ["doc"] = A table containing info about how to set the buffer. Supported entries:
<ul>
<li>
<dl>
<dt><code>transfer_ownership</code></dt>
<dd><span class="type">boolean</span> optional flag to determine wether or not the resource should take over ownership of the buffer object (default false)</dd>
</dl>
</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the buffer of a resource. By default, setting the resource buffer will either copy the data from the incoming buffer object
to the buffer stored in the destination resource, or make a new buffer object if the sizes between the source buffer and the destination buffer
stored in the resource differs. In some cases, e.g performance reasons, it might be beneficial to just set the buffer object on the resource without copying or cloning.
To achieve this, set the <code>transfer_ownership</code> flag to true in the argument table. Transferring ownership from a lua buffer to a resource with this function
works exactly the same as <a href="/ref/resource#resource.create_buffer">resource.create_buffer</a>: the destination resource will take ownership of the buffer held by the lua reference, i.e the buffer will not automatically be removed
when the lua reference to the buffer is garbage collected.
Note: When setting a buffer with <code>transfer_ownership = true</code>, the currently bound buffer in the resource will be destroyed.,
        ["name"] = resource.set_buffer,
        ["error"] = ,
        ["brief"] = set resource buffer,
        ["type"] = FUNCTION,
        ["examples"] = How to set the data from a buffer
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">fill_stream</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">verts</span><span class="p">)</span>
    <span class="kr">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">verts</span><span class="p">)</span> <span class="kr">do</span>
        <span class="n">stream</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">verts</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
    <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>

    <span class="kd">local</span> <span class="n">res_path</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#mesh&quot;</span><span class="p">,</span> <span class="s2">&quot;vertices&quot;</span><span class="p">)</span>

    <span class="kd">local</span> <span class="n">positions</span> <span class="o">=</span> <span class="p">{</span>
         <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
         <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
         <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
    <span class="p">}</span>

    <span class="kd">local</span> <span class="n">num_verts</span> <span class="o">=</span> <span class="o">#</span><span class="n">positions</span> <span class="o">/</span> <span class="mi">3</span>

    <span class="c1">-- create a new buffer</span>
    <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">num_verts</span><span class="p">,</span> <span class="p">{</span>
        <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;position&quot;</span><span class="p">),</span> <span class="nb">type</span><span class="o">=</span><span class="n">buffer</span><span class="p">.</span><span class="n">VALUE_TYPE_FLOAT32</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">}</span>
    <span class="p">})</span>

    <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_buffer</span><span class="p">(</span><span class="n">res_path</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">stream_positions</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_stream</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>

    <span class="n">fill_stream</span><span class="p">(</span><span class="n">stream_positions</span><span class="p">,</span> <span class="n">positions</span><span class="p">)</span>

    <span class="n">resource</span><span class="p">.</span><span class="n">set_buffer</span><span class="p">(</span><span class="n">res_path</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = url,
            ["doc"] = the font to get the (unscaled) metrics from,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = text,
            ["doc"] = text to measure,
          },
          [3] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = A table containing parameters for the text. Supported entries:
<dl>
<dt><code>width</code></dt>
<dd><span class="type">integer</span> The width of the text field. Not used if <code>line_break</code> is false.</dd>
<dt><code>leading</code></dt>
<dd><span class="type">number</span> The leading (default 1.0)</dd>
<dt><code>tracking</code></dt>
<dd><span class="type">number</span> The tracking (default 0.0)</dd>
<dt><code>line_break</code></dt>
<dd><span class="type">boolean</span> If the calculation should consider line breaks (default false)</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets the text metrics from a font,
        ["name"] = resource.get_text_metrics,
        ["error"] = ,
        ["brief"] = gets the text metrics for a font,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">font</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#label&quot;</span><span class="p">,</span> <span class="s2">&quot;font&quot;</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">metrics</span> <span class="o">=</span> <span class="n">resource</span><span class="p">.</span><span class="n">get_text_metrics</span><span class="p">(</span><span class="n">font</span><span class="p">,</span> <span class="s2">&quot;The quick brown fox</span><span class="se">\n</span><span class="s2"> jumps over the lazy dog&quot;</span><span class="p">)</span>
    <span class="n">pprint</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = metrics,
            ["doc"] = a table with the following fields:
<ul>
<li>width</li>
<li>height</li>
<li>max_ascent</li>
<li>max_descent</li>
</ul>,
          },
        },
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = 2D texture type,
        ["name"] = resource.TEXTURE_TYPE_2D,
        ["error"] = ,
        ["brief"] = 2D texture type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Cube map texture type,
        ["name"] = resource.TEXTURE_TYPE_CUBE_MAP,
        ["error"] = ,
        ["brief"] = Cube map texture type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = 2D Array texture type,
        ["name"] = resource.TEXTURE_TYPE_2D_ARRAY,
        ["error"] = ,
        ["brief"] = 2D Array texture type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = luminance type texture format,
        ["name"] = resource.TEXTURE_FORMAT_LUMINANCE,
        ["error"] = ,
        ["brief"] = luminance type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB,
        ["error"] = ,
        ["brief"] = RGB type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA,
        ["error"] = ,
        ["brief"] = RGBA type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB_PVRTC_2BPPV1 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB_PVRTC_2BPPV1,
        ["error"] = ,
        ["brief"] = RGB_PVRTC_2BPPV1 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB_PVRTC_4BPPV1 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB_PVRTC_4BPPV1,
        ["error"] = ,
        ["brief"] = RGB_PVRTC_4BPPV1 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA_PVRTC_2BPPV1 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1,
        ["error"] = ,
        ["brief"] = RGBA_PVRTC_2BPPV1 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA_PVRTC_4BPPV1 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1,
        ["error"] = ,
        ["brief"] = RGBA_PVRTC_4BPPV1 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB_ETC1 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB_ETC1,
        ["error"] = ,
        ["brief"] = RGB_ETC1 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA_ETC2 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA_ETC2,
        ["error"] = ,
        ["brief"] = RGBA_ETC2 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA_ASTC_4x4 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA_ASTC_4x4,
        ["error"] = ,
        ["brief"] = RGBA_ASTC_4x4 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB_BC1 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB_BC1,
        ["error"] = ,
        ["brief"] = RGB_BC1 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA_BC3 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA_BC3,
        ["error"] = ,
        ["brief"] = RGBA_BC3 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = R_BC4 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_R_BC4,
        ["error"] = ,
        ["brief"] = R_BC4 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RG_BC5 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RG_BC5,
        ["error"] = ,
        ["brief"] = RG_BC5 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA_BC7 type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA_BC7,
        ["error"] = ,
        ["brief"] = RGBA_BC7 type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB16F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB16F,
        ["error"] = ,
        ["brief"] = RGB16F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGB32F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGB32F,
        ["error"] = ,
        ["brief"] = RGB32F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA16F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA16F,
        ["error"] = ,
        ["brief"] = RGBA16F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RGBA32F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RGBA32F,
        ["error"] = ,
        ["brief"] = RGBA32F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = R16F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_R16F,
        ["error"] = ,
        ["brief"] = R16F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [47] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RG16F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RG16F,
        ["error"] = ,
        ["brief"] = RG16F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [48] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = R32F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_R32F,
        ["error"] = ,
        ["brief"] = R32F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [49] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = RG32F type texture format,
        ["name"] = resource.TEXTURE_FORMAT_RG32F,
        ["error"] = ,
        ["brief"] = RG32F type texture format,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [50] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Usage hint for creating textures that can be sampled in a shader,
        ["name"] = resource.TEXTURE_USAGE_FLAG_SAMPLE,
        ["error"] = ,
        ["brief"] = Usage hint for creating textures that can be sampled in a shader,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [51] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Usage hint for creating textures that uses temporary memory,
        ["name"] = resource.TEXTURE_USAGE_FLAG_MEMORYLESS,
        ["error"] = ,
        ["brief"] = Usage hint for creating textures that uses temporary memory,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [52] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Usage hint for creating textures that can be used for writing in a shader,
        ["name"] = resource.TEXTURE_USAGE_FLAG_STORAGE,
        ["error"] = ,
        ["brief"] = Usage hint for creating textures that can be used for writing in a shader,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [53] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = COMPRESSION_TYPE_DEFAULT compression type,
        ["name"] = resource.COMPRESSION_TYPE_DEFAULT,
        ["error"] = ,
        ["brief"] = COMPRESSION_TYPE_DEFAULT compression type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [54] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = BASIS_UASTC compression type,
        ["name"] = resource.COMPRESSION_TYPE_BASIS_UASTC,
        ["error"] = ,
        ["brief"] = BASIS_UASTC compression type,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions and constants to access resources.,
      ["name"] = Resource,
      ["notes"] = {},
      ["namespace"] = resource,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Resource API documentation,
    },
  },
  [26] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Export and import functions, data, and objects to or from a DLL,
        ["name"] = DM_DLLEXPORT,
        ["error"] = ,
        ["brief"] = storage-class attribute for shared library export/import,
        ["type"] = MACRO,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">DM_DLLEXPORT</span><span class="w"> </span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">dmHashBuffer64</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">buffer</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">buffer_len</span><span class="p">);</span><span class="w"></span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = DEFOLD SDK,
      ["description"] = Utility functions for shared library export/import,
      ["name"] = Shared Library,
      ["notes"] = {},
      ["namespace"] = sharedlibrary,
      ["file"] = dmsdk/dlib/shared_library.h,
      ["path"] = engine/dlib/src/dmsdk/dlib/shared_library.h,
      ["brief"] = SDK Shared library API documentation,
    },
  },
  [27] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = recvt,
            ["doc"] = array with the sockets to test for characters available for reading.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = sendt,
            ["doc"] = array with sockets that are watched to see if it is OK to immediately write on them.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [timeout],
            ["doc"] = the maximum amount of time (in seconds) to wait for a change in status. Nil, negative or omitted timeout value allows the function to block indefinitely.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The function returns a list with the sockets ready for reading, a list with the sockets ready for writing and an error message. The error message is "timeout" if a timeout condition was met and nil otherwise. The returned tables are doubly keyed both by integers and also by the sockets themselves, to simplify the test if a specific socket has changed status.
<code>Recvt</code> and <code>sendt</code> parameters can be empty tables or <code>nil</code>. Non-socket values (or values with non-numeric indices) in these arrays will be silently ignored.
The returned tables are doubly keyed both by integers and also by the sockets themselves, to simplify the test if a specific socket has changed status.
<span class="icon-attention"></span> This function can monitor a limited number of sockets, as defined by the constant socket._SETSIZE. This number may be as high as 1024 or as low as 64 by default, depending on the system. It is usually possible to change this at compile time. Invoking select with a larger number of sockets will raise an error.
<span class="icon-attention"></span> A known bug in WinSock causes select to fail on non-blocking TCP sockets. The function may return a socket as writable even though the socket is not ready for sending.
<span class="icon-attention"></span> Calling select with a server socket in the receive parameter before a call to accept does not guarantee accept will return immediately. Use the settimeout method or accept might block forever.
<span class="icon-attention"></span> If you close a socket and pass it to select, it will be ignored.
(Using select with non-socket objects: Any object that implements <code>getfd</code> and <code>dirty</code> can be used with select, allowing objects from other libraries to be used within a socket.select driven loop.),
        ["name"] = socket.select,
        ["error"] = ,
        ["brief"] = waits for a number of sockets to change status,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = sockets_r,
            ["doc"] = a list with the sockets ready for reading.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = sockets_w,
            ["doc"] = a list with the sockets ready for writing.,
          },
          [3] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = an error message. "timeout" if a timeout condition was met, otherwise <code>nil</code>.,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This constant has a string describing the current LuaSocket version.,
        ["name"] = socket._VERSION,
        ["error"] = ,
        ["brief"] = the current LuaSocket version,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates and returns an IPv6 TCP master object. A master object can be transformed into a server object with the method <code>listen</code> (after a call to <code>bind</code>) or into a client object with the method connect. The only other method supported by a master object is the close method.
Note: The TCP object returned will have the option "ipv6-v6only" set to true.,
        ["name"] = socket.tcp6,
        ["error"] = ,
        ["brief"] = creates a new IPv6 TCP master object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = master,
              [2] = nil,
            },
            ["name"] = tcp_master,
            ["doc"] = a new IPv6 TCP master object, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This constant contains the maximum number of sockets that the select function can handle.,
        ["name"] = socket._SETSIZE,
        ["error"] = ,
        ["brief"] = max numbers of sockets the select function can handle,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates and returns an unconnected IPv6 UDP object. Unconnected objects support the <code>sendto</code>, <code>receive</code>, <code>receivefrom</code>, <code>getoption</code>, <code>getsockname</code>, <code>setoption</code>, <code>settimeout</code>, <code>setpeername</code>, <code>setsockname</code>, and <code>close</code> methods. The <code>setpeername</code> method is used to connect the object.
Note: The UDP object returned will have the option "ipv6-v6only" set to true.,
        ["name"] = socket.udp6,
        ["error"] = ,
        ["brief"] = creates a new IPv6 UDP object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = unconnected,
              [2] = nil,
            },
            ["name"] = udp_unconnected,
            ["doc"] = a new unconnected IPv6 UDP object, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = an IPv4 address or host name.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function converts from an IPv4 address to host name.
The address can be an IPv4 address or a host name.,
        ["name"] = socket.dns.tohostname,
        ["error"] = ,
        ["brief"] = resolve to host name (IPv4),
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = hostname,
            ["doc"] = the canonic host name of the given address, or <code>nil</code> in case of an error.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
              [2] = string,
            },
            ["name"] = resolved,
            ["doc"] = a table with all information returned by the resolver, or if an error occurs, the error message string.,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = a hostname or an IP address.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function converts a host name to IPv4 address.
The address can be an IP address or a host name.,
        ["name"] = socket.dns.toip,
        ["error"] = ,
        ["brief"] = resolve to IPv4 address,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = ip_address,
            ["doc"] = the first IP address found for the hostname, or <code>nil</code> in case of an error.,
          },
          [2] = {
            ["types"] = {
              [1] = table,
              [2] = string,
            },
            ["name"] = resolved,
            ["doc"] = a table with all information returned by the resolver, or if an error occurs, the error message string.,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the standard host name for the machine as a string.,
        ["name"] = socket.dns.gethostname,
        ["error"] = ,
        ["brief"] = gets the machine host name,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = hostname,
            ["doc"] = the host name for the machine.,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = a hostname or an IPv4 or IPv6 address.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function converts a host name to IPv4 or IPv6 address.
The supplied address can be an IPv4 or IPv6 address or host name.
The function returns a table with all information returned by the resolver:
<div class="codehilite"><pre><span></span><code><span class="p">{</span>
 <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">family</span> <span class="o">=</span> <span class="n">family</span><span class="o">-</span><span class="n">name</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">addr</span> <span class="o">=</span> <span class="n">address</span><span class="o">-</span><span class="mi">1</span>
  <span class="p">},</span>
  <span class="p">...</span>
  <span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">family</span> <span class="o">=</span> <span class="n">family</span><span class="o">-</span><span class="n">name</span><span class="o">-</span><span class="n">n</span><span class="p">,</span>
    <span class="n">addr</span> <span class="o">=</span> <span class="n">address</span><span class="o">-</span><span class="n">n</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>

Here, family contains the string <code>"inet"</code> for IPv4 addresses, and <code>"inet6"</code> for IPv6 addresses.
In case of error, the function returns nil followed by an error message.,
        ["name"] = socket.dns.getaddrinfo,
        ["error"] = ,
        ["brief"] = resolve to IPv4 or IPv6 address,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = resolved,
            ["doc"] = a table with all information returned by the resolver, or if an error occurs, <code>nil</code>.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = a hostname or an IPv4 or IPv6 address.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function converts an address to host name.
The supplied address can be an IPv4 or IPv6 address or host name.
The function returns a table with all information returned by the resolver:
<div class="codehilite"><pre><span></span><code><span class="p">{</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">host</span><span class="o">-</span><span class="n">name</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>
  <span class="p">...</span>
  <span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">host</span><span class="o">-</span><span class="n">name</span><span class="o">-</span><span class="n">n</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div>,
        ["name"] = socket.dns.getnameinfo,
        ["error"] = ,
        ["brief"] = resolve to hostname (IPv4 or IPv6),
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = resolved,
            ["doc"] = a table with all information returned by the resolver, or if an error occurs, <code>nil</code>.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = the address to connect to.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = port,
            ["doc"] = the port to connect to.,
          },
          [3] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [locaddr],
            ["doc"] = optional local address to bind to.,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [locport],
            ["doc"] = optional local port to bind to.,
          },
          [5] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [family],
            ["doc"] = optional socket family to use, <code>"inet"</code> or <code>"inet6"</code>.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function is a shortcut that creates and returns a TCP client object connected to a remote
address at a given port. Optionally, the user can also specify the local address and port to
bind (<code>locaddr</code> and <code>locport</code>), or restrict the socket family to <code>"inet"</code> or <code>"inet6"</code>.
Without specifying family to connect, whether a tcp or tcp6 connection is created depends on
your system configuration.,
        ["name"] = socket.connect,
        ["error"] = ,
        ["brief"] = creates a new connected TCP client object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = client,
              [2] = nil,
            },
            ["name"] = tcp_client,
            ["doc"] = a new IPv6 TCP client object, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates and returns an unconnected IPv4 UDP object. Unconnected objects support the <code>sendto</code>, <code>receive</code>, <code>receivefrom</code>, <code>getoption</code>, <code>getsockname</code>, <code>setoption</code>, <code>settimeout</code>, <code>setpeername</code>, <code>setsockname</code>, and <code>close</code> methods. The <code>setpeername</code> method is used to connect the object.,
        ["name"] = socket.udp,
        ["error"] = ,
        ["brief"] = creates a new IPv4 UDP object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = unconnected,
              [2] = nil,
            },
            ["name"] = udp_unconnected,
            ["doc"] = a new unconnected IPv4 UDP object, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = d,
            ["doc"] = the number of arguments to drop.,
          },
          [2] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [ret1],
            ["doc"] = argument 1.,
          },
          [3] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [ret2],
            ["doc"] = argument 2.,
          },
          [4] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [retN],
            ["doc"] = argument N.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function drops a number of arguments and returns the remaining.
It is useful to avoid creation of dummy variables:
<code>D</code> is the number of arguments to drop. <code>Ret<sub>1</sub></code> to <code>ret<sub>N</sub></code> are the arguments.
The function returns <code>ret<sub>D+1</sub></code> to <code>ret<sub>N</sub></code>.,
        ["name"] = socket.skip,
        ["error"] = ,
        ["brief"] = drops a number of arguments and returns the remaining,
        ["type"] = FUNCTION,
        ["examples"] = Instead of doing the following with dummy variables:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get the status code and separator from SMTP server reply</span>
<span class="kd">local</span> <span class="n">dummy1</span><span class="p">,</span> <span class="n">dummy2</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="nb">string.find</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s2">&quot;^(%d%d%d)(.?)&quot;</span><span class="p">)</span>
</code></pre></div>

You can skip a number of variables:
<div class="codehilite"><pre><span></span><code><span class="c1">-- get the status code and separator from SMTP server reply</span>
<span class="kd">local</span> <span class="n">code</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">skip</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">string.find</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s2">&quot;^(%d%d%d)(.?)&quot;</span><span class="p">))</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = retD+1,
            ["doc"] = argument D+1.,
          },
          [2] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = retD+2,
            ["doc"] = argument D+2.,
          },
          [3] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = retN,
            ["doc"] = argument N.,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates and returns an IPv4 TCP master object. A master object can be transformed into a server object with the method <code>listen</code> (after a call to <code>bind</code>) or into a client object with the method <code>connect</code>. The only other method supported by a master object is the <code>close</code> method.,
        ["name"] = socket.tcp,
        ["error"] = ,
        ["brief"] = creates a new IPv4 TCP master object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = master,
              [2] = nil,
            },
            ["name"] = tcp_master,
            ["doc"] = a new IPv4 TCP master object, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = function(),
            },
            ["name"] = finalizer,
            ["doc"] = a function that will be called before the try throws the exception.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This function creates and returns a clean try function that allows for cleanup before the exception is raised.
The <code>finalizer</code> function will be called in protected mode (see <a href="#protect">protect</a>).,
        ["name"] = socket.newtry,
        ["error"] = ,
        ["brief"] = creates a new try function,
        ["type"] = FUNCTION,
        ["examples"] = Perform operations on an open socket <code>c</code>:
<div class="codehilite"><pre><span></span><code><span class="c1">-- create a try function that closes &#39;c&#39; on error</span>
<span class="kd">local</span> <span class="n">try</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">newtry</span><span class="p">(</span><span class="kr">function</span><span class="p">()</span> <span class="n">c</span><span class="p">:</span><span class="n">close</span><span class="p">()</span> <span class="kr">end</span><span class="p">)</span>
<span class="c1">-- do everything reassured c will be closed</span>
<span class="n">try</span><span class="p">(</span><span class="n">c</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;hello there?</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">))</span>
<span class="kd">local</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">try</span><span class="p">(</span><span class="n">c</span><span class="p">:</span><span class="n">receive</span><span class="p">())</span>
<span class="p">...</span>
<span class="n">try</span><span class="p">(</span><span class="n">c</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;good bye</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">))</span>
<span class="n">c</span><span class="p">:</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = function,
            },
            ["name"] = try,
            ["doc"] = the customized try function.,
          },
        },
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = function,
            },
            ["name"] = func,
            ["doc"] = a function that calls a try function (or assert, or error) to throw exceptions.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Converts a function that throws exceptions into a safe function. This function only catches exceptions thrown by try functions. It does not catch normal Lua errors.
<span class="icon-attention"></span> Beware that if your function performs some illegal operation that raises an error, the protected function will catch the error and return it as a string. This is because try functions uses errors as the mechanism to throw exceptions.,
        ["name"] = socket.protect,
        ["error"] = ,
        ["brief"] = converts a function that throws exceptions into a safe function,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">dostuff</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">protect</span><span class="p">(</span><span class="kr">function</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">try</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">newtry</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">c</span> <span class="o">=</span> <span class="n">try</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;myserver.com&quot;</span><span class="p">,</span> <span class="mi">80</span><span class="p">))</span>
    <span class="n">try</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">newtry</span><span class="p">(</span><span class="kr">function</span><span class="p">()</span> <span class="n">c</span><span class="p">:</span><span class="n">close</span><span class="p">()</span> <span class="kr">end</span><span class="p">)</span>
    <span class="n">try</span><span class="p">(</span><span class="n">c</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;hello?</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">))</span>
    <span class="kd">local</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">try</span><span class="p">(</span><span class="n">c</span><span class="p">:</span><span class="n">receive</span><span class="p">())</span>
    <span class="n">c</span><span class="p">:</span><span class="n">close</span><span class="p">()</span>
<span class="kr">end</span><span class="p">)</span>

<span class="kd">local</span> <span class="n">n</span><span class="p">,</span> <span class="nb">error</span> <span class="o">=</span> <span class="n">dostuff</span><span class="p">()</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = function(function()),
            },
            ["name"] = safe_func,
            ["doc"] = an equivalent function that instead of throwing exceptions, returns <code>nil</code> followed by an error message.,
          },
        },
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the time in seconds, relative to the system epoch (Unix epoch time since January 1, 1970 (UTC) or Windows file time since January 1, 1601 (UTC)).
You should use the values returned by this function for relative measurements only.,
        ["name"] = socket.gettime,
        ["error"] = ,
        ["brief"] = gets seconds since system epoch,
        ["type"] = FUNCTION,
        ["examples"] = How to use the gettime() function to measure running time:
<div class="codehilite"><pre><span></span><code><span class="n">t</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">gettime</span><span class="p">()</span>
<span class="c1">-- do stuff</span>
<span class="nb">print</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">gettime</span><span class="p">()</span> <span class="o">-</span> <span class="n">t</span> <span class="o">..</span> <span class="s2">&quot; seconds elapsed&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = seconds,
            ["doc"] = the number of seconds elapsed.,
          },
        },
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = time,
            ["doc"] = the number of seconds to sleep for.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Freezes the program execution during a given amount of time.,
        ["name"] = socket.sleep,
        ["error"] = ,
        ["brief"] = sleeps for a number of seconds,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Waits for a remote connection on the server object and returns a client object representing that connection.
<span class="icon-attention"></span> Calling <code>socket.select</code> with a server object in the <code>recvt</code> parameter before a call to accept does not guarantee accept will return immediately. Use the <code>settimeout</code> method or accept might block until another client shows up.,
        ["name"] = server:accept,
        ["error"] = ,
        ["brief"] = waits for a remote connection on the server object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = client,
              [2] = nil,
            },
            ["name"] = tcp_client,
            ["doc"] = if a connection is successfully initiated, a client object is returned, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred. The error is <code>"timeout"</code> if a timeout condition is met.,
          },
        },
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = an IP address or a host name. If address is <code>"*"</code>, the system binds to all local interfaces using the <code>INADDR_ANY</code> constant.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = port,
            ["doc"] = the port to commect to, in the range [0..64K). If port is 0, the system automatically chooses an ephemeral port.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Binds a master object to address and port on the local host.,
        ["name"] = master:bind,
        ["error"] = ,
        ["brief"] = binds a master object to address and port on the local host,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Closes the TCP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.
<span class="icon-attention"></span> It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though.,
        ["name"] = master:close,
        ["error"] = ,
        ["brief"] = closes a master TCP object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Closes the TCP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.
<span class="icon-attention"></span> It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though.,
        ["name"] = client:close,
        ["error"] = ,
        ["brief"] = closes a client TCP object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Closes the TCP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.
<span class="icon-attention"></span> It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though.,
        ["name"] = server:close,
        ["error"] = ,
        ["brief"] = closes a server TCP object,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = an IP address or a host name. If address is <code>"*"</code>, the system binds to all local interfaces using the <code>INADDR_ANY</code> constant.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = port,
            ["doc"] = the port to commect to, in the range [0..64K). If port is 0, the system automatically chooses an ephemeral port.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Attempts to connect a master object to a remote host, transforming it into a client object. Client objects support methods send, receive, getsockname, getpeername, settimeout, and close.
Note that the function <code>socket.connect</code> is available and is a shortcut for the creation of client sockets.,
        ["name"] = master:connect,
        ["error"] = ,
        ["brief"] = connects a master object to a remote host,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns information about the remote side of a connected client object.
<span class="icon-attention"></span> It makes no sense to call this method on server objects.,
        ["name"] = client:getpeername,
        ["error"] = ,
        ["brief"] = gets information about a client's peer,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with the IP address of the peer, the port number that peer is using for the connection, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the local address information associated to the object.,
        ["name"] = master:getsockname,
        ["error"] = ,
        ["brief"] = gets the local address information from master,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with local IP address, the local port number, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the local address information associated to the object.,
        ["name"] = client:getsockname,
        ["error"] = ,
        ["brief"] = gets the local address information from client,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with local IP address, the local port number, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the local address information associated to the object.,
        ["name"] = server:getsockname,
        ["error"] = ,
        ["brief"] = gets the local address information from server,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with local IP address, the local port number, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns accounting information on the socket, useful for throttling of bandwidth.,
        ["name"] = master:getstats,
        ["error"] = ,
        ["brief"] = gets accounting information on the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = stats,
            ["doc"] = a string with the number of bytes received, the number of bytes sent, and the age of the socket object in seconds.,
          },
        },
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns accounting information on the socket, useful for throttling of bandwidth.,
        ["name"] = client:getstats,
        ["error"] = ,
        ["brief"] = gets accounting information on the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = stats,
            ["doc"] = a string with the number of bytes received, the number of bytes sent, and the age of the socket object in seconds.,
          },
        },
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns accounting information on the socket, useful for throttling of bandwidth.,
        ["name"] = server:getstats,
        ["error"] = ,
        ["brief"] = gets accounting information on the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = stats,
            ["doc"] = a string with the number of bytes received, the number of bytes sent, and the age of the socket object in seconds.,
          },
        },
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = backlog,
            ["doc"] = the number of client connections that can be queued waiting for service. If the queue is full and another client attempts connection, the connection is refused.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Specifies the socket is willing to receive connections, transforming the object into a server object. Server objects support the <code>accept</code>, <code>getsockname</code>, <code>setoption</code>, <code>settimeout</code>, and <code>close</code> methods.,
        ["name"] = master:listen,
        ["error"] = ,
        ["brief"] = makes the master socket listen for connections,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = number,
            },
            ["name"] = [pattern],
            ["doc"] = the read pattern that can be any of the following:
<dl>
<dt><code>"*a"</code></dt>
<dd>reads from the socket until the connection is closed. No end-of-line translation is performed;</dd>
<dt><code>"*l"</code></dt>
<dd>reads a line of text from the socket. The line is terminated by a LF character (ASCII 10), optionally preceded by a CR character (ASCII 13). The CR and LF characters are not included in the returned line. In fact, all CR characters are ignored by the pattern. This is the default pattern;</dd>
<dt><code>number</code></dt>
<dd>causes the method to read a specified number of bytes from the socket.</dd>
</dl>,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [prefix],
            ["doc"] = an optional string to be concatenated to the beginning of any received data before return.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Reads data from a client object, according to the specified <code>read pattern</code>. Patterns follow the Lua file I/O format, and the difference in performance between patterns is negligible.,
        ["name"] = client:receive,
        ["error"] = ,
        ["brief"] = receives data from a client socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = data,
            ["doc"] = the received pattern, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred. The error message can be the string <code>"closed"</code> in case the connection was closed before the transmission was completed or the string <code>"timeout"</code> in case there was a timeout during the operation.,
          },
          [3] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = partial,
            ["doc"] = a (possibly empty) string containing the partial that was received, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = data,
            ["doc"] = the string to be sent.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [i],
            ["doc"] = optional starting index of the string.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [j],
            ["doc"] = optional end index of string.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sends data through client object.
The optional arguments i and j work exactly like the standard <a href="/ref/string#string.sub">string.sub</a> Lua function to allow the selection of a substring to be sent.
<span class="icon-attention"></span> Output is not buffered. For small strings, it is always better to concatenate them in Lua (with the <code>..</code> operator) and send the result in one call instead of calling the method several times.,
        ["name"] = client:send,
        ["error"] = ,
        ["brief"] = sends data through client socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = index,
            ["doc"] = the index of the last byte within [i, j] that has been sent, or <code>nil</code> in case of error. Notice that, if <code>i</code> is 1 or absent, this is effectively the total number of bytes sent.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred. The error message can be <code>"closed"</code> in case the connection was closed before the transmission was completed or the string <code>"timeout"</code> in case there was a timeout during the operation.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = lastindex,
            ["doc"] = in case of error, the index of the last byte within [i, j] that has been sent. You might want to try again from the byte following that. <code>nil</code> if no error occurred.,
          },
        },
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to set. The value is provided in the <code>value</code> parameter:
<dl>
<dt><code>"keepalive"</code></dt>
<dd>Setting this option to <code>true</code> enables the periodic transmission of messages on a connected socket. Should the connected party fail to respond to these messages, the connection is considered broken and processes using the socket are notified;</dd>
<dt><code>"linger"</code></dt>
<dd>Controls the action taken when unsent data are queued on a socket and a close is performed. The value is a table with the following keys:</dd>
</dl>
<ul>
<li><span class="type">boolean</span> <code>on</code></li>
<li><span class="type">number</span> <code>timeout</code> (seconds)</li>
</ul>
If the 'on' field is set to true, the system will block the process on the close attempt until it is able to transmit the data or until <code>timeout</code> has passed. If 'on' is false and a close is issued, the system will process the close in a manner that allows the process to continue as quickly as possible. It is not advised to set this to anything other than zero;
<dl>
<dt><code>"reuseaddr"</code></dt>
<dd>Setting this option indicates that the rules used in validating addresses supplied in a call to <code>bind</code> should allow reuse of local addresses;</dd>
<dt><code>"tcp-nodelay"</code></dt>
<dd>Setting this option to <code>true</code> disables the Nagle's algorithm for the connection;</dd>
<dt><code>"ipv6-v6only"</code></dt>
<dd>Setting this option to <code>true</code> restricts an inet6 socket to sending and receiving only IPv6 packets.</dd>
</dl>,
          },
          [2] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [value],
            ["doc"] = the value to set for the specified option.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets options for the TCP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.,
        ["name"] = client:setoption,
        ["error"] = ,
        ["brief"] = sets options for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to set. The value is provided in the <code>value</code> parameter:
<dl>
<dt><code>"keepalive"</code></dt>
<dd>Setting this option to <code>true</code> enables the periodic transmission of messages on a connected socket. Should the connected party fail to respond to these messages, the connection is considered broken and processes using the socket are notified;</dd>
<dt><code>"linger"</code></dt>
<dd>Controls the action taken when unsent data are queued on a socket and a close is performed. The value is a table with the following keys:</dd>
</dl>
<ul>
<li><span class="type">boolean</span> <code>on</code></li>
<li><span class="type">number</span> <code>timeout</code> (seconds)</li>
</ul>
If the 'on' field is set to true, the system will block the process on the close attempt until it is able to transmit the data or until <code>timeout</code> has passed. If 'on' is false and a close is issued, the system will process the close in a manner that allows the process to continue as quickly as possible. It is not advised to set this to anything other than zero;
<dl>
<dt><code>"reuseaddr"</code></dt>
<dd>Setting this option indicates that the rules used in validating addresses supplied in a call to <code>bind</code> should allow reuse of local addresses;</dd>
<dt><code>"tcp-nodelay"</code></dt>
<dd>Setting this option to <code>true</code> disables the Nagle's algorithm for the connection;</dd>
<dt><code>"ipv6-v6only"</code></dt>
<dd>Setting this option to <code>true</code> restricts an inet6 socket to sending and receiving only IPv6 packets.</dd>
</dl>,
          },
          [2] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [value],
            ["doc"] = the value to set for the specified option.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets options for the TCP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.,
        ["name"] = server:setoption,
        ["error"] = ,
        ["brief"] = sets options for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to get:
<ul>
<li><code>"keepalive"</code></li>
<li><code>"linger"</code></li>
<li><code>"reuseaddr"</code></li>
<li><code>"tcp-nodelay"</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets options for the TCP object. See <a href="#client:setoption">client:setoption</a> for description of the option names and values.,
        ["name"] = client:getoption,
        ["error"] = ,
        ["brief"] = gets options for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = value,
            ["doc"] = the option value, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to get:
<ul>
<li><code>"keepalive"</code></li>
<li><code>"linger"</code></li>
<li><code>"reuseaddr"</code></li>
<li><code>"tcp-nodelay"</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets options for the TCP object. See <a href="#server:setoption">server:setoption</a> for description of the option names and values.,
        ["name"] = server:getoption,
        ["error"] = ,
        ["brief"] = gets options for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = value,
            ["doc"] = the option value, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = received,
            ["doc"] = the new number of bytes received.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = sent,
            ["doc"] = the new number of bytes sent.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = age,
            ["doc"] = the new age in seconds.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets accounting information on the socket, useful for throttling of bandwidth.,
        ["name"] = master:setstats,
        ["error"] = ,
        ["brief"] = resets accounting information on the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> in case of success, or <code>nil</code> in case of error.,
          },
        },
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = received,
            ["doc"] = the new number of bytes received.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = sent,
            ["doc"] = the new number of bytes sent.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = age,
            ["doc"] = the new age in seconds.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets accounting information on the socket, useful for throttling of bandwidth.,
        ["name"] = client:setstats,
        ["error"] = ,
        ["brief"] = resets accounting information on the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> in case of success, or <code>nil</code> in case of error.,
          },
        },
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = received,
            ["doc"] = the new number of bytes received.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = sent,
            ["doc"] = the new number of bytes sent.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = age,
            ["doc"] = the new age in seconds.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Resets accounting information on the socket, useful for throttling of bandwidth.,
        ["name"] = server:setstats,
        ["error"] = ,
        ["brief"] = resets accounting information on the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> in case of success, or <code>nil</code> in case of error.,
          },
        },
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = value,
            ["doc"] = the amount of time to wait, in seconds. The <code>nil</code> timeout value allows operations to block indefinitely. Negative timeout values have the same effect.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [mode],
            ["doc"] = optional timeout mode to set:
<dl>
<dt><code>"b"</code></dt>
<dd>block timeout. Specifies the upper limit on the amount of time LuaSocket can be blocked by the operating system while waiting for completion of any single I/O operation. This is the default mode;</dd>
<dt><code>"t"</code></dt>
<dd>total timeout. Specifies the upper limit on the amount of time LuaSocket can block a Lua script before returning from a call.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the timeout values for the object. By default, all I/O operations are blocking. That is, any call to the methods <code>send</code>, <code>receive</code>, and <code>accept</code> will block indefinitely, until the operation completes. The <code>settimeout</code> method defines a limit on the amount of time the I/O methods can block. When a timeout is set and the specified amount of time has elapsed, the affected methods give up and fail with an error code.
There are two timeout modes and both can be used together for fine tuning.
<span class="icon-attention"></span> Although timeout values have millisecond precision in LuaSocket, large blocks can cause I/O functions not to respect timeout values due to the time the library takes to transfer blocks to and from the OS and to and from the Lua interpreter. Also, function that accept host names and perform automatic name resolution might be blocked by the resolver for longer than the specified timeout value.,
        ["name"] = master:settimeout,
        ["error"] = ,
        ["brief"] = set the timeout values for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = value,
            ["doc"] = the amount of time to wait, in seconds. The <code>nil</code> timeout value allows operations to block indefinitely. Negative timeout values have the same effect.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [mode],
            ["doc"] = optional timeout mode to set:
<dl>
<dt><code>"b"</code></dt>
<dd>block timeout. Specifies the upper limit on the amount of time LuaSocket can be blocked by the operating system while waiting for completion of any single I/O operation. This is the default mode;</dd>
<dt><code>"t"</code></dt>
<dd>total timeout. Specifies the upper limit on the amount of time LuaSocket can block a Lua script before returning from a call.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the timeout values for the object. By default, all I/O operations are blocking. That is, any call to the methods <code>send</code>, <code>receive</code>, and <code>accept</code> will block indefinitely, until the operation completes. The <code>settimeout</code> method defines a limit on the amount of time the I/O methods can block. When a timeout is set and the specified amount of time has elapsed, the affected methods give up and fail with an error code.
There are two timeout modes and both can be used together for fine tuning.
<span class="icon-attention"></span> Although timeout values have millisecond precision in LuaSocket, large blocks can cause I/O functions not to respect timeout values due to the time the library takes to transfer blocks to and from the OS and to and from the Lua interpreter. Also, function that accept host names and perform automatic name resolution might be blocked by the resolver for longer than the specified timeout value.,
        ["name"] = client:settimeout,
        ["error"] = ,
        ["brief"] = set the timeout values for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = value,
            ["doc"] = the amount of time to wait, in seconds. The <code>nil</code> timeout value allows operations to block indefinitely. Negative timeout values have the same effect.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [mode],
            ["doc"] = optional timeout mode to set:
<dl>
<dt><code>"b"</code></dt>
<dd>block timeout. Specifies the upper limit on the amount of time LuaSocket can be blocked by the operating system while waiting for completion of any single I/O operation. This is the default mode;</dd>
<dt><code>"t"</code></dt>
<dd>total timeout. Specifies the upper limit on the amount of time LuaSocket can block a Lua script before returning from a call.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the timeout values for the object. By default, all I/O operations are blocking. That is, any call to the methods <code>send</code>, <code>receive</code>, and <code>accept</code> will block indefinitely, until the operation completes. The <code>settimeout</code> method defines a limit on the amount of time the I/O methods can block. When a timeout is set and the specified amount of time has elapsed, the affected methods give up and fail with an error code.
There are two timeout modes and both can be used together for fine tuning.
<span class="icon-attention"></span> Although timeout values have millisecond precision in LuaSocket, large blocks can cause I/O functions not to respect timeout values due to the time the library takes to transfer blocks to and from the OS and to and from the Lua interpreter. Also, function that accept host names and perform automatic name resolution might be blocked by the resolver for longer than the specified timeout value.,
        ["name"] = server:settimeout,
        ["error"] = ,
        ["brief"] = set the timeout values for the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = mode,
            ["doc"] = which way of the connection should be shut down:
<dl>
<dt><code>"both"</code></dt>
<dd>disallow further sends and receives on the object. This is the default mode;</dd>
<dt><code>"send"</code></dt>
<dd>disallow further sends on the object;</dd>
<dt><code>"receive"</code></dt>
<dd>disallow further receives on the object.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Shuts down part of a full-duplex connection.,
        ["name"] = client:shutdown,
        ["error"] = ,
        ["brief"] = shut down socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>.,
          },
        },
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Check the read buffer status.
<span class="icon-attention"></span> This is an internal method, any use is unlikely to be portable.,
        ["name"] = master:dirty,
        ["error"] = ,
        ["brief"] = checks the read buffer status,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = status,
            ["doc"] = <code>true</code> if there is any data in the read buffer, <code>false</code> otherwise.,
          },
        },
      },
      [47] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Check the read buffer status.
<span class="icon-attention"></span> This is an internal method, any use is unlikely to be portable.,
        ["name"] = client:dirty,
        ["error"] = ,
        ["brief"] = checks the read buffer status,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = status,
            ["doc"] = <code>true</code> if there is any data in the read buffer, <code>false</code> otherwise.,
          },
        },
      },
      [48] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Check the read buffer status.
<span class="icon-attention"></span> This is an internal method, any use is unlikely to be portable.,
        ["name"] = server:dirty,
        ["error"] = ,
        ["brief"] = checks the read buffer status,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = status,
            ["doc"] = <code>true</code> if there is any data in the read buffer, <code>false</code> otherwise.,
          },
        },
      },
      [49] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the underlying socket descriptor or handle associated to the object.
<span class="icon-attention"></span> This is an internal method, any use is unlikely to be portable.,
        ["name"] = master:getfd,
        ["error"] = ,
        ["brief"] = gets the socket descriptor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = the descriptor or handle. In case the object has been closed, the return will be -1.,
          },
        },
      },
      [50] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the underlying socket descriptor or handle associated to the object.
<span class="icon-attention"></span> This is an internal method, any use is unlikely to be portable.,
        ["name"] = client:getfd,
        ["error"] = ,
        ["brief"] = gets the socket descriptor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = the descriptor or handle. In case the object has been closed, the return will be -1.,
          },
        },
      },
      [51] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the underlying socket descriptor or handle associated to the object.
<span class="icon-attention"></span> This is an internal method, any use is unlikely to be portable.,
        ["name"] = server:getfd,
        ["error"] = ,
        ["brief"] = gets the socket descriptor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = the descriptor or handle. In case the object has been closed, the return will be -1.,
          },
        },
      },
      [52] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = the descriptor or handle to set.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the underling socket descriptor or handle associated to the object. The current one is simply replaced, not closed, and no other change to the object state is made,
        ["name"] = master:setfd,
        ["error"] = ,
        ["brief"] = sets the socket descriptor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [53] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = the descriptor or handle to set.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the underling socket descriptor or handle associated to the object. The current one is simply replaced, not closed, and no other change to the object state is made,
        ["name"] = client:setfd,
        ["error"] = ,
        ["brief"] = sets the socket descriptor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [54] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = handle,
            ["doc"] = the descriptor or handle to set.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the underling socket descriptor or handle associated to the object. The current one is simply replaced, not closed, and no other change to the object state is made,
        ["name"] = server:setfd,
        ["error"] = ,
        ["brief"] = sets the socket descriptor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [55] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Closes a UDP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.
<span class="icon-attention"></span> It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though.,
        ["name"] = connected:close,
        ["error"] = ,
        ["brief"] = closes the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [56] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Closes a UDP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.
<span class="icon-attention"></span> It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though.,
        ["name"] = unconnected:close,
        ["error"] = ,
        ["brief"] = closes the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [57] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Retrieves information about the peer associated with a connected UDP object.
<span class="icon-attention"></span> It makes no sense to call this method on unconnected objects.,
        ["name"] = connected:getpeername,
        ["error"] = ,
        ["brief"] = gets information about the UDP socket peer,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with the IP address of the peer, the port number that peer is using for the connection, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [58] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the local address information associated to the object.
<span class="icon-attention"></span> UDP sockets are not bound to any address until the <code>setsockname</code> or the <code>sendto</code> method is called for the first time (in which case it is bound to an ephemeral port and the wild-card address).,
        ["name"] = connected:getsockname,
        ["error"] = ,
        ["brief"] = gets the local address information associated to the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with local IP address, a number with the local port, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [59] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the local address information associated to the object.
<span class="icon-attention"></span> UDP sockets are not bound to any address until the <code>setsockname</code> or the <code>sendto</code> method is called for the first time (in which case it is bound to an ephemeral port and the wild-card address).,
        ["name"] = unconnected:getsockname,
        ["error"] = ,
        ["brief"] = gets the local address information associated to the socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = info,
            ["doc"] = a string with local IP address, a number with the local port, and the family ("inet" or "inet6"). In case of error, the method returns <code>nil</code>.,
          },
        },
      },
      [60] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [size],
            ["doc"] = optional maximum size of the datagram to be retrieved. If there are more than size bytes available in the datagram, the excess bytes are discarded. If there are less then size bytes available in the current datagram, the available bytes are returned. If size is omitted, the maximum datagram size is used (which is currently limited by the implementation to 8192 bytes).,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Receives a datagram from the UDP object. If the UDP object is connected, only datagrams coming from the peer are accepted. Otherwise, the returned datagram can come from any host.,
        ["name"] = connected:receive,
        ["error"] = ,
        ["brief"] = receives a datagram from the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = datagram,
            ["doc"] = the received datagram, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [61] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [size],
            ["doc"] = optional maximum size of the datagram to be retrieved. If there are more than size bytes available in the datagram, the excess bytes are discarded. If there are less then size bytes available in the current datagram, the available bytes are returned. If size is omitted, the maximum datagram size is used (which is currently limited by the implementation to 8192 bytes).,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Receives a datagram from the UDP object. If the UDP object is connected, only datagrams coming from the peer are accepted. Otherwise, the returned datagram can come from any host.,
        ["name"] = unconnected:receive,
        ["error"] = ,
        ["brief"] = receives a datagram from the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = datagram,
            ["doc"] = the received datagram, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [62] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [size],
            ["doc"] = optional maximum size of the datagram to be retrieved.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Works exactly as the receive method, except it returns the IP address and port as extra return values (and is therefore slightly less efficient).,
        ["name"] = unconnected:receivefrom,
        ["error"] = ,
        ["brief"] = receives a datagram from the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = datagram,
            ["doc"] = the received datagram, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = ip_or_error,
            ["doc"] = the IP address, or the error message in case of error.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = port,
            ["doc"] = the port number, or <code>nil</code> in case of error.,
          },
        },
      },
      [63] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to get:
<ul>
<li><code>"dontroute"</code></li>
<li><code>"broadcast"</code></li>
<li><code>"reuseaddr"</code></li>
<li><code>"reuseport"</code></li>
<li><code>"ip-multicast-loop"</code></li>
<li><code>"ipv6-v6only"</code></li>
<li><code>"ip-multicast-if"</code></li>
<li><code>"ip-multicast-ttl"</code></li>
<li><code>"ip-add-membership"</code></li>
<li><code>"ip-drop-membership"</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets an option value from the UDP object. See <a href="#connected:setoption">connected:setoption</a> for description of the option names and values.,
        ["name"] = connected:getoption,
        ["error"] = ,
        ["brief"] = gets options for the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = value,
            ["doc"] = the option value, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [64] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to get:
<ul>
<li><code>"dontroute"</code></li>
<li><code>"broadcast"</code></li>
<li><code>"reuseaddr"</code></li>
<li><code>"reuseport"</code></li>
<li><code>"ip-multicast-loop"</code></li>
<li><code>"ipv6-v6only"</code></li>
<li><code>"ip-multicast-if"</code></li>
<li><code>"ip-multicast-ttl"</code></li>
<li><code>"ip-add-membership"</code></li>
<li><code>"ip-drop-membership"</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Gets an option value from the UDP object. See <a href="#unconnected:setoption">unconnected:setoption</a> for description of the option names and values.,
        ["name"] = unconnected:getoption,
        ["error"] = ,
        ["brief"] = gets options for the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = any,
              [2] = nil,
            },
            ["name"] = value,
            ["doc"] = the option value, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [65] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = datagram,
            ["doc"] = a string with the datagram contents. The maximum datagram size for UDP is 64K minus IP layer overhead. However datagrams larger than the link layer packet size will be fragmented, which may deteriorate performance and/or reliability.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sends a datagram to the UDP peer of a connected object.
<span class="icon-attention"></span> In UDP, the send method never blocks and the only way it can fail is if the underlying transport layer refuses to send a message to the specified address (i.e. no interface accepts the address).,
        ["name"] = connected:send,
        ["error"] = ,
        ["brief"] = sends a datagram through the connected UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> on success, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [66] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = datagram,
            ["doc"] = a string with the datagram contents. The maximum datagram size for UDP is 64K minus IP layer overhead. However datagrams larger than the link layer packet size will be fragmented, which may deteriorate performance and/or reliability.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = ip,
            ["doc"] = the IP address of the recipient. Host names are not allowed for performance reasons.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = port,
            ["doc"] = the port number at the recipient.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sends a datagram to the specified IP address and port number.
<span class="icon-attention"></span> In UDP, the send method never blocks and the only way it can fail is if the underlying transport layer refuses to send a message to the specified address (i.e. no interface accepts the address).,
        ["name"] = unconnected:sendto,
        ["error"] = ,
        ["brief"] = sends a datagram through the UDP socket to the specified IP address and port number,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> on success, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [67] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = "*",
            ["doc"] = if address is "*" and the object is connected, the peer association is removed and the object becomes an unconnected object again.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the peer of a UDP object. This method turns an unconnected UDP object into a connected UDP object or vice versa.
For connected objects, outgoing datagrams will be sent to the specified peer, and datagrams received from other peers will be discarded by the OS. Connected UDP objects must use the <code>send</code> and <code>receive</code> methods instead of <code>sendto</code> and <code>receivefrom</code>.
<span class="icon-attention"></span> Since the address of the peer does not have to be passed to and from the OS, the use of connected UDP objects is recommended when the same peer is used for several transmissions and can result in up to 30% performance gains.,
        ["name"] = connected:setpeername,
        ["error"] = ,
        ["brief"] = remove the peer of the connected UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> on success, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [68] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = an IP address or a host name.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = port,
            ["doc"] = the port number.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the peer of a UDP object. This method turns an unconnected UDP object into a connected UDP object or vice versa.
For connected objects, outgoing datagrams will be sent to the specified peer, and datagrams received from other peers will be discarded by the OS. Connected UDP objects must use the <code>send</code> and <code>receive</code> methods instead of <code>sendto</code> and <code>receivefrom</code>.
<span class="icon-attention"></span> Since the address of the peer does not have to be passed to and from the OS, the use of connected UDP objects is recommended when the same peer is used for several transmissions and can result in up to 30% performance gains.,
        ["name"] = unconnected:setpeername,
        ["error"] = ,
        ["brief"] = set the peer of the unconnected UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> on success, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [69] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = address,
            ["doc"] = an IP address or a host name. If address is "*" the system binds to all local interfaces using the constant <code>INADDR_ANY</code>.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = port,
            ["doc"] = the port number. If port is 0, the system chooses an ephemeral port.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Binds the UDP object to a local address.
<span class="icon-attention"></span> This method can only be called before any datagram is sent through the UDP object, and only once. Otherwise, the system automatically binds the object to all local interfaces and chooses an ephemeral port as soon as the first datagram is sent. After the local address is set, either automatically by the system or explicitly by <code>setsockname</code>, it cannot be changed.,
        ["name"] = unconnected:setsockname,
        ["error"] = ,
        ["brief"] = binds the UDP socket to a local address,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = success,
            ["doc"] = the value <code>1</code> on success, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [70] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to set. The value is provided in the <code>value</code> parameter:
<dl>
<dt><code>"dontroute"</code></dt>
<dd>Indicates that outgoing messages should bypass the standard routing facilities. Receives a boolean value;</dd>
<dt><code>"broadcast"</code></dt>
<dd>Requests permission to send broadcast datagrams on the socket. Receives a boolean value;</dd>
<dt><code>"reuseaddr"</code></dt>
<dd>Indicates that the rules used in validating addresses supplied in a <code>bind</code> call should allow reuse of local addresses. Receives a boolean value;</dd>
<dt><code>"reuseport"</code></dt>
<dd>Allows completely duplicate bindings by multiple processes if they all set <code>"reuseport"</code> before binding the port. Receives a boolean value;</dd>
<dt><code>"ip-multicast-loop"</code></dt>
<dd>Specifies whether or not a copy of an outgoing multicast datagram is delivered to the sending host as long as it is a member of the multicast group. Receives a boolean value;</dd>
<dt><code>"ipv6-v6only"</code></dt>
<dd>Specifies whether to restrict inet6 sockets to sending and receiving only IPv6 packets. Receive a boolean value;</dd>
<dt><code>"ip-multicast-if"</code></dt>
<dd>Sets the interface over which outgoing multicast datagrams are sent. Receives an IP address;</dd>
<dt><code>"ip-multicast-ttl"</code></dt>
<dd>Sets the Time To Live in the IP header for outgoing multicast datagrams. Receives a number;</dd>
</dl>
<code>"ip-add-membership"</code>: Joins the multicast group specified. Receives a table with fields:
<ul>
<li><span class="type">string</span> <code>multiaddr</code> (IP address)</li>
<li><span class="type">string</span> <code>interface</code> (IP address)</li>
</ul>
<dl>
<dt>"'ip-drop-membership"`</dt>
<dd>Leaves the multicast group specified. Receives a table with fields:</dd>
</dl>
<ul>
<li><span class="type">string</span> <code>multiaddr</code> (IP address)</li>
<li><span class="type">string</span> <code>interface</code> (IP address)</li>
</ul>,
          },
          [2] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [value],
            ["doc"] = the value to set for the specified option.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets options for the UDP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.,
        ["name"] = connected:setoption,
        ["error"] = ,
        ["brief"] = sets options for the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [71] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = option,
            ["doc"] = the name of the option to set. The value is provided in the <code>value</code> parameter:
<dl>
<dt><code>"dontroute"</code></dt>
<dd>Indicates that outgoing messages should bypass the standard routing facilities. Receives a boolean value;</dd>
<dt><code>"broadcast"</code></dt>
<dd>Requests permission to send broadcast datagrams on the socket. Receives a boolean value;</dd>
<dt><code>"reuseaddr"</code></dt>
<dd>Indicates that the rules used in validating addresses supplied in a <code>bind</code> call should allow reuse of local addresses. Receives a boolean value;</dd>
<dt><code>"reuseport"</code></dt>
<dd>Allows completely duplicate bindings by multiple processes if they all set <code>"reuseport"</code> before binding the port. Receives a boolean value;</dd>
<dt><code>"ip-multicast-loop"</code></dt>
<dd>Specifies whether or not a copy of an outgoing multicast datagram is delivered to the sending host as long as it is a member of the multicast group. Receives a boolean value;</dd>
<dt><code>"ipv6-v6only"</code></dt>
<dd>Specifies whether to restrict inet6 sockets to sending and receiving only IPv6 packets. Receive a boolean value;</dd>
<dt><code>"ip-multicast-if"</code></dt>
<dd>Sets the interface over which outgoing multicast datagrams are sent. Receives an IP address;</dd>
<dt><code>"ip-multicast-ttl"</code></dt>
<dd>Sets the Time To Live in the IP header for outgoing multicast datagrams. Receives a number;</dd>
</dl>
<code>"ip-add-membership"</code>: Joins the multicast group specified. Receives a table with fields:
<ul>
<li><span class="type">string</span> <code>multiaddr</code> (IP address)</li>
<li><span class="type">string</span> <code>interface</code> (IP address)</li>
</ul>
<dl>
<dt>"'ip-drop-membership"`</dt>
<dd>Leaves the multicast group specified. Receives a table with fields:</dd>
</dl>
<ul>
<li><span class="type">string</span> <code>multiaddr</code> (IP address)</li>
<li><span class="type">string</span> <code>interface</code> (IP address)</li>
</ul>,
          },
          [2] = {
            ["types"] = {
              [1] = any,
            },
            ["name"] = [value],
            ["doc"] = the value to set for the specified option.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets options for the UDP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.,
        ["name"] = unconnected:setoption,
        ["error"] = ,
        ["brief"] = sets options for the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
              [2] = nil,
            },
            ["name"] = status,
            ["doc"] = the value <code>1</code>, or <code>nil</code> in case of error.,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred.,
          },
        },
      },
      [72] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = value,
            ["doc"] = the amount of time to wait, in seconds. The <code>nil</code> timeout value allows operations to block indefinitely. Negative timeout values have the same effect.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the timeout values for the object. By default, the <code>receive</code> and <code>receivefrom</code>  operations are blocking. That is, any call to the methods will block indefinitely, until data arrives. The <code>settimeout</code> function defines a limit on the amount of time the functions can block. When a timeout is set and the specified amount of time has elapsed, the affected methods give up and fail with an error code.
<span class="icon-attention"></span> In UDP, the <code>send</code> and <code>sendto</code> methods never block (the datagram is just passed to the OS and the call returns immediately). Therefore, the <code>settimeout</code> method has no effect on them.,
        ["name"] = connected:settimeout,
        ["error"] = ,
        ["brief"] = sets the timeout value for the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [73] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = value,
            ["doc"] = the amount of time to wait, in seconds. The <code>nil</code> timeout value allows operations to block indefinitely. Negative timeout values have the same effect.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Changes the timeout values for the object. By default, the <code>receive</code> and <code>receivefrom</code>  operations are blocking. That is, any call to the methods will block indefinitely, until data arrives. The <code>settimeout</code> function defines a limit on the amount of time the functions can block. When a timeout is set and the specified amount of time has elapsed, the affected methods give up and fail with an error code.
<span class="icon-attention"></span> In UDP, the <code>send</code> and <code>sendto</code> methods never block (the datagram is just passed to the OS and the call returns immediately). Therefore, the <code>settimeout</code> method has no effect on them.,
        ["name"] = unconnected:settimeout,
        ["error"] = ,
        ["brief"] = sets the timeout value for the UDP socket,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = LUA STANDARD LIBS,
      ["description"] = <a href="https://github.com/diegonehab/luasocket">LuaSocket</a> is a Lua extension library that provides
support for the TCP and UDP transport layers. Defold provides the "socket" namespace in
runtime, which contain the core C functionality. Additional LuaSocket support modules for
SMTP, HTTP, FTP etc are not part of the core included, but can be easily added to a project
and used.
Note the included helper module "socket.lua" in "builtins/scripts/socket.lua". Require this
module to add some additional functions and shortcuts to the namespace:
<div class="codehilite"><pre><span></span><code><span class="nb">require</span> <span class="s2">&quot;builtins.scripts.socket&quot;</span>
</code></pre></div>

LuaSocket is Copyright &copy; 2004-2007 Diego Nehab. All rights reserved.
LuaSocket is free software, released under the MIT license (same license as the Lua core).,
      ["name"] = LuaSocket,
      ["notes"] = {},
      ["namespace"] = socket,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = LuaSocket API documentation,
    },
  },
  [28] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The gain on the sound-component. Note that gain is in linear scale,
between 0 and 1.,
        ["name"] = gain,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> sound gain,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">gain</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;gain&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;gain&quot;</span><span class="p">,</span> <span class="n">gain</span> <span class="o">*</span> <span class="mf">1.5</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The pan on the sound-component. The valid range is from -1.0 to 1.0,
representing -45 degrees left, to +45 degrees right.,
        ["name"] = pan,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> sound pan,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">pan</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;pan&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;pan&quot;</span><span class="p">,</span> <span class="n">pan</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The speed on the sound-component where 1.0 is normal speed, 0.5 is half
speed and 2.0 is double speed.,
        ["name"] = speed,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> sound speed,
        ["type"] = PROPERTY,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;speed&quot;</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;speed&quot;</span><span class="p">,</span> <span class="n">speed</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The sound data used when playing the sound. The type of the property is hash.,
        ["name"] = sound,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> sound data,
        ["type"] = PROPERTY,
        ["examples"] = How to change the sound:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- load a wav file bundled as a custom resource</span>
  <span class="kd">local</span> <span class="n">wav</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_resource</span><span class="p">(</span><span class="s2">&quot;foo.wav&quot;</span><span class="p">)</span>
  <span class="c1">-- get resource path to the sound component</span>
  <span class="kd">local</span> <span class="n">resource_path</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;sound&quot;</span><span class="p">)</span>
  <span class="c1">-- update the resource with the loaded wav file</span>
  <span class="n">resource</span><span class="p">.</span><span class="n">set_sound</span><span class="p">(</span><span class="n">resource_path</span><span class="p">,</span> <span class="n">wav</span><span class="p">)</span>
  <span class="c1">-- play the updated sound</span>
  <span class="n">sound</span><span class="p">.</span><span class="n">play</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Checks if background music is playing, e.g. from iTunes.
<span class="icon-macos"></span><span class="icon-windows"></span><span class="icon-linux"></span><span class="icon-html5"></span> On non mobile platforms,
this function always return <code>false</code>.
<span class="icon-attention"></span><span class="icon-android"></span> On Android you can only get a correct reading
of this state if your game is not playing any sounds itself. This is a limitation
in the Android SDK. If your game is playing any sounds, <em>even with a gain of zero</em>, this
function will return <code>false</code>.
The best time to call this function is:
<ul>
<li>In the <code>init</code> function of your main collection script before any sounds are triggered</li>
<li>In a window listener callback when the window.WINDOW_EVENT_FOCUS_GAINED event is received</li>
</ul>
Both those times will give you a correct reading of the state even when your application is
swapped out and in while playing sounds and it works equally well on Android and iOS.,
        ["name"] = sound.is_music_playing,
        ["error"] = ,
        ["brief"] = check if background music is playing,
        ["type"] = FUNCTION,
        ["examples"] = If music is playing, mute "master":
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">sound</span><span class="p">.</span><span class="n">is_music_playing</span><span class="p">()</span> <span class="kr">then</span>
    <span class="c1">-- mute &quot;master&quot;</span>
    <span class="n">sound</span><span class="p">.</span><span class="n">set_group_gain</span><span class="p">(</span><span class="s2">&quot;master&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = playing,
            ["doc"] = <code>true</code> if music is playing, otherwise <code>false</code>.,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = group,
            ["doc"] = group name,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = window,
            ["doc"] = window length in seconds,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get RMS (Root Mean Square) value from mixer group. This value is the
square root of the mean (average) value of the squared function of
the instantaneous values.
For instance: for a sinewave signal with a peak gain of -1.94 dB (0.8 linear),
the RMS is <code>0.8 &times; 1/sqrt(2)</code> which is about 0.566.
<span class="icon-attention"></span> Note the returned value might be an approximation and in particular
the effective window might be larger than specified.,
        ["name"] = sound.get_rms,
        ["error"] = ,
        ["brief"] = get RMS value from mixer group,
        ["type"] = FUNCTION,
        ["examples"] = Get the RMS from the "master" group where a mono -1.94 dB sinewave is playing:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">rms</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">get_rms</span><span class="p">(</span><span class="s2">&quot;master&quot;</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span> <span class="c1">-- throw away right channel.</span>
<span class="nb">print</span><span class="p">(</span><span class="n">rms</span><span class="p">)</span> <span class="c1">--&gt; 0.56555819511414</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = rms_l,
            ["doc"] = RMS value for left channel,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = rms_r,
            ["doc"] = RMS value for right channel,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = group,
            ["doc"] = group name,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = window,
            ["doc"] = window length in seconds,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get peak value from mixer group.
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.
Also note that the returned value might be an approximation and in particular
the effective window might be larger than specified.,
        ["name"] = sound.get_peak,
        ["error"] = ,
        ["brief"] = get peak gain value from mixer group,
        ["type"] = FUNCTION,
        ["examples"] = Get the peak gain from the "master" group and convert to dB for displaying:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">left_p</span><span class="p">,</span> <span class="n">right_p</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">get_peak</span><span class="p">(</span><span class="s2">&quot;master&quot;</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="n">left_p_db</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="n">log</span><span class="p">(</span><span class="n">left_p</span><span class="p">)</span>
<span class="n">right_p_db</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="n">log</span><span class="p">(</span><span class="n">right_p</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = peak_l,
            ["doc"] = peak value for left channel,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = peak_r,
            ["doc"] = peak value for right channel,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = group,
            ["doc"] = group name,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = gain,
            ["doc"] = gain in linear scale,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set mixer group gain
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.,
        ["name"] = sound.set_group_gain,
        ["error"] = ,
        ["brief"] = set mixer group gain,
        ["type"] = FUNCTION,
        ["examples"] = Set mixer group gain on the "soundfx" group to -4 dB:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">gain_db</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span>
<span class="kd">local</span> <span class="n">gain</span> <span class="o">=</span> <span class="mi">10</span><span class="o">^</span><span class="n">gain_db</span><span class="o">/</span><span class="mi">20</span> <span class="c1">-- 0.63095734448019</span>
<span class="n">sound</span><span class="p">.</span><span class="n">set_group_gain</span><span class="p">(</span><span class="s2">&quot;soundfx&quot;</span><span class="p">,</span> <span class="n">gain</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = group,
            ["doc"] = group name,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get mixer group gain
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.,
        ["name"] = sound.get_group_gain,
        ["error"] = ,
        ["brief"] = get mixer group gain,
        ["type"] = FUNCTION,
        ["examples"] = Get the mixer group gain for the "soundfx" and convert to dB:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">gain</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">get_group_gain</span><span class="p">(</span><span class="s2">&quot;soundfx&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">gain_db</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="n">log</span><span class="p">(</span><span class="n">gain</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = gain,
            ["doc"] = gain in linear scale,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a table of all mixer group names (hashes).,
        ["name"] = sound.get_groups,
        ["error"] = ,
        ["brief"] = get all mixer group names,
        ["type"] = FUNCTION,
        ["examples"] = Get the mixer groups, set all gains to 0 except for "master" and "soundfx"
where gain is set to 1:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">get_groups</span><span class="p">()</span>
<span class="kr">for</span> <span class="n">_</span><span class="p">,</span><span class="n">group</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">groups</span><span class="p">)</span> <span class="kr">do</span>
    <span class="kr">if</span> <span class="n">group</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;master&quot;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">group</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;soundfx&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="n">sound</span><span class="p">.</span><span class="n">set_group_gain</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="kr">else</span>
        <span class="n">sound</span><span class="p">.</span><span class="n">set_group_gain</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = groups,
            ["doc"] = table of mixer group names,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = group,
            ["doc"] = group name,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get a mixer group name as a string.
<span class="icon-attention"></span> This function is to be used for debugging and
development tooling only. The function does a reverse hash lookup, which does not
return a proper string value when the game is built in release mode.,
        ["name"] = sound.get_group_name,
        ["error"] = ,
        ["brief"] = get mixer group name string,
        ["type"] = FUNCTION,
        ["examples"] = Get the mixer group string names so we can show them as labels on a dev mixer overlay:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">get_groups</span><span class="p">()</span>
<span class="kr">for</span> <span class="n">_</span><span class="p">,</span><span class="n">group</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">groups</span><span class="p">)</span> <span class="kr">do</span>
    <span class="kd">local</span> <span class="n">name</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">get_group_name</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;/mixer_overlay#gui&quot;</span><span class="p">,</span> <span class="s2">&quot;set_mixer_label&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">group</span> <span class="o">=</span> <span class="n">group</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="n">name</span><span class="p">})</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = name,
            ["doc"] = group name,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Checks if a phone call is active. If there is an active phone call all
other sounds will be muted until the phone call is finished.
<span class="icon-macos"></span><span class="icon-windows"></span><span class="icon-linux"></span><span class="icon-html5"></span> On non mobile platforms,
this function always return <code>false</code>.,
        ["name"] = sound.is_phone_call_active,
        ["error"] = ,
        ["brief"] = check if a phone call is active,
        ["type"] = FUNCTION,
        ["examples"] = Test if a phone call is on-going:
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">sound</span><span class="p">.</span><span class="n">is_phone_call_active</span><span class="p">()</span> <span class="kr">then</span>
    <span class="c1">-- do something sensible.</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = call_active,
            ["doc"] = <code>true</code> if there is an active phone call, <code>false</code> otherwise.,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sound that should play,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [play_properties],
            ["doc"] = <dl>
<dt>optional table with properties:</dt>
<dt><code>delay</code></dt>
<dd><span class="type">number</span> delay in seconds before the sound starts playing, default is 0.</dd>
<dt><code>gain</code></dt>
<dd><span class="type">number</span> sound gain between 0 and 1, default is 1. The final gain of the sound will be a combination of this gain, the group gain and the master gain.</dd>
<dt><code>pan</code></dt>
<dd><span class="type">number</span> sound pan between -1 and 1, default is 0. The final pan of the sound will be an addition of this pan and the sound pan.</dd>
<dt><code>speed</code></dt>
<dd><span class="type">number</span> sound speed where 1.0 is normal speed, 0.5 is half speed and 2.0 is double speed. The final speed of the sound will be a multiplication of this speed and the sound speed.</dd>
</dl>,
          },
          [3] = {
            ["types"] = {
              [1] = function(self, message_id, message, sender),
            },
            ["name"] = [complete_function],
            ["doc"] = function to call when the sound has finished playing or stopped manually via <a href="/ref/sound#sound.stop">sound.stop</a>.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>message_id</code></dt>
<dd><span class="type">hash</span> The name of the completion message, which can be either <code>"sound_done"</code> if the sound has finished playing, or <code>"sound_stopped"</code> if it was stopped manually.</dd>
<dt><code>message</code></dt>
<dd><span class="type">table</span> Information about the completion:</dd>
</dl>
<ul>
<li><span class="type">number</span> <code>play_id</code> - the sequential play identifier that was given by the sound.play function.</li>
</ul>
<dl>
<dt><code>sender</code></dt>
<dd><span class="type">url</span> The invoker of the callback: the sound component.</dd>
</dl>,
          },
        },
        ["notes"] = {
          [1] = Sounds are panned using a constant power panning (non linear fade). 0 means left/right channels are balanced at 71%/71% each.
At -1 (full left) the channels are at 100%/0%, and 1 they're at 0%/100%.,
        },
        ["tparams"] = {},
        ["description"] = Make the sound component play its sound. Multiple voices are supported. The limit is set to 32 voices per sound component.
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.
<span class="icon-attention"></span> A sound will continue to play even if the game object the sound component belonged to is deleted. You can call <code>sound.stop()</code> to stop the sound.,
        ["name"] = sound.play,
        ["error"] = ,
        ["brief"] = plays a sound,
        ["type"] = FUNCTION,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will make the component play its sound after 1 second:
<div class="codehilite"><pre><span></span><code><span class="n">sound</span><span class="p">.</span><span class="n">play</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">delay</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gain</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">pan</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>

Using the callback argument, you can chain several sounds together:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">sound_done</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
  <span class="c1">-- play &#39;boom&#39; sound fx when the countdown has completed</span>
  <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;sound_done&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">message</span><span class="p">.</span><span class="n">play_id</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">countdown_id</span> <span class="kr">then</span>
    <span class="n">sound</span><span class="p">.</span><span class="n">play</span><span class="p">(</span><span class="s2">&quot;#boom&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">sound_done</span><span class="p">)</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">countdown_id</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">play</span><span class="p">(</span><span class="s2">&quot;#countdown&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">sound_done</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = play_id,
            ["doc"] = The identifier for the sound voice,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sound component that should stop,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [stop_properties],
            ["doc"] = <dl>
<dt>optional table with properties:</dt>
<dt><code>play_id</code></dt>
<dd><span class="type">number</span> the sequential play identifier that should be stopped (was given by the sound.play() function)</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Stop playing all active voices or just one voice if <code>play_id</code> provided,
        ["name"] = sound.stop,
        ["error"] = ,
        ["brief"] = stop a playing a sound(s),
        ["type"] = FUNCTION,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will make the component stop all playing voices:
<div class="codehilite"><pre><span></span><code><span class="n">sound</span><span class="p">.</span><span class="n">stop</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">sound</span><span class="p">.</span><span class="n">play</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">)</span>
<span class="n">sound</span><span class="p">.</span><span class="n">stop</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">play_id</span> <span class="o">=</span> <span class="n">id</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sound that should pause,
          },
          [2] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = pause,
            ["doc"] = true if the sound should pause,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Pause all active voices,
        ["name"] = sound.pause,
        ["error"] = ,
        ["brief"] = pause a playing a sound(s),
        ["type"] = FUNCTION,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will make the component pause all playing voices:
<div class="codehilite"><pre><span></span><code><span class="n">sound</span><span class="p">.</span><span class="n">pause</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sound to set the gain of,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [gain],
            ["doc"] = sound gain between 0 and 1. The final gain of the sound will be a combination of this gain, the group gain and the master gain.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set gain on all active playing voices of a sound.
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.,
        ["name"] = sound.set_gain,
        ["error"] = ,
        ["brief"] = set sound gain,
        ["type"] = FUNCTION,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will set the gain to 0.5
<div class="codehilite"><pre><span></span><code><span class="n">sound</span><span class="p">.</span><span class="n">set_gain</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sound to set the panning value to,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [pan],
            ["doc"] = sound panning between -1.0 and 1.0,
          },
        },
        ["notes"] = {
          [1] = Sounds are panned using a constant power panning (non linear fade). 0 means left/right channels are balanced at 71%/71% each.
At -1 (full left) the channels are at 100%/0%, and 1 they're at 0%/100%.,
        },
        ["tparams"] = {},
        ["description"] = Set panning on all active playing voices of a sound.
The valid range is from -1.0 to 1.0, representing -45 degrees left, to +45 degrees right.,
        ["name"] = sound.set_pan,
        ["error"] = ,
        ["brief"] = set sound pan,
        ["type"] = FUNCTION,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will set the gain to 0.5
<div class="codehilite"><pre><span></span><code><span class="n">sound</span><span class="p">.</span><span class="n">set_pan</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span> <span class="c1">-- pan to the right</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [delay],
            ["doc"] = delay in seconds before the sound starts playing, default is 0.,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [gain],
            ["doc"] = sound gain between 0 and 1, default is 1.,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [play_id],
            ["doc"] = the identifier of the sound, can be used to distinguish between consecutive plays from the same component.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a sound-component to make it play its sound. Multiple voices is supported. The limit is set to 32 voices per sound component.
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.
<span class="icon-attention"></span> A sound will continue to play even if the game object the sound component belonged to is deleted. You can send a <code>stop_sound</code> to stop the sound.
<span class="icon-attention"></span> <code>play_id</code> should be specified in case you want to receive <code>sound_done</code> or <code>sound_stopped</code> in <code>on_message()</code>.,
        ["name"] = play_sound,
        ["error"] = ,
        ["brief"] = plays a sound,
        ["type"] = MESSAGE,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will make the component play its sound after 1 second:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;play_sound&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">delay</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gain</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">})</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="c1">-- use `play_id` and `msg.post()` if you want to recieve `sound_done` or `sound_stopped` in on_message()</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">()</span>
 <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;play_sound&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">play_id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">delay</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gain</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">})</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
 <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;sound_done&quot;</span><span class="p">)</span> <span class="kr">then</span>
     <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Sound play id: &quot;</span><span class="o">..</span><span class="n">message</span><span class="p">.</span><span class="n">play_id</span><span class="p">)</span>
 <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a sound-component to make it stop playing all active voices,
        ["name"] = stop_sound,
        ["error"] = ,
        ["brief"] = stop a playing a sound(s),
        ["type"] = MESSAGE,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will make the component stop all playing voices:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;stop_sound&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [gain],
            ["doc"] = sound gain between 0 and 1, default is 1.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a sound-component to set gain on all active playing voices.
<span class="icon-attention"></span> Note that gain is in linear scale, between 0 and 1.
To get the dB value from the gain, use the formula <code>20 * log(gain)</code>.
Inversely, to find the linear value from a dB value, use the formula
<code>10<sup>db/20</sup></code>.,
        ["name"] = set_gain,
        ["error"] = ,
        ["brief"] = set sound gain,
        ["type"] = MESSAGE,
        ["examples"] = Assuming the script belongs to an instance with a sound-component with id "sound", this will set the gain to 0.5
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sound&quot;</span><span class="p">,</span> <span class="s2">&quot;set_gain&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">gain</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [play_id],
            ["doc"] = id number supplied when the message was posted.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent back to the sender of a <code>play_sound</code> message
if the sound could be played to completion and a <code>play_id</code> was provided with the <code>play_sound</code> message.,
        ["name"] = sound_done,
        ["error"] = ,
        ["brief"] = reports when a sound has finished playing,
        ["type"] = MESSAGE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [play_id],
            ["doc"] = id number supplied when the message was posted.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent back to the sender of a <code>play_sound</code> message, if the sound
has been manually stopped and a <code>play_id</code> was provided with the <code>play_sound</code> message.,
        ["name"] = sound_stopped,
        ["error"] = ,
        ["brief"] = reports when a sound has been manually stopped,
        ["type"] = MESSAGE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Sound API documentation,
      ["name"] = Sound,
      ["notes"] = {},
      ["namespace"] = sound,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Sound API documentation,
    },
  },
  [29] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The size of the sprite, not allowing for any additional scaling that may be applied.
The type of the property is vector3. It is not possible to set the size if the size mode
of the sprite is set to auto.,
        ["name"] = size,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> sprite size,
        ["type"] = PROPERTY,
        ["examples"] = How to query a sprite's size, either as a vector or selecting a specific dimension:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- get size from component &quot;sprite&quot;</span>
  <span class="kd">local</span> <span class="n">size</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;size&quot;</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">sx</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;size.x&quot;</span><span class="p">)</span>
  <span class="c1">-- do something useful</span>
  <span class="nb">assert</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">sx</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The slice values of the sprite. The type of the property is a vector4 that corresponds to
the left, top, right, bottom values of the sprite in the editor.
It is not possible to set the slice property if the size mode of the sprite is set to auto.,
        ["name"] = slice,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> sprite slice,
        ["type"] = PROPERTY,
        ["examples"] = How to query a sprite's slice values, either as a vector or selecting a specific dimension:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">slice</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;slice&quot;</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">slicex</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;slice.x&quot;</span><span class="p">)</span>
  <span class="nb">assert</span><span class="p">(</span><span class="n">slice</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">slicex</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

Animate the slice property with go.animate:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- animate the entire slice vector at once</span>
  <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;slice&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">96</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">96</span><span class="p">),</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INCUBIC</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
  <span class="c1">-- or animate a single component</span>
  <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;slice.y&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_PINGPONG</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_INCUBIC</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The non-uniform scale of the sprite. The type of the property is vector3.,
        ["name"] = scale,
        ["error"] = ,
        ["brief"] = <span class="type">vector3</span> sprite scale,
        ["type"] = PROPERTY,
        ["examples"] = How to scale a sprite independently along the X and Y axis:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Double the y-axis scaling on component &quot;sprite&quot;</span>
     <span class="kd">local</span> <span class="n">yscale</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;scale.y&quot;</span><span class="p">)</span>
     <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;scale.y&quot;</span><span class="p">,</span> <span class="n">yscale</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The image used when rendering the sprite. The type of the property is hash.,
        ["name"] = image,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> sprite image,
        ["type"] = PROPERTY,
        ["examples"] = How to set image using a script property (see <a href="/ref/resource#resource.atlas">resource.atlas</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_image&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">atlas</span><span class="p">(</span><span class="s2">&quot;/atlas.atlas&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;image&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_image</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

See <a href="/ref/resource#resource.set_texture">resource.set_texture</a> for an example on how to set the texture of an atlas.,
        ["returnvalues"] = {},
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The material used when rendering the sprite. The type of the property is hash.,
        ["name"] = material,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> sprite material,
        ["type"] = PROPERTY,
        ["examples"] = How to set material using a script property (see <a href="/ref/resource#resource.material">resource.material</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/material.material&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;material&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The normalized animation cursor. The type of the property is number.,
        ["name"] = cursor,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> sprite cursor,
        ["type"] = PROPERTY,
        ["examples"] = How to get the normalized cursor value:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the cursor value on component &quot;sprite&quot;</span>
  <span class="n">cursor</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;cursor&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

How to animate the cursor from 0.0 to 1.0 using linear easing for 2.0 seconds:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the current value on component &quot;sprite&quot;</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;cursor&quot;</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
  <span class="c1">-- Animate the cursor value</span>
  <span class="n">go</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;cursor&quot;</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">PLAYBACK_LOOP_FORWARD</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">go</span><span class="p">.</span><span class="n">EASING_LINEAR</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The animation playback rate. A multiplier to the animation playback rate. The type of the property is <span class="type">number</span>.
The playback_rate is a non-negative number, a negative value will be clamped to 0.,
        ["name"] = playback_rate,
        ["error"] = ,
        ["brief"] = <span class="type">number</span> sprite playback_rate,
        ["type"] = PROPERTY,
        ["examples"] = How to set the playback_rate on component "sprite" to play at double the current speed:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- Get the current value on component &quot;sprite&quot;</span>
  <span class="n">playback_rate</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;playback_rate&quot;</span><span class="p">)</span>
  <span class="c1">-- Set the playback_rate to double the previous value.</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;playback_rate&quot;</span><span class="p">,</span> <span class="n">playback_rate</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="mark">READ ONLY</span> The current animation id. An animation that plays currently for the sprite. The type of the property is <span class="type">hash</span>.,
        ["name"] = animation,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> sprite animation,
        ["type"] = PROPERTY,
        ["examples"] = How to get the <code>animation</code> on component "sprite":
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;animation&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="mark">READ ONLY</span> The frame count of the currently playing animation.,
        ["name"] = frame_count,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> sprite frame_count,
        ["type"] = PROPERTY,
        ["examples"] = How to get the <code>frame_count</code> on component "sprite":
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">frame_count</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;frame_count&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sprite that should flip its animations,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flip,
            ["doc"] = <code>true</code> if the sprite should flip its animations, <code>false</code> if not,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets horizontal flipping of the provided sprite's animations.
The sprite is identified by its URL.
If the currently playing animation is flipped by default, flipping it again will make it appear like the original texture.,
        ["name"] = sprite.set_hflip,
        ["error"] = ,
        ["brief"] = set horizontal flipping on a sprite's animations,
        ["type"] = FUNCTION,
        ["examples"] = How to flip a sprite so it faces the horizontal movement:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
  <span class="c1">-- calculate self.velocity somehow</span>
  <span class="n">sprite</span><span class="p">.</span><span class="n">set_hflip</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

It is assumed that the sprite component has id "sprite" and that the original animations faces right.,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sprite that should flip its animations,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flip,
            ["doc"] = <code>true</code> if the sprite should flip its animations, <code>false</code> if not,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets vertical flipping of the provided sprite's animations.
The sprite is identified by its URL.
If the currently playing animation is flipped by default, flipping it again will make it appear like the original texture.,
        ["name"] = sprite.set_vflip,
        ["error"] = ,
        ["brief"] = set vertical flipping on a sprite's animations,
        ["type"] = FUNCTION,
        ["examples"] = How to flip a sprite in a game which negates gravity as a game mechanic:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
  <span class="c1">-- calculate self.up_side_down somehow, then:</span>
  <span class="n">sprite</span><span class="p">.</span><span class="n">set_vflip</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">up_side_down</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>

It is assumed that the sprite component has id "sprite" and that the original animations are up-right.,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the sprite that should play the animation,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = id,
            ["doc"] = hashed id of the animation to play,
          },
          [3] = {
            ["types"] = {
              [1] = function(self, message_id, message, sender),
            },
            ["name"] = [complete_function],
            ["doc"] = function to call when the animation has completed.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object.</dd>
<dt><code>message_id</code></dt>
<dd><span class="type">hash</span> The name of the completion message, <code>"animation_done"</code>.</dd>
<dt><code>message</code></dt>
<dd><span class="type">table</span> Information about the completion:</dd>
</dl>
<ul>
<li><span class="type">number</span> <code>current_tile</code> - the current tile of the sprite.</li>
<li><span class="type">hash</span> <code>id</code> - id of the animation that was completed.</li>
</ul>
<dl>
<dt><code>sender</code></dt>
<dd><span class="type">url</span> The invoker of the callback: the sprite component.</dd>
</dl>,
          },
          [4] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [play_properties],
            ["doc"] = optional table with properties:
<dl>
<dt><code>offset</code></dt>
<dd><span class="type">number</span> the normalized initial value of the animation cursor when the animation starts playing.</dd>
<dt><code>playback_rate</code></dt>
<dd><span class="type">number</span> the rate with which the animation will be played. Must be positive.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Play an animation on a sprite component from its tile set
An optional completion callback function can be provided that will be called when
the animation has completed playing. If no function is provided,
a <a href="#animation_done">animation_done</a> message is sent to the script that started the animation.,
        ["name"] = sprite.play_flipbook,
        ["error"] = ,
        ["brief"] = Play an animation on a sprite component,
        ["type"] = FUNCTION,
        ["examples"] = The following examples assumes that the model has id "sprite".
How to play the "jump" animation followed by the "run" animation:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">anim_done</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;animation_done&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">if</span> <span class="n">message</span><span class="p">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;jump&quot;</span><span class="p">)</span> <span class="kr">then</span>
      <span class="c1">-- jump animation done, chain with &quot;run&quot;</span>
      <span class="n">sprite</span><span class="p">.</span><span class="n">play_flipbook</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">&quot;run&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
  <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">url</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">url</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">)</span>
  <span class="n">sprite</span><span class="p">.</span><span class="n">play_flipbook</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">&quot;jump&quot;</span><span class="p">,</span> <span class="n">anim_done</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = the id of the animation to play,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Post this message to a sprite component to make it play an animation from its tile set.,
        ["name"] = play_animation,
        ["error"] = ,
        ["brief"] = play a sprite animation,
        ["type"] = MESSAGE,
        ["examples"] = In the example, it is assumed that the instance of the script has a sprite-component with id "sprite". The sprite itself is assumed to be bound to a tile set with animations "walk" and "jump".
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;play_animation&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">id</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;jump&quot;</span><span class="p">)})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = current_tile,
            ["doc"] = the current tile of the sprite,
          },
          [2] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = id,
            ["doc"] = id of the animation that was completed,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This message is sent to the sender of a <code>play_animation</code> message when the
animation has completed.
Note that this message is sent only for animations that play with the following
playback modes:
<ul>
<li>Once Forward</li>
<li>Once Backward</li>
<li>Once Ping Pong</li>
</ul>
See <a href="#play_animation">play_animation</a> for more information and examples of how to use
this message.,
        ["name"] = animation_done,
        ["error"] = ,
        ["brief"] = reports that an animation has completed,
        ["type"] = MESSAGE,
        ["examples"] = How to sequence two animations together.
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="c1">-- play jump animation at init</span>
  <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;play_animation&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">id</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;jump&quot;</span><span class="p">)})</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
  <span class="c1">-- check for animation done response</span>
  <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;animation_done&quot;</span><span class="p">)</span> <span class="kr">then</span>
    <span class="c1">-- start the walk animation</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;#sprite&quot;</span><span class="p">,</span> <span class="s2">&quot;play_animation&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">id</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;walk&quot;</span><span class="p">)</span> <span class="p">})</span>
  <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Sprite API documentation,
      ["name"] = Sprite,
      ["notes"] = {},
      ["namespace"] = sprite,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Sprite API documentation,
    },
  },
  [30] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = filename,
            ["doc"] = file to write to,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = lua table to save,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The table can later be loaded by <code>sys.load</code>.
Use <code>sys.get_save_file</code> to obtain a valid location for the file.
Internally, this function uses a workspace buffer sized output file sized 512kb.
This size reflects the output file size which must not exceed this limit.
Additionally, the total number of rows that any one table may contain is limited to 65536
(i.e. a 16 bit range). When tables are used to represent arrays, the values of
keys are permitted to fall within a 32 bit range, supporting sparse arrays, however
the limit on the total number of rows remains in effect.,
        ["name"] = sys.save,
        ["error"] = ,
        ["brief"] = saves a lua table to a file stored on disk,
        ["type"] = FUNCTION,
        ["examples"] = Save data:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_table</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nb">table.insert</span><span class="p">(</span><span class="n">my_table</span><span class="p">,</span> <span class="s2">&quot;my_value&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">my_file_path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_save_file</span><span class="p">(</span><span class="s2">&quot;my_game&quot;</span><span class="p">,</span> <span class="s2">&quot;my_file&quot;</span><span class="p">)</span>
<span class="kr">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">my_file_path</span><span class="p">,</span> <span class="n">my_table</span><span class="p">)</span> <span class="kr">then</span>
  <span class="c1">-- Alert user that the data could not be saved</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = success,
            ["doc"] = a boolean indicating if the table could be saved or not,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = filename,
            ["doc"] = file to read from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = If the file exists, it must have been created by <code>sys.save</code> to be loaded.,
        ["name"] = sys.load,
        ["error"] = ,
        ["brief"] = loads a lua table from a file on disk,
        ["type"] = FUNCTION,
        ["examples"] = Load data that was previously saved, e.g. an earlier game session:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_file_path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_save_file</span><span class="p">(</span><span class="s2">&quot;my_game&quot;</span><span class="p">,</span> <span class="s2">&quot;my_file&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">my_table</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">my_file_path</span><span class="p">)</span>
<span class="kr">if</span> <span class="ow">not</span> <span class="nb">next</span><span class="p">(</span><span class="n">my_table</span><span class="p">)</span> <span class="kr">then</span>
  <span class="c1">-- empty table</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = loaded,
            ["doc"] = lua table, which is empty if the file could not be found,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = path to check,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Check if a path exists
Good for checking if a file exists before loading a large file,
        ["name"] = sys.exists,
        ["error"] = ,
        ["brief"] = check if a path exists,
        ["type"] = FUNCTION,
        ["examples"] = Load data but return nil if path didn't exist
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">return</span> <span class="kc">nil</span>
<span class="kr">end</span>
<span class="kr">return</span> <span class="n">sys</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="c1">-- returns {} if it failed</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = bool,
            },
            ["name"] = result,
            ["doc"] = <code>true</code> if the path exists, <code>false</code> otherwise,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = filename,
            ["doc"] = file to read from,
          },
        },
        ["notes"] = {
          [1] = Only enabled in debug builds. In release builds returns the string unchanged,
        },
        ["tparams"] = {},
        ["description"] = Create a path to the host device for unit testing
Useful for saving logs etc during development,
        ["name"] = sys.get_host_path,
        ["error"] = ,
        ["brief"] = create a path to the host device for unit testing,
        ["type"] = FUNCTION,
        ["examples"] = Save data on the host
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">host_path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_host_path</span><span class="p">(</span><span class="s2">&quot;logs/test.txt&quot;</span><span class="p">)</span>
<span class="n">sys</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">host_path</span><span class="p">,</span> <span class="n">mytable</span><span class="p">)</span>
</code></pre></div>

Load data from the host
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">host_path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_host_path</span><span class="p">(</span><span class="s2">&quot;logs/test.txt&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">table</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">host_path</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = host_path,
            ["doc"] = the path prefixed with the proper host mount,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = application_id,
            ["doc"] = user defined id of the application, which helps define the location of the save-file,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = file_name,
            ["doc"] = file-name to get path for,
          },
        },
        ["notes"] = {
          [1] = Setting the environment variable `DM_SAVE_HOME` overrides the default application support path.,
        },
        ["tparams"] = {},
        ["description"] = The save-file path is operating system specific and is typically located under the user's home directory.,
        ["name"] = sys.get_save_file,
        ["error"] = ,
        ["brief"] = gets the save-file path,
        ["type"] = FUNCTION,
        ["examples"] = Find a path where we can store data (the example path is on the macOS platform):
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_file_path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_save_file</span><span class="p">(</span><span class="s2">&quot;my_game&quot;</span><span class="p">,</span> <span class="s2">&quot;my_file&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">my_file_path</span><span class="p">)</span> <span class="c1">--&gt; /Users/my_users/Library/Application Support/my_game/my_file</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = path to save-file,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The path from which the application is run.,
        ["name"] = sys.get_application_path,
        ["error"] = ,
        ["brief"] = gets the application path,
        ["type"] = FUNCTION,
        ["examples"] = Find a path where we can store data (the example path is on the macOS platform):
<div class="codehilite"><pre><span></span><code><span class="c1">-- macOS: /Applications/my_game.app</span>
<span class="kd">local</span> <span class="n">application_path</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_application_path</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">application_path</span><span class="p">)</span> <span class="c1">--&gt; /Applications/my_game.app</span>

<span class="c1">-- Windows: C:\Program Files\my_game\my_game.exe</span>
<span class="nb">print</span><span class="p">(</span><span class="n">application_path</span><span class="p">)</span> <span class="c1">--&gt; C:\Program Files\my_game</span>

<span class="c1">-- Linux: /home/foobar/my_game/my_game</span>
<span class="nb">print</span><span class="p">(</span><span class="n">application_path</span><span class="p">)</span> <span class="c1">--&gt; /home/foobar/my_game</span>

<span class="c1">-- Android package name: com.foobar.my_game</span>
<span class="nb">print</span><span class="p">(</span><span class="n">application_path</span><span class="p">)</span> <span class="c1">--&gt; /data/user/0/com.foobar.my_game</span>

<span class="c1">-- iOS: my_game.app</span>
<span class="nb">print</span><span class="p">(</span><span class="n">application_path</span><span class="p">)</span> <span class="c1">--&gt; /var/containers/Bundle/Applications/123456AB-78CD-90DE-12345678ABCD/my_game.app</span>

<span class="c1">-- HTML5: http://www.foobar.com/my_game/</span>
<span class="nb">print</span><span class="p">(</span><span class="n">application_path</span><span class="p">)</span> <span class="c1">--&gt; http://www.foobar.com/my_game</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = path to application executable,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = key,
            ["doc"] = key to get value for. The syntax is SECTION.KEY,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [default_value],
            ["doc"] = (optional) default value to return if the value does not exist,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get string config value from the game.project configuration file with optional default value,
        ["name"] = sys.get_config_string,
        ["error"] = ,
        ["brief"] = get string config value with optional default value,
        ["type"] = FUNCTION,
        ["examples"] = Get user config value
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">text</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_config_string</span><span class="p">(</span><span class="s2">&quot;my_game.text&quot;</span><span class="p">,</span> <span class="s2">&quot;default text&quot;</span><span class="p">))</span>
</code></pre></div>

Start the engine with a bootstrap config override and add a custom config value
<div class="codehilite"><pre><span></span><code>$ dmengine --config<span class="o">=</span>bootstrap.main_collection<span class="o">=</span>/mytest.collectionc --config<span class="o">=</span>mygame.testmode<span class="o">=</span><span class="m">1</span>
</code></pre></div>

Read the custom config value from the command line
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">testmode</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_config_int</span><span class="p">(</span><span class="s2">&quot;mygame.testmode&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = value,
            ["doc"] = config value as a string. default_value if the config key does not exist. nil if no default value was supplied.,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = key,
            ["doc"] = key to get value for. The syntax is SECTION.KEY,
          },
          [2] = {
            ["types"] = {
              [1] = integer,
            },
            ["name"] = [default_value],
            ["doc"] = (optional) default value to return if the value does not exist,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get integer config value from the game.project configuration file with optional default value,
        ["name"] = sys.get_config_int,
        ["error"] = ,
        ["brief"] = get integer config value with optional default value,
        ["type"] = FUNCTION,
        ["examples"] = Get user config value
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_config_int</span><span class="p">(</span><span class="s2">&quot;my_game.speed&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">-- with default value</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">testmode</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_config_int</span><span class="p">(</span><span class="s2">&quot;my_game.testmode&quot;</span><span class="p">)</span> <span class="c1">-- without default value</span>
<span class="kr">if</span> <span class="n">testmode</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="kr">then</span>
    <span class="c1">-- do stuff</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = integer,
            },
            ["name"] = value,
            ["doc"] = config value as an integer. default_value if the config key does not exist. 0 if no default value was supplied.,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = key,
            ["doc"] = key to get value for. The syntax is SECTION.KEY,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [default_value],
            ["doc"] = (optional) default value to return if the value does not exist,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get number config value from the game.project configuration file with optional default value,
        ["name"] = sys.get_config_number,
        ["error"] = ,
        ["brief"] = get number config value with optional default value,
        ["type"] = FUNCTION,
        ["examples"] = Get user config value
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_config_number</span><span class="p">(</span><span class="s2">&quot;my_game.speed&quot;</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = value,
            ["doc"] = config value as an number. default_value if the config key does not exist. 0 if no default value was supplied.,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = url,
            ["doc"] = url to open,
          },
          [2] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [attributes],
            ["doc"] = table with attributes
<code>target</code>
- <span class="type">string</span> <span class="icon-html5"></span>: Optional. Specifies the target attribute or the name of the window. The following values are supported:
- <code>_self</code> - (default value) URL replaces the current page.
- <code>_blank</code> - URL is loaded into a new window, or tab.
- <code>_parent</code> - URL is loaded into the parent frame.
- <code>_top</code> - URL replaces any framesets that may be loaded.
- <code>name</code> - The name of the window (Note: the name does not specify the title of the new window).,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Open URL in default application, typically a browser,
        ["name"] = sys.open_url,
        ["error"] = ,
        ["brief"] = open url in default application,
        ["type"] = FUNCTION,
        ["examples"] = Open an URL:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">success</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">open_url</span><span class="p">(</span><span class="s2">&quot;http://www.defold.com&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">target</span> <span class="o">=</span> <span class="s2">&quot;_blank&quot;</span><span class="p">})</span>
<span class="kr">if</span> <span class="ow">not</span> <span class="n">success</span> <span class="kr">then</span>
  <span class="c1">-- could not open the url...</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = success,
            ["doc"] = a boolean indicating if the url could be opened or not,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = filename,
            ["doc"] = resource to load, full path,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Loads a custom resource. Specify the full filename of the resource that you want
to load. When loaded, the file data is returned as a string.
If loading fails, the function returns <code>nil</code> plus the error message.
In order for the engine to include custom resources in the build process, you need
to specify them in the "custom_resources" key in your "game.project" settings file.
You can specify single resource files or directories. If a directory is included
in the resource list, all files and directories in that directory is recursively
included:
For example "main/data/,assets/level_data.json".,
        ["name"] = sys.load_resource,
        ["error"] = ,
        ["brief"] = loads resource from game data,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Load level data into a string</span>
<span class="kd">local</span> <span class="n">data</span><span class="p">,</span> <span class="nb">error</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_resource</span><span class="p">(</span><span class="s2">&quot;/assets/level_data.json&quot;</span><span class="p">)</span>
<span class="c1">-- Decode json string to a Lua table</span>
<span class="kr">if</span> <span class="n">data</span> <span class="kr">then</span>
  <span class="kd">local</span> <span class="n">data_table</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="n">pprint</span><span class="p">(</span><span class="n">data_table</span><span class="p">)</span>
<span class="kr">else</span>
  <span class="nb">print</span><span class="p">(</span><span class="nb">error</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = data,
            ["doc"] = loaded data, or <code>nil</code> if the resource could not be loaded,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = nil,
            },
            ["name"] = error,
            ["doc"] = the error message, or <code>nil</code> if no error occurred,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = [options],
            ["doc"] = optional options table
- ignore_secure <span class="type">boolean</span> this flag ignores values might be secured by OS e.g. <code>device_ident</code>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns a table with system information.,
        ["name"] = sys.get_sys_info,
        ["error"] = ,
        ["brief"] = get system information,
        ["type"] = FUNCTION,
        ["examples"] = How to get system information:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">info</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_sys_info</span><span class="p">()</span>
<span class="kr">if</span> <span class="n">info</span><span class="p">.</span><span class="n">system_name</span> <span class="o">==</span> <span class="s2">&quot;HTML5&quot;</span> <span class="kr">then</span>
  <span class="c1">-- We are running in a browser.</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = sys_info,
            ["doc"] = table with system information in the following fields:
<dl>
<dt><code>device_model</code></dt>
<dd><span class="type">string</span> <span class="icon-ios"></span><span class="icon-android"></span> Only available on iOS and Android.</dd>
<dt><code>manufacturer</code></dt>
<dd><span class="type">string</span> <span class="icon-ios"></span><span class="icon-android"></span> Only available on iOS and Android.</dd>
<dt><code>system_name</code></dt>
<dd><span class="type">string</span> The system name: "Darwin", "Linux", "Windows", "HTML5", "Android" or "iPhone OS"</dd>
<dt><code>system_version</code></dt>
<dd><span class="type">string</span> The system OS version.</dd>
<dt><code>api_version</code></dt>
<dd><span class="type">string</span> The API version on the system.</dd>
<dt><code>language</code></dt>
<dd><span class="type">string</span> Two character ISO-639 format, i.e. "en".</dd>
<dt><code>device_language</code></dt>
<dd><span class="type">string</span> Two character ISO-639 format (i.e. "sr") and, if applicable, followed by a dash (-) and an ISO 15924 script code (i.e. "sr-Cyrl" or "sr-Latn"). Reflects the device preferred language.</dd>
<dt><code>territory</code></dt>
<dd><span class="type">string</span> Two character ISO-3166 format, i.e. "US".</dd>
<dt><code>gmt_offset</code></dt>
<dd><span class="type">number</span> The current offset from GMT (Greenwich Mean Time), in minutes.</dd>
<dt><code>device_ident</code></dt>
<dd><span class="type">string</span> This value secured by OS. <span class="icon-ios"></span> "identifierForVendor" on iOS. <span class="icon-android"></span> "android_id" on Android. On Android, you need to add <code>READ_PHONE_STATE</code> permission to be able to get this data. We don't use this permission in Defold.</dd>
<dt><code>user_agent</code></dt>
<dd><span class="type">string</span> <span class="icon-html5"></span> The HTTP user agent, i.e. "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like Gecko) Version/10.0.3 Safari/602.4.8"</dd>
</dl>,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns a table with engine information.,
        ["name"] = sys.get_engine_info,
        ["error"] = ,
        ["brief"] = get engine information,
        ["type"] = FUNCTION,
        ["examples"] = How to retrieve engine information:
<div class="codehilite"><pre><span></span><code><span class="c1">-- Update version text label so our testers know what version we&#39;re running</span>
<span class="kd">local</span> <span class="n">engine_info</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_engine_info</span><span class="p">()</span>
<span class="kd">local</span> <span class="n">version_str</span> <span class="o">=</span> <span class="s2">&quot;Defold &quot;</span> <span class="o">..</span> <span class="n">engine_info</span><span class="p">.</span><span class="n">version</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">..</span> <span class="n">engine_info</span><span class="p">.</span><span class="n">version_sha1</span>
<span class="n">gui</span><span class="p">.</span><span class="n">set_text</span><span class="p">(</span><span class="n">gui</span><span class="p">.</span><span class="n">get_node</span><span class="p">(</span><span class="s2">&quot;version&quot;</span><span class="p">),</span> <span class="n">version_str</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = engine_info,
            ["doc"] = table with engine information in the following fields:
<dl>
<dt><code>version</code></dt>
<dd><span class="type">string</span> The current Defold engine version, i.e. "1.2.96"</dd>
<dt><code>version_sha1</code></dt>
<dd><span class="type">string</span> The SHA1 for the current engine build, i.e. "0060183cce2e29dbd09c85ece83cbb72068ee050"</dd>
<dt><code>is_debug</code></dt>
<dd><span class="type">boolean</span> If the engine is a debug or release version</dd>
</dl>,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = app_string,
            ["doc"] = platform specific string with application package or query, see above for details.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns a table with application information for the requested app.
<span class="icon-ios"></span> On iOS, the <code>app_string</code> is an url scheme for the app that is queried. Your
game needs to list the schemes that are queried in an <code>LSApplicationQueriesSchemes</code> array
in a custom "Info.plist".
<span class="icon-android"></span> On Android, the <code>app_string</code> is the package identifier for the app.,
        ["name"] = sys.get_application_info,
        ["error"] = ,
        ["brief"] = get application information,
        ["type"] = FUNCTION,
        ["examples"] = Check if twitter is installed:
<div class="codehilite"><pre><span></span><code><span class="n">sysinfo</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_sys_info</span><span class="p">()</span>
<span class="n">twitter</span> <span class="o">=</span> <span class="p">{}</span>

<span class="kr">if</span> <span class="n">sysinfo</span><span class="p">.</span><span class="n">system_name</span> <span class="o">==</span> <span class="s2">&quot;Android&quot;</span> <span class="kr">then</span>
  <span class="n">twitter</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_application_info</span><span class="p">(</span><span class="s2">&quot;com.twitter.android&quot;</span><span class="p">)</span>
<span class="kr">elseif</span> <span class="n">sysinfo</span><span class="p">.</span><span class="n">system_name</span> <span class="o">==</span> <span class="s2">&quot;iPhone OS&quot;</span> <span class="kr">then</span>
  <span class="n">twitter</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_application_info</span><span class="p">(</span><span class="s2">&quot;twitter:&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">if</span> <span class="n">twitter</span><span class="p">.</span><span class="n">installed</span> <span class="kr">then</span>
  <span class="c1">-- twitter is installed!</span>
<span class="kr">end</span>
</code></pre></div>

<span class="icon-ios"></span> Info.plist for the iOS app needs to list the schemes that are queried:
<div class="codehilite"><pre><span></span><code>...
<span class="nt">&lt;key&gt;</span>LSApplicationQueriesSchemes<span class="nt">&lt;/key&gt;</span>
 <span class="nt">&lt;array&gt;</span>
   <span class="nt">&lt;string&gt;</span>twitter<span class="nt">&lt;/string&gt;</span>
 <span class="nt">&lt;/array&gt;</span>
...
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = app_info,
            ["doc"] = table with application information in the following fields:
<dl>
<dt><code>installed</code></dt>
<dd><span class="type">boolean</span> <code>true</code> if the application is installed, <code>false</code> otherwise.</dd>
</dl>,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns an array of tables with information on network interfaces.,
        ["name"] = sys.get_ifaddrs,
        ["error"] = ,
        ["brief"] = enumerate network interfaces,
        ["type"] = FUNCTION,
        ["examples"] = How to get the IP address of interface "en0":
<div class="codehilite"><pre><span></span><code><span class="n">ifaddrs</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_ifaddrs</span><span class="p">()</span>
<span class="kr">for</span> <span class="n">_</span><span class="p">,</span><span class="n">interface</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">ifaddrs</span><span class="p">)</span> <span class="kr">do</span>
  <span class="kr">if</span> <span class="n">interface</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;en0&quot;</span> <span class="kr">then</span>
    <span class="kd">local</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">interface</span><span class="p">.</span><span class="n">address</span>
  <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = ifaddrs,
            ["doc"] = an array of tables. Each table entry contain the following fields:
<dl>
<dt><code>name</code></dt>
<dd><span class="type">string</span> Interface name</dd>
<dt><code>address</code></dt>
<dd><span class="type">string</span> IP address. <span class="icon-attention"></span> might be <code>nil</code> if not available.</dd>
<dt><code>mac</code></dt>
<dd><span class="type">string</span> Hardware MAC address. <span class="icon-attention"></span> might be nil if not available.</dd>
<dt><code>up</code></dt>
<dd><span class="type">boolean</span> <code>true</code> if the interface is up (available to transmit and receive data), <code>false</code> otherwise.</dd>
<dt><code>running</code></dt>
<dd><span class="type">boolean</span> <code>true</code> if the interface is running, <code>false</code> otherwise.</dd>
</dl>,
          },
        },
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = function(source, message, traceback),
            },
            ["name"] = error_handler,
            ["doc"] = the function to be called on error
<dl>
<dt><code>source</code></dt>
<dd><span class="type">string</span> The runtime context of the error. Currently, this is always <code>"lua"</code>.</dd>
<dt><code>message</code></dt>
<dd><span class="type">string</span> The source file, line number and error message.</dd>
<dt><code>traceback</code></dt>
<dd><span class="type">string</span> The stack traceback.</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the Lua error handler function.
The error handler is a function which is called whenever a lua runtime error occurs.,
        ["name"] = sys.set_error_handler,
        ["error"] = ,
        ["brief"] = set the error handler,
        ["type"] = FUNCTION,
        ["examples"] = Install error handler that just prints the errors
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">my_error_handler</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">traceback</span><span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>    <span class="c1">--&gt; lua</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>   <span class="c1">--&gt; main/my.script:10: attempt to perform arithmetic on a string value</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">traceback</span><span class="p">)</span> <span class="c1">--&gt; stack traceback:</span>
                   <span class="c1">--&gt;         main/test.script:10: in function &#39;boom&#39;</span>
                   <span class="c1">--&gt;         main/test.script:15: in function &lt;main/my.script:13&gt;</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">boom</span><span class="p">()</span>
  <span class="kr">return</span> <span class="mi">10</span> <span class="o">+</span> <span class="s2">&quot;string&quot;</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">sys</span><span class="p">.</span><span class="n">set_error_handler</span><span class="p">(</span><span class="n">my_error_handler</span><span class="p">)</span>
  <span class="n">boom</span><span class="p">()</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = host,
            ["doc"] = hostname to check against,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the host that is used to check for network connectivity against.,
        ["name"] = sys.set_connectivity_host,
        ["error"] = ,
        ["brief"] = set host to check for network connectivity against,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">sys</span><span class="p">.</span><span class="n">set_connectivity_host</span><span class="p">(</span><span class="s2">&quot;www.google.com&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-ios"></span> <span class="icon-android"></span> Returns the current network connectivity status
on mobile platforms.
On desktop, this function always return <code>sys.NETWORK_CONNECTED</code>.,
        ["name"] = sys.get_connectivity,
        ["error"] = ,
        ["brief"] = get current network connectivity status,
        ["type"] = FUNCTION,
        ["examples"] = Check if we are connected through a cellular connection
<div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">NETWORK_CONNECTED_CELLULAR</span> <span class="o">==</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_connectivity</span><span class="p">())</span> <span class="kr">then</span>
  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Connected via cellular, avoid downloading big files!&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = status,
            ["doc"] = network connectivity status:
<ul>
<li><code>sys.NETWORK_DISCONNECTED</code> (no network connection is found)</li>
<li><code>sys.NETWORK_CONNECTED_CELLULAR</code> (connected through mobile cellular)</li>
<li><code>sys.NETWORK_CONNECTED</code> (otherwise, Wifi)</li>
</ul>,
          },
        },
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = code,
            ["doc"] = exit code to report to the OS, 0 means clean exit,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Terminates the game application and reports the specified <code>code</code> to the OS.,
        ["name"] = sys.exit,
        ["error"] = ,
        ["brief"] = exits application,
        ["type"] = FUNCTION,
        ["examples"] = This examples demonstrates how to exit the application when some kind of quit messages is received (maybe from gui or similar):
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;quit&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [arg1],
            ["doc"] = argument 1,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [arg2],
            ["doc"] = argument 2,
          },
          [3] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [arg3],
            ["doc"] = argument 3,
          },
          [4] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [arg4],
            ["doc"] = argument 4,
          },
          [5] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [arg5],
            ["doc"] = argument 5,
          },
          [6] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = [arg6],
            ["doc"] = argument 6,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Reboots the game engine with a specified set of arguments.
Arguments will be translated into command line arguments. Calling reboot
function is equivalent to starting the engine with the same arguments.
On startup the engine reads configuration from "game.project" in the
project root.,
        ["name"] = sys.reboot,
        ["error"] = ,
        ["brief"] = reboot engine with arguments,
        ["type"] = FUNCTION,
        ["examples"] = How to reboot engine with a specific bootstrap collection.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">arg1</span> <span class="o">=</span> <span class="s1">&#39;--config=bootstrap.main_collection=/my.collectionc&#39;</span>
<span class="kd">local</span> <span class="n">arg2</span> <span class="o">=</span> <span class="s1">&#39;build/game.projectc&#39;</span>
<span class="n">sys</span><span class="p">.</span><span class="n">reboot</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = swap_interval,
            ["doc"] = target swap interval.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the vsync swap interval. The interval with which to swap the front and back buffers
in sync with vertical blanks (v-blank), the hardware event where the screen image is updated
with data from the front buffer. A value of 1 swaps the buffers at every v-blank, a value of
2 swaps the buffers every other v-blank and so on. A value of 0 disables waiting for v-blank
before swapping the buffers. Default value is 1.
When setting the swap interval to 0 and having <code>vsync</code> disabled in
"game.project", the engine will try to respect the set frame cap value from
"game.project" in software instead.
This setting may be overridden by driver settings.,
        ["name"] = sys.set_vsync_swap_interval,
        ["error"] = ,
        ["brief"] = set vsync swap interval,
        ["type"] = FUNCTION,
        ["examples"] = Setting the swap intervall to swap every v-blank
<div class="codehilite"><pre><span></span><code><span class="n">sys</span><span class="p">.</span><span class="n">set_vsync_swap_interval</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = frequency,
            ["doc"] = target frequency. 60 for 60 fps,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set game update-frequency (frame cap). This option is equivalent to <code>display.update_frequency</code> in
the "game.project" settings but set in run-time. If <code>Vsync</code> checked in "game.project", the rate will
be clamped to a swap interval that matches any detected main monitor refresh rate. If <code>Vsync</code> is
unchecked the engine will try to respect the rate in software using timers. There is no
guarantee that the frame cap will be achieved depending on platform specifics and hardware settings.,
        ["name"] = sys.set_update_frequency,
        ["error"] = ,
        ["brief"] = set update frequency,
        ["type"] = FUNCTION,
        ["examples"] = Setting the update frequency to 60 frames per second
<div class="codehilite"><pre><span></span><code><span class="n">sys</span><span class="p">.</span><span class="n">set_update_frequency</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = lua table to serialize,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The buffer can later deserialized by <code>sys.deserialize</code>.
This method has all the same limitations as <code>sys.save</code>.,
        ["name"] = sys.serialize,
        ["error"] = ,
        ["brief"] = serializes a lua table to a buffer and returns it,
        ["type"] = FUNCTION,
        ["examples"] = Serialize table:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_table</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nb">table.insert</span><span class="p">(</span><span class="n">my_table</span><span class="p">,</span> <span class="s2">&quot;my_value&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">my_table</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = serialized data buffer,
          },
        },
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buffer,
            ["doc"] = buffer to deserialize from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = deserializes buffer into a lua table,
        ["name"] = sys.deserialize,
        ["error"] = ,
        ["brief"] = deserializes buffer into a lua table,
        ["type"] = FUNCTION,
        ["examples"] = Deserialize a lua table that was previously serialized:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">my_table</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">table</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">deserialize</span><span class="p">(</span><span class="n">buffer</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = table,
            ["doc"] = lua table with deserialized data,
          },
        },
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = no network connection found,
        ["name"] = sys.NETWORK_DISCONNECTED,
        ["error"] = ,
        ["brief"] = no network connection found,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = network connected through mobile cellular,
        ["name"] = sys.NETWORK_CONNECTED_CELLULAR,
        ["error"] = ,
        ["brief"] = network connected through mobile cellular,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = network connected through other, non cellular, connection,
        ["name"] = sys.NETWORK_CONNECTED,
        ["error"] = ,
        ["brief"] = network connected through other, non cellular, connection,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = code,
            ["doc"] = exit code to report to the OS, 0 means clean exit,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Terminates the game application and reports the specified <code>code</code> to the OS.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = exit,
        ["error"] = ,
        ["brief"] = exits application,
        ["type"] = MESSAGE,
        ["examples"] = This examples demonstrates how to exit the application when some kind of quit messages is received (maybe from gui or similar):
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message_id</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">sender</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">message_id</span> <span class="o">==</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;quit&quot;</span><span class="p">)</span> <span class="kr">then</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;exit&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">})</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Toggles the on-screen profiler.
The profiler is a real-time tool that shows the numbers of milliseconds spent
in each scope per frame as well as counters. The profiler is very useful for
tracking down performance and resource problems.
In addition to the on-screen profiler, Defold includes a web-based profiler that
allows you to sample a series of data points and then analyze them in detail.
The web profiler is available at <code>http://&lt;device IP&gt;:8002</code> where <device IP> is
the IP address of the device you are running your game on.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = toggle_profile,
        ["error"] = ,
        ["brief"] = shows/hides the on-screen profiler,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;toggle_profile&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Toggles the on-screen physics visual debugging mode which is very useful for
tracking down issues related to physics. This mode visualizes
all collision object shapes and normals at detected contact points. Toggling
this mode on is equal to setting <code>physics.debug</code> in the "game.project" settings,
but set in run-time.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = toggle_physics_debug,
        ["error"] = ,
        ["brief"] = shows/hides the on-screen physics visual debugging,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;toggle_physics_debug&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = file_name,
            ["doc"] = file name to write the video to,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = frame_period,
            ["doc"] = frame period to record, ie write every nth frame. Default value is <code>2</code>,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = fps,
            ["doc"] = frames per second. Playback speed for the video. Default value is <code>30</code>. The fps value doens't affect the recording. It's only meta-data in the written video file.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Starts video recording of the game frame-buffer to file. Current video format is the
open vp8 codec in the ivf container. It's possible to upload this format directly
to YouTube. The VLC video player has native support but with the known issue that
not the entire file is played back. It's probably an issue with VLC.
The Miro Video Converter has support for vp8/ivf.
<span class="icon-macos"></span> <span class="icon-windows"></span> <span class="icon-linux"></span> Video recording is only supported on desktop platforms.
<span class="icon-attention"></span> Audio is currently not supported
<span class="icon-attention"></span> Window width and height must be a multiple of 8 to be able to record video.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = start_record,
        ["error"] = ,
        ["brief"] = starts video recording,
        ["type"] = MESSAGE,
        ["examples"] = Record a video in 30 fps given that the native game fps is 60:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;start_record&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s2">&quot;test_rec.ivf&quot;</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>

To write a video in 60 fps given that the native game fps is 60:
<div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;start_record&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s2">&quot;test_rec.ivf&quot;</span><span class="p">,</span> <span class="n">frame_period</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fps</span> <span class="o">=</span> <span class="mi">60</span> <span class="p">}</span> <span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Stops the currently active video recording.
<span class="icon-macos"></span> <span class="icon-windows"></span> <span class="icon-linux"></span> Video recording is only supported on desktop platforms.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = stop_record,
        ["error"] = ,
        ["brief"] = stop current video recording,
        ["type"] = MESSAGE,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;stop_record&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = arg1,
            ["doc"] = argument 1,
          },
          [2] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = arg2,
            ["doc"] = argument 2,
          },
          [3] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = arg3,
            ["doc"] = argument 3,
          },
          [4] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = arg4,
            ["doc"] = argument 4,
          },
          [5] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = arg5,
            ["doc"] = argument 5,
          },
          [6] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = arg6,
            ["doc"] = argument 6,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Reboots the game engine with a specified set of arguments.
Arguments will be translated into command line arguments. Sending the reboot
command is equivalent to starting the engine with the same arguments.
On startup the engine reads configuration from "game.project" in the
project root.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = reboot,
        ["error"] = ,
        ["brief"] = reboot engine with arguments,
        ["type"] = MESSAGE,
        ["examples"] = How to reboot engine with a specific bootstrap collection.
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">arg1</span> <span class="o">=</span> <span class="s1">&#39;--config=bootstrap.main_collection=/my.collectionc&#39;</span>
<span class="kd">local</span> <span class="n">arg2</span> <span class="o">=</span> <span class="s1">&#39;build/game.projectc&#39;</span>
<span class="n">msg</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s2">&quot;@system:&quot;</span><span class="p">,</span> <span class="s2">&quot;reboot&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">arg1</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span> <span class="o">=</span> <span class="n">arg2</span><span class="p">})</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = ,
            },
            ["name"] = swap_interval,
            ["doc"] = target swap interval.,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the vsync swap interval. The interval with which to swap the front and back buffers
in sync with vertical blanks (v-blank), the hardware event where the screen image is updated
with data from the front buffer. A value of 1 swaps the buffers at every v-blank, a value of
2 swaps the buffers every other v-blank and so on. A value of 0 disables waiting for v-blank
before swapping the buffers. Default value is 1.
When setting the swap interval to 0 and having <code>vsync</code> disabled in
"game.project", the engine will try to respect the set frame cap value from
"game.project" in software instead.
This setting may be overridden by driver settings.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = set_vsync,
        ["error"] = ,
        ["brief"] = set vsync swap interval,
        ["type"] = MESSAGE,
        ["examples"] = <pre>
msg.post("@system:", "set_vsync", { swap_interval = 1 } )
</pre>,
        ["returnvalues"] = {},
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = ,
            },
            ["name"] = frequency,
            ["doc"] = target frequency. 60 for 60 fps,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set game update-frequency (frame cap). This option is equivalent to <code>display.update_frequency</code> in
the "game.project" settings but set in run-time. If <code>Vsync</code> checked in "game.project", the rate will
be clamped to a swap interval that matches any detected main monitor refresh rate. If <code>Vsync</code> is
unchecked the engine will try to respect the rate in software using timers. There is no
guarantee that the frame cap will be achieved depending on platform specifics and hardware settings.
This message can only be sent to the designated <code>@system</code> socket.,
        ["name"] = set_update_frequency,
        ["error"] = ,
        ["brief"] = set update frequency,
        ["type"] = MESSAGE,
        ["examples"] = <pre>
msg.post("@system:", "set_update_frequency", { frequency = 60 } )
</pre>,
        ["returnvalues"] = {},
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = the path to load the buffer from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The sys.load_buffer function will first try to load the resource
from any of the mounted resource locations and return the data if
any matching entries found. If not, the path will be tried
as is from the primary disk on the device.
In order for the engine to include custom resources in the build process, you need
to specify them in the "custom_resources" key in your "game.project" settings file.
You can specify single resource files or directories. If a directory is included
in the resource list, all files and directories in that directory is recursively
included:
For example "main/data/,assets/level_data.json".,
        ["name"] = sys.load_buffer,
        ["error"] = ,
        ["brief"] = loads a buffer from a resource or disk path,
        ["type"] = FUNCTION,
        ["examples"] = Load binary data from a custom project resource:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">my_buffer</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_buffer</span><span class="p">(</span><span class="s2">&quot;/assets/my_level_data.bin&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">data_str</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">get_bytes</span><span class="p">(</span><span class="n">my_buffer</span><span class="p">,</span> <span class="s2">&quot;data&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">has_my_header</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">data_str</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;D3F0LD&quot;</span>
</code></pre></div>

Load binary data from non-custom resource files on disk:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">asset_1</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_buffer</span><span class="p">(</span><span class="s2">&quot;folder_next_to_binary/my_level_asset.txt&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">asset_2</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_buffer</span><span class="p">(</span><span class="s2">&quot;/my/absolute/path&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = buffer,
            },
            ["name"] = buffer,
            ["doc"] = the buffer with data,
          },
        },
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = path,
            ["doc"] = the path to load the buffer from,
          },
          [2] = {
            ["types"] = {
              [1] = function(self, request_id, result),
            },
            ["name"] = status_callback,
            ["doc"] = A status callback that will be invoked when a request has been handled, or an error occured. The result is a table containing:
<dl>
<dt><code>status</code></dt>
<dd><span class="type">number</span> The status of the request, supported values are:</dd>
</dl>
<ul>
<li><code>resource.REQUEST_STATUS_FINISHED</code></li>
<li><code>resource.REQUEST_STATUS_ERROR_IO_ERROR</code></li>
<li><code>resource.REQUEST_STATUS_ERROR_NOT_FOUND</code></li>
</ul>
<dl>
<dt><code>buffer</code></dt>
<dd><span class="type">buffer</span> If the request was successfull, this will contain the request payload in a buffer object, and nil otherwise. Make sure to check the status before doing anything with the buffer value!</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The sys.load_buffer function will first try to load the resource
from any of the mounted resource locations and return the data if
any matching entries found. If not, the path will be tried
as is from the primary disk on the device.
In order for the engine to include custom resources in the build process, you need
to specify them in the "custom_resources" key in your "game.project" settings file.
You can specify single resource files or directories. If a directory is included
in the resource list, all files and directories in that directory is recursively
included:
For example "main/data/,assets/level_data.json".
Note that issuing multiple requests of the same resource will yield
individual buffers per request. There is no implic caching of the buffers
based on request path.,
        ["name"] = sys.load_buffer_async,
        ["error"] = ,
        ["brief"] = loads a buffer from a resource or disk path asynchronously,
        ["type"] = FUNCTION,
        ["examples"] = Load binary data from a custom project resource and update a texture resource:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">my_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request_id</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">result</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">resource</span><span class="p">.</span><span class="n">REQUEST_STATUS_FINISHED</span> <span class="kr">then</span>
     <span class="n">resource</span><span class="p">.</span><span class="n">set_texture</span><span class="p">(</span><span class="s2">&quot;/my_texture&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span> <span class="n">result</span><span class="p">.</span><span class="n">buf</span><span class="p">)</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="n">my_request</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_buffer_async</span><span class="p">(</span><span class="s2">&quot;/assets/my_level_data.bin&quot;</span><span class="p">,</span> <span class="n">my_callback</span><span class="p">)</span>
</code></pre></div>

Load binary data from non-custom resource files on disk:
<div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">my_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request_id</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">result</span><span class="p">.</span><span class="n">status</span> <span class="o">~=</span> <span class="n">sys</span><span class="p">.</span><span class="n">REQUEST_STATUS_FINISHED</span> <span class="kr">then</span>
    <span class="c1">-- uh oh! File could not be found, do something graceful</span>
  <span class="kr">elseif</span> <span class="n">request_id</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">first_asset</span> <span class="kr">then</span>
    <span class="c1">-- result.buffer contains data from my_level_asset.bin</span>
  <span class="n">elif</span> <span class="n">request_id</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">second_asset</span> <span class="kr">then</span>
    <span class="c1">-- result.buffer contains data from &#39;my_level.bin&#39;</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">first_asset</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;folder_next_to_binary/my_level_asset.bin&quot;</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">second_asset</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="s2">&quot;/some_absolute_path/my_level.bin&quot;</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">first_request</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_buffer_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">first_asset</span><span class="p">,</span> <span class="n">my_callback</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">second_request</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">load_buffer_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">second_asset</span><span class="p">,</span> <span class="n">my_callback</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = handle,
            },
            ["name"] = handle,
            ["doc"] = a handle to the request,
          },
        },
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = an asyncronous request has finished successfully,
        ["name"] = sys.REQUEST_STATUS_FINISHED,
        ["error"] = ,
        ["brief"] = an asyncronous request has finished successfully,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = an asyncronous request is unable to read the resource,
        ["name"] = sys.REQUEST_STATUS_ERROR_IO_ERROR,
        ["error"] = ,
        ["brief"] = an asyncronous request is unable to read the resource,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = an asyncronous request is unable to locate the resource,
        ["name"] = sys.REQUEST_STATUS_ERROR_NOT_FOUND,
        ["error"] = ,
        ["brief"] = an asyncronous request is unable to locate the resource,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions and messages for using system resources, controlling the engine,
error handling and debugging.,
      ["name"] = System,
      ["notes"] = {},
      ["namespace"] = sys,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = System API documentation,
    },
  },
  [31] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The tile source used when rendering the tile map. The type of the property is hash.,
        ["name"] = tile_source,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> tile source,
        ["type"] = PROPERTY,
        ["examples"] = How to set tile source using a script property (see <a href="/ref/resource#resource.tile_source">resource.tile_source</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_tile_source&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">tile_source</span><span class="p">(</span><span class="s2">&quot;/tilesource.tilesource&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;tile_source&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_tile_source</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The material used when rendering the tile map. The type of the property is hash.,
        ["name"] = material,
        ["error"] = ,
        ["brief"] = <span class="type">hash</span> tile map material,
        ["type"] = PROPERTY,
        ["examples"] = How to set material using a script property (see <a href="/ref/resource#resource.material">resource.material</a>)
<div class="codehilite"><pre><span></span><code><span class="n">go</span><span class="p">.</span><span class="n">property</span><span class="p">(</span><span class="s2">&quot;my_material&quot;</span><span class="p">,</span> <span class="n">resource</span><span class="p">.</span><span class="n">material</span><span class="p">(</span><span class="s2">&quot;/material.material&quot;</span><span class="p">))</span>
<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
  <span class="n">go</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;material&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">my_material</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the tile map,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = layer,
            ["doc"] = name of the layer for the tile,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x-coordinate of the tile,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y-coordinate of the tile,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = tile,
            ["doc"] = index of new tile to set. 0 resets the cell,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = [transform-bitmask],
            ["doc"] = optional flip and/or rotation should be applied to the tile,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Replace a tile in a tile map with a new tile.
The coordinates of the tiles are indexed so that the "first" tile just
above and to the right of origin has coordinates 1,1.
Tiles to the left of and below origin are indexed 0, -1, -2 and so forth.
<pre>
+-------+-------+------+------+
|  0,3  |  1,3  | 2,3  | 3,3  |
+-------+-------+------+------+
|  0,2  |  1,2  | 2,2  | 3,2  |
+-------+-------+------+------+
|  0,1  |  1,1  | 2,1  | 3,1  |
+-------O-------+------+------+
|  0,0  |  1,0  | 2,0  | 3,0  |
+-------+-------+------+------+
</pre>

The coordinates must be within the bounds of the tile map as it were created.
That is, it is not possible to extend the size of a tile map by setting tiles outside the edges.
To clear a tile, set the tile to number 0. Which tile map and layer to manipulate is identified by the URL and the layer name parameters.
Transform bitmask is arithmetic sum of one or both FLIP constants (<code>tilemap.H_FLIP</code>, <code>tilemap.V_FLIP</code>) and/or one of ROTATION constants
(<code>tilemap.ROTATE_90</code>, <code>tilemap.ROTATE_180</code>, <code>tilemap.ROTATE_270</code>).
Flip always applies before rotation (clockwise).,
        ["name"] = tilemap.set_tile,
        ["error"] = ,
        ["brief"] = set a tile in a tile map,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Clear the tile under the player.</span>
<span class="n">tilemap</span><span class="p">.</span><span class="n">set_tile</span><span class="p">(</span><span class="s2">&quot;/level#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;foreground&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">player_x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">player_y</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1">-- Set tile with different combination of flip and rotation</span>
<span class="n">tilemap</span><span class="p">.</span><span class="n">set_tile</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;layer1&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">H_FLIP</span> <span class="o">+</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">V_FLIP</span> <span class="o">+</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">ROTATE_90</span><span class="p">)</span>
<span class="n">tilemap</span><span class="p">.</span><span class="n">set_tile</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;layer1&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">H_FLIP</span> <span class="o">+</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">ROTATE_270</span><span class="p">)</span>
<span class="n">tilemap</span><span class="p">.</span><span class="n">set_tile</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;layer1&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">V_FLIP</span> <span class="o">+</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">H_FLIP</span><span class="p">)</span>
<span class="n">tilemap</span><span class="p">.</span><span class="n">set_tile</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;layer1&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">ROTATE_180</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the tile map,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = layer,
            ["doc"] = name of the layer for the tile,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x-coordinate of the tile,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y-coordinate of the tile,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the tile set at the specified position in the tilemap.
The position is identified by the tile index starting at origin
with index 1, 1. (see <a href="/ref/tilemap#tilemap.set_tile()">tilemap.set_tile()</a>)
Which tile map and layer to query is identified by the URL and the
layer name parameters.,
        ["name"] = tilemap.get_tile,
        ["error"] = ,
        ["brief"] = get a tile from a tile map,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- get the tile under the player.</span>
<span class="kd">local</span> <span class="n">tileno</span> <span class="o">=</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">get_tile</span><span class="p">(</span><span class="s2">&quot;/level#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;foreground&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">player_x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">player_y</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = tile,
            ["doc"] = index of the tile,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the tile map,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = layer,
            ["doc"] = name of the layer for the tile,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x-coordinate of the tile,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y-coordinate of the tile,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the tile information at the specified position in the tilemap.
The position is identified by the tile index starting at origin
with index 1, 1. (see <a href="/ref/tilemap#tilemap.set_tile()">tilemap.set_tile()</a>)
Which tile map and layer to query is identified by the URL and the
layer name parameters.,
        ["name"] = tilemap.get_tile_info,
        ["error"] = ,
        ["brief"] = get full information for a tile from a tile map,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- get the tile under the player.</span>
<span class="kd">local</span> <span class="n">tile_info</span> <span class="o">=</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">get_tile_info</span><span class="p">(</span><span class="s2">&quot;/level#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;foreground&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">player_x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">player_y</span><span class="p">)</span>
<span class="n">pprint</span><span class="p">(</span><span class="n">tile_info</span><span class="p">)</span>
<span class="c1">-- {</span>
<span class="c1">--    index = 0,</span>
<span class="c1">--    h_flip = false,</span>
<span class="c1">--    v_flip = true,</span>
<span class="c1">--    rotate_90 = false</span>
<span class="c1">-- }</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = tile_info,
            ["doc"] = index of the tile,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the tilemap,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = layer,
            ["doc"] = the name of the layer for the tiles,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Retrieves all the tiles for the specified layer in the tilemap.
It returns a table of rows where the keys are the
tile positions (see <a href="/ref/tilemap#tilemap.get_bounds()">tilemap.get_bounds()</a>).
You can iterate it using <code>tiles[row_index][column_index]</code>.,
        ["name"] = tilemap.get_tiles,
        ["error"] = ,
        ["brief"] = get all the tiles from a layer in a tilemap,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">columns_count</span><span class="p">,</span> <span class="n">rows_count</span> <span class="o">=</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">get_bounds</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">tiles</span> <span class="o">=</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">get_tiles</span><span class="p">(</span><span class="s2">&quot;#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;layer&quot;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">tile</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
<span class="kr">for</span> <span class="n">row_index</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">bottom</span> <span class="o">+</span> <span class="n">rows_count</span> <span class="o">-</span> <span class="mi">1</span> <span class="kr">do</span>
    <span class="kr">for</span> <span class="n">column_index</span> <span class="o">=</span> <span class="n">left</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">columns_count</span> <span class="o">-</span> <span class="mi">1</span> <span class="kr">do</span>
        <span class="n">tile</span> <span class="o">=</span> <span class="n">tiles</span><span class="p">[</span><span class="n">row_index</span><span class="p">][</span><span class="n">column_index</span><span class="p">]</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = tiles,
            ["doc"] = a table of rows representing the layer,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the tile map,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get the bounds for a tile map. This function returns multiple values:
The lower left corner index x and y coordinates (1-indexed),
the tile map width and the tile map height.
The resulting values take all tile map layers into account, meaning that
the bounds are calculated as if all layers were collapsed into one.,
        ["name"] = tilemap.get_bounds,
        ["error"] = ,
        ["brief"] = get the bounds of a tile map,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- get the level bounds.</span>
<span class="kd">local</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tilemap</span><span class="p">.</span><span class="n">get_bounds</span><span class="p">(</span><span class="s2">&quot;/level#tilemap&quot;</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x coordinate of the bottom left corner,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y coordinate of the bottom left corner,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = w,
            ["doc"] = number of columns (width) in the tile map,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = h,
            ["doc"] = number of rows (height) in the tile map,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
              [3] = url,
            },
            ["name"] = url,
            ["doc"] = the tile map,
          },
          [2] = {
            ["types"] = {
              [1] = string,
              [2] = hash,
            },
            ["name"] = layer,
            ["doc"] = name of the layer for the tile,
          },
          [3] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = visible,
            ["doc"] = should the layer be visible,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets the visibility of the tilemap layer,
        ["name"] = tilemap.set_visible,
        ["error"] = ,
        ["brief"] = set the visibility of a layer,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Disable rendering of the layer</span>
<span class="n">tilemap</span><span class="p">.</span><span class="n">set_visible</span><span class="p">(</span><span class="s2">&quot;/level#tilemap&quot;</span><span class="p">,</span> <span class="s2">&quot;foreground&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = flip tile horizontally,
        ["name"] = tilemap.H_FLIP,
        ["error"] = ,
        ["brief"] = flip tile horizontally,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = flip tile vertically,
        ["name"] = tilemap.V_FLIP,
        ["error"] = ,
        ["brief"] = flip tile vertically,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = rotate tile 90 degrees clockwise,
        ["name"] = tilemap.ROTATE_90,
        ["error"] = ,
        ["brief"] = rotate tile 90 degrees clockwise,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = rotate tile 180 degrees clockwise,
        ["name"] = tilemap.ROTATE_180,
        ["error"] = ,
        ["brief"] = rotate tile 180 degrees clockwise,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = rotate tile 270 degrees clockwise,
        ["name"] = tilemap.ROTATE_270,
        ["error"] = ,
        ["brief"] = rotate tile 270 degrees clockwise,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = COMPONENTS,
      ["description"] = Functions and messages used to manipulate tile map components.,
      ["name"] = Tilemap,
      ["notes"] = {},
      ["namespace"] = tilemap,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Tilemap API documentation,
    },
  },
  [32] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = delay,
            ["doc"] = time interval in seconds,
          },
          [2] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = repeat,
            ["doc"] = true = repeat timer until cancel, false = one-shot timer,
          },
          [3] = {
            ["types"] = {
              [1] = function(self, handle, time_elapsed),
            },
            ["name"] = callback,
            ["doc"] = timer callback function
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The current object</dd>
<dt><code>handle</code></dt>
<dd><span class="type">number</span> The handle of the timer</dd>
<dt><code>time_elapsed</code></dt>
<dd><span class="type">number</span> The elapsed time - on first trigger it is time since timer.delay call, otherwise time since last trigger</dd>
</dl>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Adds a timer and returns a unique handle.
You may create more timers from inside a timer callback.
Using a delay of 0 will result in a timer that triggers at the next frame just before
script update functions.
If you want a timer that triggers on each frame, set delay to 0.0f and repeat to true.
Timers created within a script will automatically die when the script is deleted.,
        ["name"] = timer.delay,
        ["error"] = ,
        ["brief"] = create a timer,
        ["type"] = FUNCTION,
        ["examples"] = A simple one-shot timer
<div class="codehilite"><pre><span></span><code><span class="n">timer</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;print in one second&quot;</span><span class="p">)</span> <span class="kr">end</span><span class="p">)</span>
</code></pre></div>

Repetitive timer which canceled after 10 calls
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="kr">function</span> <span class="nf">call_every_second</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">handle</span><span class="p">,</span> <span class="n">time_elapsed</span><span class="p">)</span>
  <span class="n">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Call #&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">counter</span><span class="p">)</span>
  <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">==</span> <span class="mi">10</span> <span class="kr">then</span>
    <span class="n">timer</span><span class="p">.</span><span class="n">cancel</span><span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="c1">-- cancel timer after 10 calls</span>
  <span class="kr">end</span>
<span class="kr">end</span>

<span class="n">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">timer</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="n">call_every_second</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = handle,
            ["doc"] = identifier for the create timer, returns timer.INVALID_TIMER_HANDLE if the timer can not be created,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = handle,
            ["doc"] = the timer handle returned by timer.delay(),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = You may cancel a timer from inside a timer callback.
Cancelling a timer that is already executed or cancelled is safe.,
        ["name"] = timer.cancel,
        ["error"] = ,
        ["brief"] = cancel a timer,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">self</span><span class="p">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">timer</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;print every second&quot;</span><span class="p">)</span> <span class="kr">end</span><span class="p">)</span>
<span class="p">...</span>
<span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="n">timer</span><span class="p">.</span><span class="n">cancel</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">handle</span><span class="p">)</span>
<span class="kr">if</span> <span class="ow">not</span> <span class="n">result</span> <span class="kr">then</span>
   <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;the timer is already cancelled&quot;</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = true,
            ["doc"] = if the timer was active, false if the timer is already cancelled / complete,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = handle,
            ["doc"] = the timer handle returned by timer.delay(),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Manual triggering a callback for a timer.,
        ["name"] = timer.trigger,
        ["error"] = ,
        ["brief"] = trigger a callback,
        ["type"] = FUNCTION,
        ["examples"] = <code>`lua
self.handle = timer.delay(1, true, function() print("print every second or manually by timer.trigger") end)
...
local result = timer.trigger(self.handle)
if not result then
   print("the timer is already cancelled or complete")
end</code>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = true,
            ["doc"] = if the timer was active, false if the timer is already cancelled / complete,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = hash,
            },
            ["name"] = handle,
            ["doc"] = the timer handle returned by timer.delay(),
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Get information about timer.,
        ["name"] = timer.get_info,
        ["error"] = ,
        ["brief"] = get information about timer,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="n">self</span><span class="p">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">timer</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;print every second&quot;</span><span class="p">)</span> <span class="kr">end</span><span class="p">)</span>
<span class="p">...</span>
<span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="n">timer</span><span class="p">.</span><span class="n">get_info</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">handle</span><span class="p">)</span>
<span class="kr">if</span> <span class="ow">not</span> <span class="n">result</span> <span class="kr">then</span>
   <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;the timer is already cancelled or complete&quot;</span><span class="p">)</span>
<span class="kr">else</span>
   <span class="n">pprint</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c1">-- delay, time_remaining, repeating</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = table,
              [2] = nil,
            },
            ["name"] = data,
            ["doc"] = table or <code>nil</code> if timer is cancelled/completed. table with data in the following fields:
<dl>
<dt><code>time_remaining</code></dt>
<dd><span class="type">number</span> Time remaining until the next time a timer.delay() fires.</dd>
<dt><code>delay</code></dt>
<dd><span class="type">number</span> Time interval.</dd>
<dt><code>repeating</code></dt>
<dd><span class="type">boolean</span> true = repeat timer until cancel, false = one-shot timer.</dd>
</dl>,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Indicates an invalid timer handle,
        ["name"] = timer.INVALID_TIMER_HANDLE,
        ["error"] = ,
        ["brief"] = Indicates an invalid timer handle,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Timers allow you to set a delay and a callback to be called when the timer completes.
The timers created with this API are updated with the collection timer where they
are created. If you pause or speed up the collection (using <code>set_time_step</code>) it will
also affect the new timer.,
      ["name"] = Timer,
      ["notes"] = {},
      ["namespace"] = timer,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Timer API documentation,
    },
  },
  [33] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = table,
            },
            ["name"] = t,
            ["doc"] = table of numbers,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a vector of arbitrary size. The vector is initialized
with numeric values from a table.
<span class="icon-attention"></span> The table values are converted to floating point
values. If a value cannot be converted, a 0 is stored in that
value position in the vector.,
        ["name"] = vmath.vector,
        ["error"] = ,
        ["brief"] = create a new vector from a table of values,
        ["type"] = FUNCTION,
        ["examples"] = How to create a vector with custom data to be used for animation easing:
<div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">values</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span> <span class="p">}</span>
<span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector (size: 3)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="c1">--&gt; 0.5</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new zero vector with all components set to 0.,
        ["name"] = vmath.vector3,
        ["error"] = ,
        ["brief"] = creates a new zero vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">()</span>
<span class="n">pprint</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(0, 0, 0)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="c1">--&gt; 0</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = new zero vector,
          },
        },
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = scalar value to splat,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new vector with all components set to the
supplied scalar value.,
        ["name"] = vmath.vector3,
        ["error"] = ,
        ["brief"] = creates a new vector from scalar value,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(1, 1, 1)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="c1">--&gt; 1</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v1,
            ["doc"] = existing vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new vector with all components set to the
corresponding values from the supplied vector. I.e.
This function creates a copy of the given vector.,
        ["name"] = vmath.vector3,
        ["error"] = ,
        ["brief"] = creates a new vector from another existing vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vec2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="n">vec1</span><span class="p">)</span>
<span class="kr">if</span> <span class="n">vec1</span> <span class="o">==</span> <span class="n">vec2</span> <span class="kr">then</span>
    <span class="c1">-- yes, they are equal</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">vec2</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(1, 1, 1)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x coordinate,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y coordinate,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = z,
            ["doc"] = z coordinate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new vector with the components set to the
supplied values.,
        ["name"] = vmath.vector3,
        ["error"] = ,
        ["brief"] = creates a new vector from its coordinates,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(1, 2, 3)</span>
<span class="nb">print</span><span class="p">(</span><span class="o">-</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(-1, -2, -3)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(2, 4, 6)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span> <span class="o">+</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mf">2.0</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(3, 4, 5)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span> <span class="o">-</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mf">2.0</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(-1, 0, 1)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new zero vector with all components set to 0.,
        ["name"] = vmath.vector4,
        ["error"] = ,
        ["brief"] = creates a new zero vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(0, 0, 0, 0)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">w</span><span class="p">)</span> <span class="c1">--&gt; 0</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = v,
            ["doc"] = new zero vector,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = scalar value to splat,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new vector with all components set to the
supplied scalar value.,
        ["name"] = vmath.vector4,
        ["error"] = ,
        ["brief"] = creates a new vector from scalar value,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(1, 1, 1, 1)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">w</span><span class="p">)</span> <span class="c1">--&gt; 1</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = v1,
            ["doc"] = existing vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new vector with all components set to the
corresponding values from the supplied vector. I.e.
This function creates a copy of the given vector.,
        ["name"] = vmath.vector4,
        ["error"] = ,
        ["brief"] = creates a new vector from another existing vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vect1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vect2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="n">vec1</span><span class="p">)</span>
<span class="kr">if</span> <span class="n">vec1</span> <span class="o">==</span> <span class="n">vec2</span> <span class="kr">then</span>
    <span class="c1">-- yes, they are equal</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">vec2</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(1, 1, 1, 1)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x coordinate,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y coordinate,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = z,
            ["doc"] = z coordinate,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = w,
            ["doc"] = w coordinate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new vector with the components set to the
supplied values.,
        ["name"] = vmath.vector4,
        ["error"] = ,
        ["brief"] = creates a new vector from its coordinates,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(1, 2, 3, 4)</span>
<span class="nb">print</span><span class="p">(</span><span class="o">-</span><span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(-1, -2, -3, -4)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(2, 4, 6, 8)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span> <span class="o">+</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mf">2.0</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector4(3, 4, 5, 6)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vec</span> <span class="o">-</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mf">2.0</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector4(-1, 0, 1, 2)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector4,
            },
            ["name"] = v,
            ["doc"] = new vector,
          },
        },
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new identity quaternion. The identity
quaternion is equal to:
<code>vmath.quat(0, 0, 0, 1)</code>,
        ["name"] = vmath.quat,
        ["error"] = ,
        ["brief"] = creates a new identity quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">quat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">quat</span><span class="p">)</span> <span class="c1">--&gt; vmath.quat(0, 0, 0, 1)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">quat</span><span class="p">.</span><span class="n">w</span><span class="p">)</span> <span class="c1">--&gt; 1</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = new identity quaternion,
          },
        },
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q1,
            ["doc"] = existing quaternion,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new quaternion with all components set to the
corresponding values from the supplied quaternion. I.e.
This function creates a copy of the given quaternion.,
        ["name"] = vmath.quat,
        ["error"] = ,
        ["brief"] = creates a new quaternion from another existing quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">quat1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">quat2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">(</span><span class="n">quat1</span><span class="p">)</span>
<span class="kr">if</span> <span class="n">quat1</span> <span class="o">==</span> <span class="n">quat2</span> <span class="kr">then</span>
    <span class="c1">-- yes, they are equal</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">quat2</span><span class="p">)</span> <span class="c1">--&gt; vmath.quat(1, 2, 3, 4)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = new quaternion,
          },
        },
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = x,
            ["doc"] = x coordinate,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = y,
            ["doc"] = y coordinate,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = z,
            ["doc"] = z coordinate,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = w,
            ["doc"] = w coordinate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new quaternion with the components set
according to the supplied parameter values.,
        ["name"] = vmath.quat,
        ["error"] = ,
        ["brief"] = creates a new quaternion from its coordinates,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">quat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">quat</span><span class="p">)</span> <span class="c1">--&gt; vmath.quat(1, 2, 3, 4)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = new quaternion,
          },
        },
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v1,
            ["doc"] = first unit vector, before rotation,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v2,
            ["doc"] = second unit vector, after rotation,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting quaternion describes the rotation that,
if applied to the first vector, would rotate the first
vector to the second. The two vectors must be unit
vectors (of length 1).
<span class="icon-attention"></span> The result is undefined if the two vectors point in opposite directions,
        ["name"] = vmath.quat_from_to,
        ["error"] = ,
        ["brief"] = creates a quaternion to rotate between two unit vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_from_to</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="n">v1</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(0, 0.99999994039536, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion representing the rotation from first to second vector,
          },
        },
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = axis,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting quaternion describes a rotation of <code>angle</code>
radians around the axis described by the unit vector <code>v</code>.,
        ["name"] = vmath.quat_axis_angle,
        ["error"] = ,
        ["brief"] = creates a quaternion to rotate around a unit vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">axis</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_axis_angle</span><span class="p">(</span><span class="n">axis</span><span class="p">,</span> <span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="n">vec</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(1, -1, -8.7422776573476e-08)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion representing the axis-angle rotation,
          },
        },
      },
      [15] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = x,
            ["doc"] = x base vector,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = y,
            ["doc"] = y base vector,
          },
          [3] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = z,
            ["doc"] = z base vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting quaternion describes the rotation from the
identity quaternion (no rotation) to the coordinate system
as described by the given x, y and z base unit vectors.,
        ["name"] = vmath.quat_basis,
        ["error"] = ,
        ["brief"] = creates a quaternion from three base unit vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Axis rotated 90 degrees around z.</span>
<span class="kd">local</span> <span class="n">rot_x</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">rot_y</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">z</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">rot1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_basis</span><span class="p">(</span><span class="n">rot_x</span><span class="p">,</span> <span class="n">rot_y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">rot2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_from_to</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="kr">if</span> <span class="n">rot1</span> <span class="o">==</span> <span class="n">rot2</span> <span class="kr">then</span>
    <span class="c1">-- These quaternions are equal!</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">rot2</span><span class="p">)</span> <span class="c1">--&gt; vmath.quat(0, 0, -0.70710676908493, 0.70710676908493)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion representing the rotation of the specified base vectors,
          },
        },
      },
      [16] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians around x-axis,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting quaternion describes a rotation of <code>angle</code>
radians around the x-axis.,
        ["name"] = vmath.quat_rotation_x,
        ["error"] = ,
        ["brief"] = creates a quaternion from rotation around x-axis,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_x</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="n">vec</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(1, -1, -8.7422776573476e-08)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion representing the rotation around the x-axis,
          },
        },
      },
      [17] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians around y-axis,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting quaternion describes a rotation of <code>angle</code>
radians around the y-axis.,
        ["name"] = vmath.quat_rotation_y,
        ["error"] = ,
        ["brief"] = creates a quaternion from rotation around y-axis,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_y</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="n">vec</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(-1, 1, 8.7422776573476e-08)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion representing the rotation around the y-axis,
          },
        },
      },
      [18] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians around z-axis,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting quaternion describes a rotation of <code>angle</code>
radians around the z-axis.,
        ["name"] = vmath.quat_rotation_z,
        ["error"] = ,
        ["brief"] = creates a quaternion from rotation around z-axis,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="n">vec</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(-0.99999988079071, -1, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion representing the rotation around the z-axis,
          },
        },
      },
      [19] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting identity matrix describes a transform with
no translation or rotation.,
        ["name"] = vmath.matrix4,
        ["error"] = ,
        ["brief"] = creates a new identity matrix,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">mat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span> <span class="c1">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</span>
<span class="c1">-- get column 0:</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span><span class="p">.</span><span class="n">c0</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(1, 0, 0, 0)</span>
<span class="c1">-- get the value in row 3 and column 2:</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span><span class="p">.</span><span class="n">m32</span><span class="p">)</span> <span class="c1">--&gt; 0</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = identity matrix,
          },
        },
      },
      [20] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m1,
            ["doc"] = existing matrix,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a new matrix with all components set to the
corresponding values from the supplied matrix. I.e.
the function creates a copy of the given matrix.,
        ["name"] = vmath.matrix4,
        ["error"] = ,
        ["brief"] = creates a new matrix from another existing matrix,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">mat1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_x</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span>
<span class="kr">if</span> <span class="n">mat1</span> <span class="o">==</span> <span class="n">mat2</span> <span class="kr">then</span>
    <span class="c1">-- yes, they are equal</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">mat2</span><span class="p">)</span> <span class="c1">--&gt; vmath.matrix4(1, 0, 0, 0, 0, -1, 8.7422776573476e-08, 0, 0, -8.7422776573476e-08, -1, 0, 0, 0, 0, 1)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix which is a copy of the specified matrix,
          },
        },
      },
      [21] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = left,
            ["doc"] = coordinate for left clipping plane,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = right,
            ["doc"] = coordinate for right clipping plane,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = bottom,
            ["doc"] = coordinate for bottom clipping plane,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = top,
            ["doc"] = coordinate for top clipping plane,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = near,
            ["doc"] = coordinate for near clipping plane,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = far,
            ["doc"] = coordinate for far clipping plane,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Constructs a frustum matrix from the given values. The left, right,
top and bottom coordinates of the view cone are expressed as distances
from the center of the near clipping plane. The near and far coordinates
are expressed as distances from the tip of the view frustum cone.,
        ["name"] = vmath.matrix4_frustum,
        ["error"] = ,
        ["brief"] = creates a frustum matrix,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Construct a projection frustum with a vertical and horizontal</span>
<span class="c1">-- FOV of 45 degrees. Useful for rendering a square view.</span>
<span class="kd">local</span> <span class="n">proj</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_frustum</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_projection</span><span class="p">(</span><span class="n">proj</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix representing the frustum,
          },
        },
      },
      [22] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = eye,
            ["doc"] = eye position,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = look_at,
            ["doc"] = look-at position,
          },
          [3] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = up,
            ["doc"] = up vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix is created from the supplied look-at parameters.
This is useful for constructing a view matrix for a camera or
rendering in general.,
        ["name"] = vmath.matrix4_look_at,
        ["error"] = ,
        ["brief"] = creates a look-at view matrix,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Set up a perspective camera at z 100 with 45 degrees (pi/2) FOV</span>
<span class="c1">-- Aspect ratio 4:3</span>
<span class="kd">local</span> <span class="n">eye</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">look_at</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">up</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">view</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_look_at</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">look_at</span><span class="p">,</span> <span class="n">up</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_view</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">proj</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_perspective</span><span class="p">(</span><span class="mf">3.141592</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_projection</span><span class="p">(</span><span class="n">proj</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = look-at matrix,
          },
        },
      },
      [23] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = left,
            ["doc"] = coordinate for left clipping plane,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = right,
            ["doc"] = coordinate for right clipping plane,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = bottom,
            ["doc"] = coordinate for bottom clipping plane,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = top,
            ["doc"] = coordinate for top clipping plane,
          },
          [5] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = near,
            ["doc"] = coordinate for near clipping plane,
          },
          [6] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = far,
            ["doc"] = coordinate for far clipping plane,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates an orthographic projection matrix.
This is useful to construct a projection matrix for a camera or rendering in general.,
        ["name"] = vmath.matrix4_orthographic,
        ["error"] = ,
        ["brief"] = creates an orthographic projection matrix,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Set up an orthographic projection based on the width and height</span>
<span class="c1">-- of the game window.</span>
<span class="kd">local</span> <span class="n">w</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span>
<span class="kd">local</span> <span class="n">h</span> <span class="o">=</span> <span class="n">render</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span>
<span class="kd">local</span> <span class="n">proj</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_orthographic</span><span class="p">(</span><span class="o">-</span> <span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_projection</span><span class="p">(</span><span class="n">proj</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = orthographic projection matrix,
          },
        },
      },
      [24] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = fov,
            ["doc"] = angle of the full vertical field of view in radians,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = aspect,
            ["doc"] = aspect ratio,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = near,
            ["doc"] = coordinate for near clipping plane,
          },
          [4] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = far,
            ["doc"] = coordinate for far clipping plane,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Creates a perspective projection matrix.
This is useful to construct a projection matrix for a camera or rendering in general.,
        ["name"] = vmath.matrix4_perspective,
        ["error"] = ,
        ["brief"] = creates a perspective projection matrix,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Set up a perspective camera at z 100 with 45 degrees (pi/2) FOV</span>
<span class="c1">-- Aspect ratio 4:3</span>
<span class="kd">local</span> <span class="n">eye</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">look_at</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">up</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">view</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_look_at</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">look_at</span><span class="p">,</span> <span class="n">up</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_view</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">proj</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_perspective</span><span class="p">(</span><span class="mf">3.141592</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_projection</span><span class="p">(</span><span class="n">proj</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = perspective projection matrix,
          },
        },
      },
      [25] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion to create matrix from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix describes the same rotation as the quaternion, but does not have any translation (also like the quaternion).,
        ["name"] = vmath.matrix4_from_quat,
        ["error"] = ,
        ["brief"] = creates a matrix from a quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">quat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_from_quat</span><span class="p">(</span><span class="n">quat</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span> <span class="o">*</span> <span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.matrix4_frustum(-1, 1, -1, 1, 1, 1000)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix represented by quaternion,
          },
        },
      },
      [26] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = axis,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix describes a rotation around the axis by the specified angle.,
        ["name"] = vmath.matrix4_axis_angle,
        ["error"] = ,
        ["brief"] = creates a matrix from an axis and an angle,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">axis</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">-- z-axis</span>
<span class="kd">local</span> <span class="n">mat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_axis_angle</span><span class="p">(</span><span class="n">axis</span><span class="p">,</span> <span class="mf">3.141592653</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span> <span class="o">*</span> <span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(-0.99999994039536, -1.0000001192093, 0, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix represented by axis and angle,
          },
        },
      },
      [27] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians around x-axis,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix describes a rotation around the x-axis
by the specified angle.,
        ["name"] = vmath.matrix4_rotation_x,
        ["error"] = ,
        ["brief"] = creates a matrix from rotation around x-axis,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_x</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span> <span class="o">*</span> <span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(1, -1, -8.7422776573476e-08, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix from rotation around x-axis,
          },
        },
      },
      [28] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians around y-axis,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix describes a rotation around the y-axis
by the specified angle.,
        ["name"] = vmath.matrix4_rotation_y,
        ["error"] = ,
        ["brief"] = creates a matrix from rotation around y-axis,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_y</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span> <span class="o">*</span> <span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(-1, 1, 8.7422776573476e-08, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix from rotation around y-axis,
          },
        },
      },
      [29] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = angle,
            ["doc"] = angle in radians around z-axis,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix describes a rotation around the z-axis
by the specified angle.,
        ["name"] = vmath.matrix4_rotation_z,
        ["error"] = ,
        ["brief"] = creates a matrix from rotation around z-axis,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat</span> <span class="o">*</span> <span class="n">vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector4(-0.99999994039536, -1.0000001192093, 0, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix from rotation around z-axis,
          },
        },
      },
      [30] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = position,
            ["doc"] = position vector to create matrix from,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix describes a translation of a point
in euclidean space.,
        ["name"] = vmath.matrix4_translation,
        ["error"] = ,
        ["brief"] = creates a translation matrix from a position vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="c1">-- Set camera view from custom view and translation matrices</span>
<span class="kd">local</span> <span class="n">mat_trans</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_translation</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
<span class="kd">local</span> <span class="n">mat_view</span>  <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_y</span><span class="p">(</span><span class="o">-</span><span class="mf">3.141592</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span>
<span class="n">render</span><span class="p">.</span><span class="n">set_view</span><span class="p">(</span><span class="n">mat_view</span> <span class="o">*</span> <span class="n">mat_trans</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = matrix from the supplied position vector,
          },
        },
      },
      [31] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m1,
            ["doc"] = matrix to invert,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix is the inverse of the supplied matrix.
<span class="icon-attention"></span> For ortho-normal matrices, e.g. regular object transformation,
use <code>vmath.ortho_inv()</code> instead.
The specialized inverse for ortho-normalized matrices is much faster
than the general inverse.,
        ["name"] = vmath.inv,
        ["error"] = ,
        ["brief"] = calculates the inverse matrix.,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">mat1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">inv</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span>
<span class="c1">-- M * inv(M) = identity matrix</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat1</span> <span class="o">*</span> <span class="n">mat2</span><span class="p">)</span> <span class="c1">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = inverse of the supplied matrix,
          },
        },
      },
      [32] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m1,
            ["doc"] = ortho-normalized matrix to invert,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The resulting matrix is the inverse of the supplied matrix.
The supplied matrix has to be an ortho-normal matrix, e.g.
describe a regular object transformation.
<span class="icon-attention"></span> For matrices that are not ortho-normal
use the general inverse <code>vmath.inv()</code> instead.,
        ["name"] = vmath.ortho_inv,
        ["error"] = ,
        ["brief"] = calculates the inverse of an ortho-normal matrix.,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">mat1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">matrix4_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">mat2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">ortho_inv</span><span class="p">(</span><span class="n">mat1</span><span class="p">)</span>
<span class="c1">-- M * inv(M) = identity matrix</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mat1</span> <span class="o">*</span> <span class="n">mat2</span><span class="p">)</span> <span class="c1">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = matrix4,
            },
            ["name"] = m,
            ["doc"] = inverse of the supplied matrix,
          },
        },
      },
      [33] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v1,
            ["doc"] = first vector,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v2,
            ["doc"] = second vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = The returned value is a scalar defined as:
<code>P &#x22C5; Q = |P| |Q| cos &#x03B8;</code>
where &#x03B8; is the angle between the vectors P and Q.
<ul>
<li>If the dot product is positive then the angle between the vectors is below 90 degrees.</li>
<li>If the dot product is zero the vectors are perpendicular (at right-angles to each other).</li>
<li>If the dot product is negative then the angle between the vectors is more than 90 degrees.</li>
</ul>,
        ["name"] = vmath.dot,
        ["error"] = ,
        ["brief"] = calculates the dot-product of two vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">vmath</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vector1</span><span class="p">,</span> <span class="n">vector2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="kr">then</span>
    <span class="c1">-- The two vectors are perpendicular (at right-angles to each other)</span>
    <span class="p">...</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = dot product,
          },
        },
      },
      [34] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
              [3] = quat,
            },
            ["name"] = v,
            ["doc"] = value of which to calculate the squared length,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the squared length of the supplied vector or quaternion.,
        ["name"] = vmath.length_sqr,
        ["error"] = ,
        ["brief"] = calculates the squared length of a vector or quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">vmath</span><span class="p">.</span><span class="n">length_sqr</span><span class="p">(</span><span class="n">vector1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">vmath</span><span class="p">.</span><span class="n">length_sqr</span><span class="p">(</span><span class="n">vector2</span><span class="p">)</span> <span class="kr">then</span>
    <span class="c1">-- Vector 1 has less magnitude than vector 2</span>
    <span class="p">...</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = squared length,
          },
        },
      },
      [35] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
              [3] = quat,
            },
            ["name"] = v,
            ["doc"] = value of which to calculate the length,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns the length of the supplied vector or quaternion.
If you are comparing the lengths of vectors or quaternions, you should compare
the length squared instead as it is slightly more efficient to calculate
(it eliminates a square root calculation).,
        ["name"] = vmath.length,
        ["error"] = ,
        ["brief"] = calculates the length of a vector or quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">if</span> <span class="n">vmath</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">velocity</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_velocity</span> <span class="kr">then</span>
    <span class="c1">-- The speed (velocity vector) is below max.</span>

    <span class="c1">-- TODO: max_velocity can be expressed as squared</span>
    <span class="c1">-- so we can compare with length_sqr() instead.</span>
    <span class="p">...</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = length,
          },
        },
      },
      [36] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
              [3] = quat,
            },
            ["name"] = v1,
            ["doc"] = vector to normalize,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Normalizes a vector, i.e. returns a new vector with the same
direction as the input vector, but with length 1.
<span class="icon-attention"></span> The length of the vector must be above 0, otherwise a
division-by-zero will occur.,
        ["name"] = vmath.normalize,
        ["error"] = ,
        ["brief"] = normalizes a vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">norm_vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">norm_vec</span><span class="p">)</span> <span class="c1">--&gt; vmath.vector3(0.26726123690605, 0.5345224738121, 0.80178368091583)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="n">norm_vec</span><span class="p">))</span> <span class="c1">--&gt; 0.99999994039536</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
              [3] = quat,
            },
            ["name"] = v,
            ["doc"] = new normalized vector,
          },
        },
      },
      [37] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v1,
            ["doc"] = first vector,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v2,
            ["doc"] = second vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Given two linearly independent vectors P and Q, the cross product,
P &#x00D7; Q, is a vector that is perpendicular to both P and Q and
therefore normal to the plane containing them.
If the two vectors have the same direction (or have the exact
opposite direction from one another, i.e. are not linearly independent)
or if either one has zero length, then their cross product is zero.,
        ["name"] = vmath.cross,
        ["error"] = ,
        ["brief"] = calculates the cross-product of two vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">vec2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">cross</span><span class="p">(</span><span class="n">vec1</span><span class="p">,</span> <span class="n">vec2</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(0, 0, 1)</span>
<span class="kd">local</span> <span class="n">vec3</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">cross</span><span class="p">(</span><span class="n">vec1</span><span class="p">,</span> <span class="n">vec3</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(0, -0, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = a new vector representing the cross product,
          },
        },
      },
      [38] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = t,
            ["doc"] = interpolation parameter, 0-1,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v1,
            ["doc"] = vector to lerp from,
          },
          [3] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v2,
            ["doc"] = vector to lerp to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Linearly interpolate between two vectors. The function
treats the vectors as positions and interpolates between
the positions in a straight line. Lerp is useful to describe
transitions from one place to another over time.
<span class="icon-attention"></span> The function does not clamp t between 0 and 1.,
        ["name"] = vmath.lerp,
        ["error"] = ,
        ["brief"] = lerps between two vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">+</span> <span class="n">dt</span>
    <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">startpos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">endpos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">600</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">lerp</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="n">startpos</span><span class="p">,</span> <span class="n">endpos</span><span class="p">)</span>
        <span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="s2">&quot;go&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v,
            ["doc"] = the lerped vector,
          },
        },
      },
      [39] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = t,
            ["doc"] = interpolation parameter, 0-1,
          },
          [2] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q1,
            ["doc"] = quaternion to lerp from,
          },
          [3] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q2,
            ["doc"] = quaternion to lerp to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Linearly interpolate between two quaternions. Linear
interpolation of rotations are only useful for small
rotations. For interpolations of arbitrary rotations,
<a href="/ref/vmath#vmath.slerp">vmath.slerp</a> yields much better results.
<span class="icon-attention"></span> The function does not clamp t between 0 and 1.,
        ["name"] = vmath.lerp,
        ["error"] = ,
        ["brief"] = lerps between two quaternions,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">+</span> <span class="n">dt</span>
    <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">startrot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">endrot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">lerp</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="n">startrot</span><span class="p">,</span> <span class="n">endrot</span><span class="p">)</span>
        <span class="n">go</span><span class="p">.</span><span class="n">set_rotation</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="s2">&quot;go&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = the lerped quaternion,
          },
        },
      },
      [40] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = t,
            ["doc"] = interpolation parameter, 0-1,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n1,
            ["doc"] = number to lerp from,
          },
          [3] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n2,
            ["doc"] = number to lerp to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Linearly interpolate between two values. Lerp is useful
to describe transitions from one value to another over time.
<span class="icon-attention"></span> The function does not clamp t between 0 and 1.,
        ["name"] = vmath.lerp,
        ["error"] = ,
        ["brief"] = lerps between two numbers,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">+</span> <span class="n">dt</span>
    <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">startx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="kd">local</span> <span class="n">endx</span> <span class="o">=</span> <span class="mi">600</span>
        <span class="kd">local</span> <span class="n">x</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">lerp</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="n">startx</span><span class="p">,</span> <span class="n">endx</span><span class="p">)</span>
        <span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="s2">&quot;go&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = the lerped number,
          },
        },
      },
      [41] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = t,
            ["doc"] = interpolation parameter, 0-1,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v1,
            ["doc"] = vector to slerp from,
          },
          [3] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v2,
            ["doc"] = vector to slerp to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Spherically interpolates between two vectors. The difference to
lerp is that slerp treats the vectors as directions instead of
positions in space.
The direction of the returned vector is interpolated by the angle
and the magnitude is interpolated between the magnitudes of the
from and to vectors.
<span class="icon-attention"></span> Slerp is computationally more expensive than lerp.
The function does not clamp t between 0 and 1.,
        ["name"] = vmath.slerp,
        ["error"] = ,
        ["brief"] = slerps between two vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">+</span> <span class="n">dt</span>
    <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">startpos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">endpos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">600</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">slerp</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="n">startpos</span><span class="p">,</span> <span class="n">endpos</span><span class="p">)</span>
        <span class="n">go</span><span class="p">.</span><span class="n">set_position</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="s2">&quot;go&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v,
            ["doc"] = the slerped vector,
          },
        },
      },
      [42] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = t,
            ["doc"] = interpolation parameter, 0-1,
          },
          [2] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q1,
            ["doc"] = quaternion to slerp from,
          },
          [3] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q2,
            ["doc"] = quaternion to slerp to,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Slerp travels the torque-minimal path maintaining constant
velocity, which means it travels along the straightest path along
the rounded surface of a sphere. Slerp is useful for interpolation
of rotations.
Slerp travels the torque-minimal path, which means it travels
along the straightest path the rounded surface of a sphere.
<span class="icon-attention"></span> The function does not clamp t between 0 and 1.,
        ["name"] = vmath.slerp,
        ["error"] = ,
        ["brief"] = slerps between two quaternions,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">+</span> <span class="n">dt</span>
    <span class="kr">if</span> <span class="n">self</span><span class="p">.</span><span class="n">t</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">startrot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">endrot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mf">3.141592653</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">slerp</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="n">startrot</span><span class="p">,</span> <span class="n">endrot</span><span class="p">)</span>
        <span class="n">go</span><span class="p">.</span><span class="n">set_rotation</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="s2">&quot;go&quot;</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = the slerped quaternion,
          },
        },
      },
      [43] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q1,
            ["doc"] = quaternion of which to calculate the conjugate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Calculates the conjugate of a quaternion. The result is a
quaternion with the same magnitudes but with the sign of
the imaginary (vector) parts changed:
<code>q<super>*</super> = [w, -v]</code>,
        ["name"] = vmath.conj,
        ["error"] = ,
        ["brief"] = calculates the conjugate of a quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">quat</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">conj</span><span class="p">(</span><span class="n">quat</span><span class="p">))</span> <span class="c1">--&gt; vmath.quat(-1, -2, -3, 4)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = the conjugate,
          },
        },
      },
      [44] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = quaternion,
            },
            ["name"] = q,
            ["doc"] = quaternion,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v1,
            ["doc"] = vector to rotate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Returns a new vector from the supplied vector that is
rotated by the rotation described by the supplied
quaternion.,
        ["name"] = vmath.rotate,
        ["error"] = ,
        ["brief"] = rotates a vector by a quaternion,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">quat_rotation_z</span><span class="p">(</span><span class="mf">3.141592563</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">rot</span><span class="p">,</span> <span class="n">vec</span><span class="p">))</span> <span class="c1">--&gt; vmath.vector3(-1.0000002384186, -0.99999988079071, 0)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v,
            ["doc"] = the rotated vector,
          },
        },
      },
      [45] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v1,
            ["doc"] = vector to be projected on the second,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
            },
            ["name"] = v2,
            ["doc"] = vector onto which the first will be projected, must not have zero length,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Calculates the extent the projection of the first vector onto the second.
The returned value is a scalar p defined as:
<code>p = |P| cos &#x03B8; / |Q|</code>
where &#x03B8; is the angle between the vectors P and Q.,
        ["name"] = vmath.project,
        ["error"] = ,
        ["brief"] = projects a vector onto another vector,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">vector3</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vmath</span><span class="p">.</span><span class="n">project</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">))</span> <span class="c1">--&gt; 0.5</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = n,
            ["doc"] = the projected extent of the first vector onto the second,
          },
        },
      },
      [46] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v1,
            ["doc"] = first vector,
          },
          [2] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v2,
            ["doc"] = second vector,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Performs an element wise multiplication between two vectors of the same type
The returned value is a vector defined as (e.g. for a vector3):
<code>v = vmath.mul_per_elem(a, b) = vmath.vector3(a.x * b.x, a.y * b.y, a.z * b.z)</code>,
        ["name"] = vmath.mul_per_elem,
        ["error"] = ,
        ["brief"] = performs an element wise multiplication of two vectors,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">blend_color</span> <span class="o">=</span> <span class="n">vmath</span><span class="p">.</span><span class="n">mul_per_elem</span><span class="p">(</span><span class="n">color1</span><span class="p">,</span> <span class="n">color2</span><span class="p">)</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = vector3,
              [2] = vector4,
            },
            ["name"] = v,
            ["doc"] = multiplied vector,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Functions for mathematical operations on vectors, matrices and quaternions.
<ul>
<li>The vector types (<code>vmath.vector3</code> and <code>vmath.vector4</code>) supports addition and subtraction
  with vectors of the same type. Vectors can be negated and multiplied (scaled) or divided by numbers.</li>
<li>The quaternion type (<code>vmath.quat</code>) supports multiplication with other quaternions.</li>
<li>The matrix type (<code>vmath.matrix4</code>) can be multiplied with numbers, other matrices
  and <code>vmath.vector4</code> values.</li>
<li>All types performs equality comparison by each component value.</li>
</ul>
The following components are available for the various types:
<dl>
<dt>vector3</dt>
<dd><code>x</code>, <code>y</code> and <code>z</code>. Example: <code>v.y</code></dd>
<dt>vector4</dt>
<dd><code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>. Example: <code>v.w</code></dd>
<dt>quaternion</dt>
<dd><code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>. Example: <code>q.w</code></dd>
<dt>matrix4</dt>
<dd><code>m00</code> to <code>m33</code> where the first number is the row (starting from 0) and the second
number is the column. Columns can be accessed with <code>c0</code> to <code>c3</code>, returning a <code>vector4</code>.
Example: <code>m.m21</code> which is equal to <code>m.c1.z</code></dd>
<dt>vector</dt>
<dd>indexed by number 1 to the vector length. Example: <code>v[3]</code></dd>
</dl>,
      ["name"] = Vector math,
      ["notes"] = {},
      ["namespace"] = vmath,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Vector math API documentation,
    },
  },
  [34] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = function(self, event, data),
              [2] = nil,
            },
            ["name"] = callback,
            ["doc"] = A callback which receives info about window events. Pass an empty function or <code>nil</code> if you no longer wish to receive callbacks.
<dl>
<dt><code>self</code></dt>
<dd><span class="type">object</span> The calling script</dd>
<dt><code>event</code></dt>
<dd><span class="type">constant</span> The type of event. Can be one of these:</dd>
</dl>
<ul>
<li><code>window.WINDOW_EVENT_FOCUS_LOST</code></li>
<li><code>window.WINDOW_EVENT_FOCUS_GAINED</code></li>
<li><code>window.WINDOW_EVENT_RESIZED</code></li>
<li><code>window.WINDOW_EVENT_ICONIFIED</code></li>
<li><code>window.WINDOW_EVENT_DEICONIFIED</code></li>
</ul>
<dl>
<dt><code>data</code></dt>
<dd><span class="type">table</span> The callback value <code>data</code> is a table which currently holds these values</dd>
</dl>
<ul>
<li><span class="type">number</span> <code>width</code>: The width of a resize event. nil otherwise.</li>
<li><span class="type">number</span> <code>height</code>: The height of a resize event. nil otherwise.</li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Sets a window event listener.,
        ["name"] = window.set_listener,
        ["error"] = ,
        ["brief"] = sets a window event listener,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kr">function</span> <span class="nf">window_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">event</span> <span class="o">==</span> <span class="n">window</span><span class="p">.</span><span class="n">WINDOW_EVENT_FOCUS_LOST</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;window.WINDOW_EVENT_FOCUS_LOST&quot;</span><span class="p">)</span>
    <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span> <span class="n">window</span><span class="p">.</span><span class="n">WINDOW_EVENT_FOCUS_GAINED</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;window.WINDOW_EVENT_FOCUS_GAINED&quot;</span><span class="p">)</span>
    <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span> <span class="n">window</span><span class="p">.</span><span class="n">WINDOW_EVENT_ICONFIED</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;window.WINDOW_EVENT_ICONFIED&quot;</span><span class="p">)</span>
    <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span> <span class="n">window</span><span class="p">.</span><span class="n">WINDOW_EVENT_DEICONIFIED</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;window.WINDOW_EVENT_DEICONIFIED&quot;</span><span class="p">)</span>
    <span class="kr">elseif</span> <span class="n">event</span> <span class="o">==</span> <span class="n">window</span><span class="p">.</span><span class="n">WINDOW_EVENT_RESIZED</span> <span class="kr">then</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Window resized: &quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
    <span class="kr">end</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nf">init</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
    <span class="n">window</span><span class="p">.</span><span class="n">set_listener</span><span class="p">(</span><span class="n">window_callback</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></div>,
        ["returnvalues"] = {},
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = flag,
            ["doc"] = The lock state for the mouse cursor,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Set the locking state for current mouse cursor on a PC platform.
This function locks or unlocks the mouse cursor to the center point of the window. While the cursor is locked,
mouse position updates will still be sent to the scripts as usual.,
        ["name"] = window.set_mouse_lock,
        ["error"] = ,
        ["brief"] = set the locking state for current mouse cursor,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [3] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = mode,
            ["doc"] = The mode for screen dimming
<ul>
<li><code>window.DIMMING_ON</code></li>
<li><code>window.DIMMING_OFF</code></li>
</ul>,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-ios"></span> <span class="icon-android"></span> Sets the dimming mode on a mobile device.
The dimming mode specifies whether or not a mobile device should dim the screen after a period without user interaction. The dimming mode will only affect the mobile device while the game is in focus on the device, but not when the game is running in the background.
This function has no effect on platforms that does not support dimming.,
        ["name"] = window.set_dim_mode,
        ["error"] = ,
        ["brief"] = set the mode for screen dimming,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [4] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-ios"></span> <span class="icon-android"></span> Returns the current dimming mode set on a mobile device.
The dimming mode specifies whether or not a mobile device should dim the screen after a period without user interaction.
On platforms that does not support dimming, <code>window.DIMMING_UNKNOWN</code> is always returned.,
        ["name"] = window.get_dim_mode,
        ["error"] = ,
        ["brief"] = get the mode for screen dimming,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = constant,
            },
            ["name"] = mode,
            ["doc"] = The mode for screen dimming
<ul>
<li><code>window.DIMMING_UNKNOWN</code></li>
<li><code>window.DIMMING_ON</code></li>
<li><code>window.DIMMING_OFF</code></li>
</ul>,
          },
        },
      },
      [5] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This returns the current window size (width and height).,
        ["name"] = window.get_size,
        ["error"] = ,
        ["brief"] = get the window size,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = width,
            ["doc"] = The window width,
          },
          [2] = {
            ["types"] = {
              [1] = number,
            },
            ["name"] = height,
            ["doc"] = The window height,
          },
        },
      },
      [6] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This returns the current lock state of the mouse cursor,
        ["name"] = window.get_mouse_lock,
        ["error"] = ,
        ["brief"] = get the cursor lock state,
        ["type"] = FUNCTION,
        ["examples"] = ,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = boolean,
            },
            ["name"] = state,
            ["doc"] = The lock state,
          },
        },
      },
      [7] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This event is sent to a window event listener when the game window or app screen has lost focus.,
        ["name"] = window.WINDOW_EVENT_FOCUS_LOST,
        ["error"] = ,
        ["brief"] = focus lost window event,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [8] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This event is sent to a window event listener when the game window or app screen has
gained focus.
This event is also sent at game startup and the engine gives focus to the game.,
        ["name"] = window.WINDOW_EVENT_FOCUS_GAINED,
        ["error"] = ,
        ["brief"] = focus gained window event,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [9] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = This event is sent to a window event listener when the game window or app screen is resized.
The new size is passed along in the data field to the event listener.,
        ["name"] = window.WINDOW_EVENT_RESIZED,
        ["error"] = ,
        ["brief"] = resized window event,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [10] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-osx"></span> <span class="icon-windows"></span> <span class="icon-linux"></span> This event is sent to a window event listener when the game window or app screen is
iconified (reduced to an application icon in a toolbar, application tray or similar).,
        ["name"] = window.WINDOW_EVENT_ICONFIED,
        ["error"] = ,
        ["brief"] = iconify window event,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [11] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = <span class="icon-osx"></span> <span class="icon-windows"></span> <span class="icon-linux"></span> This event is sent to a window event listener when the game window or app screen is
restored after being iconified.,
        ["name"] = window.WINDOW_EVENT_DEICONIFIED,
        ["error"] = ,
        ["brief"] = deiconified window event,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [12] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dimming mode is used to control whether or not a mobile device should dim the screen after a period without user interaction.,
        ["name"] = window.DIMMING_ON,
        ["error"] = ,
        ["brief"] = dimming mode on,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [13] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dimming mode is used to control whether or not a mobile device should dim the screen after a period without user interaction.,
        ["name"] = window.DIMMING_OFF,
        ["error"] = ,
        ["brief"] = dimming mode off,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
      [14] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {},
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = Dimming mode is used to control whether or not a mobile device should dim the screen after a period without user interaction.
This mode indicates that the dim mode can't be determined, or that the platform doesn't support dimming.,
        ["name"] = window.DIMMING_UNKNOWN,
        ["error"] = ,
        ["brief"] = dimming mode unknown,
        ["type"] = VARIABLE,
        ["examples"] = ,
        ["returnvalues"] = {},
      },
    },
    ["info"] = {
      ["group"] = SYSTEM,
      ["description"] = Functions and constants to access the window, window event listeners
and screen dimming.,
      ["name"] = Window,
      ["notes"] = {},
      ["namespace"] = window,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Window API documentation,
    },
  },
  [35] = {
    ["elements"] = {
      [1] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buf,
            ["doc"] = buffer to inflate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = A lua error is raised is on error,
        ["name"] = zlib.inflate,
        ["error"] = ,
        ["brief"] = Inflate (decompress) a buffer,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">data</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\120\94\11\201\200\44\86\0\162\68\133\226\146\162\204\188\116\133\242\204\146\12\133\210\188\228\252\220\130\162\212\226\226\212\20\133\148\196\146\68\61\0\44\67\14\201</span><span class="s2">&quot;</span>
<span class="kd">local</span> <span class="n">uncompressed_data</span> <span class="o">=</span> <span class="n">zlib</span><span class="p">.</span><span class="n">inflate</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">uncompressed_data</span><span class="p">)</span> <span class="c1">--&gt; This is a string with uncompressed data.</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buf,
            ["doc"] = inflated buffer,
          },
        },
      },
      [2] = {
        ["members"] = {},
        ["replaces"] = ,
        ["parameters"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buf,
            ["doc"] = buffer to deflate,
          },
        },
        ["notes"] = {},
        ["tparams"] = {},
        ["description"] = A lua error is raised is on error,
        ["name"] = zlib.deflate,
        ["error"] = ,
        ["brief"] = Deflate (compress) a buffer,
        ["type"] = FUNCTION,
        ["examples"] = <div class="codehilite"><pre><span></span><code><span class="kd">local</span> <span class="n">data</span> <span class="o">=</span> <span class="s2">&quot;This is a string with uncompressed data.&quot;</span>
<span class="kd">local</span> <span class="n">compressed_data</span> <span class="o">=</span> <span class="n">zlib</span><span class="p">.</span><span class="n">deflate</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
<span class="kr">for</span> <span class="n">c</span> <span class="kr">in</span> <span class="nb">string.gmatch</span><span class="p">(</span><span class="n">compressed_data</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">)</span> <span class="kr">do</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="se">\\</span><span class="s1">&#39;</span> <span class="o">..</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="kr">end</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c1">--&gt; \120\94\11\201\200\44\86\0\162\68\133\226\146\162 ...</span>
</code></pre></div>,
        ["returnvalues"] = {
          [1] = {
            ["types"] = {
              [1] = string,
            },
            ["name"] = buf,
            ["doc"] = deflated buffer,
          },
        },
      },
    },
    ["info"] = {
      ["group"] = SCRIPT,
      ["description"] = Functions for compression and decompression of string buffers.,
      ["name"] = Zlib,
      ["notes"] = {},
      ["namespace"] = zlib,
      ["file"] = ,
      ["path"] = ,
      ["brief"] = Zlib compression API documentation,
    },
  },
}